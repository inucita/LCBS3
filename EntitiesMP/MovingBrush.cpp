/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"

#include "StdH.h"

#include "EntitiesMP/Player.h"
//#include "EntitiesMP/Werebull.h"


#include <EntitiesMP/MovingBrush.h>
#include <EntitiesMP/MovingBrush_tables.h>
CEntityEvent *EHit::MakeCopy(void) { CEntityEvent *peeCopy = new EHit(*this); return peeCopy;}
SLONG EHit::GetSizeOf(void) { return sizeof(*this);}
EHit::EHit() : CEntityEvent(EVENTCODE_EHit) {;
};
BOOL EHit::CheckIDs(void) { return TRUE ; }
CEntityEvent *EBrushDestroyed::MakeCopy(void) { CEntityEvent *peeCopy = new EBrushDestroyed(*this); return peeCopy;}
SLONG EBrushDestroyed::GetSizeOf(void) { return sizeof(*this);}
EBrushDestroyed::EBrushDestroyed() : CEntityEvent(EVENTCODE_EBrushDestroyed) {;
};
BOOL EBrushDestroyed::CheckIDs(void) { return TRUE ; }
CEntityEvent *EStartSounds::MakeCopy(void) { CEntityEvent *peeCopy = new EStartSounds(*this); return peeCopy;}
SLONG EStartSounds::GetSizeOf(void) { return sizeof(*this);}
EStartSounds::EStartSounds() : CEntityEvent(EVENTCODE_EStartSounds) {;
};
BOOL EStartSounds::CheckIDs(void) { return TRUE ; }
CEntityEvent *EStopSounds::MakeCopy(void) { CEntityEvent *peeCopy = new EStopSounds(*this); return peeCopy;}
SLONG EStopSounds::GetSizeOf(void) { return sizeof(*this);}
EStopSounds::EStopSounds() : CEntityEvent(EVENTCODE_EStopSounds) {;
};
BOOL EStopSounds::CheckIDs(void) { return TRUE ; }
CEntityEvent *EBrushDeath::MakeCopy(void) { CEntityEvent *peeCopy = new EBrushDeath(*this); return peeCopy;}
SLONG EBrushDeath::GetSizeOf(void) { return sizeof(*this);}
EBrushDeath::EBrushDeath() : CEntityEvent(EVENTCODE_EBrushDeath) {;
 ClearToDefault(eidInflictor);
};
BOOL EBrushDeath::CheckIDs(void) { return TRUE && eidInflictor.IsValid(); }
#line 39 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"

static const float TRANSLATION_EPSILON=0.05f;
static const float ROTATION_EPSILON=0.05f;
extern void GetDefaultForce(INDEX iForce, const FLOAT3D &vPoint, 
		CForceStrength &fsGravity, CForceStrength &fsField);

void CMovingBrush::SetDefaultProperties(void) {
  m_strName = "Moving Brush";
  m_strDescription = "";
  m_penTarget = NULL;
  m_bAutoStart = FALSE ;
  m_fSpeed = 1.0f;
  m_fWaitTime = 0.0f;
  m_bMoveOnTouch = FALSE ;
  m_ebaAction = BA_NONE ;
  m_fBlockDamage = 10.0f;
  m_bPlayersOnly = TRUE ;
  m_bDynamicShadows = FALSE ;
  m_bVeryBigBrush = FALSE ;
  m_bStartAtFirstMarker = FALSE ;
  m_eetTouchEvent = EET_IGNORE ;
  m_penTouchEvent = NULL;
  m_tdeSendEventOnDamage = TDE_TOUCHONLY ;
  m_penSwitch = NULL;
  m_eetMarkerEvent = EET_IGNORE ;
  m_penMarkerEvent = NULL;
  m_tmBankingRotation = 0.0f;
  m_bMoving = FALSE ;
  m_bRotating = FALSE ;
  m_bForceStop = FALSE ;
  m_bNoRotation = FALSE ;
  m_vDesiredTranslation = FLOAT3D(0 , 0 , 0);
  m_aDesiredRotation = FLOAT3D(0 , 0 , 0);
  m_bInverseRotate = FALSE ;
  m_bStopMoving = FALSE ;
  m_bMoveToMarker = FALSE ;
  m_bSkipMarker = FALSE ;
  m_bValidMarker = FALSE ;
  m_fXLimitSign = 0.0f;
  m_fYLimitSign = 0.0f;
  m_fZLimitSign = 0.0f;
  m_aHLimitSign = 0.0f;
  m_aPLimitSign = 0.0f;
  m_aBLimitSign = 0.0f;
  m_vStartTranslation = FLOAT3D(0 , 0 , 0);
  m_aStartRotation = ANGLE3D(0 , 0 , 0);
  m_fCourseLength = 0.0f;
  m_aHeadLenght = 0.0f;
  m_aPitchLenght = 0.0f;
  m_aBankLenght = 0.0f;
  m_penSoundStart = NULL;
  m_penSoundStop = NULL;
  m_penSoundFollow = NULL;
  m_soStart.SetOwner(this);
m_soStart.Stop(FALSE);
  m_soStop.SetOwner(this);
m_soStop.Stop(FALSE);
  m_soFollow.SetOwner(this);
m_soFollow.Stop(FALSE);
  m_penMirror0 = NULL;
  m_penMirror1 = NULL;
  m_penMirror2 = NULL;
  m_penMirror3 = NULL;
  m_penMirror4 = NULL;
  m_fHealth = -1.0f;
  m_bBlowupByBull = FALSE ;
  m_eetBlowupEvent = EET_IGNORE ;
  m_penBlowupEvent = NULL;
  m_bZoning = FALSE ;
  m_bMoveOnDamage = FALSE ;
  m_fTouchDamage = 0.0f;
  m_colDebrises = C_WHITE ;
  m_ctDebrises = 12;
  m_fCandyEffect = 0.0f;
  m_fCubeFactor = 1.0f;
  m_bBlowupByDamager = FALSE ;
  m_cbClassificationBits = 0;
  m_vbVisibilityBits = 0;
  m_bFade = TRUE ;
  m_bCollision = FALSE ;
  CMovableBrushEntity::SetDefaultProperties();
}
  
#line 160 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::HandleEvent(const CEntityEvent & ee) 
#line 161 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 163 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(ee  . ee_slEvent  == EVENTCODE_EStartSounds ){
#line 164 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! _pNetwork  -> IsServer  ()){
#line 165 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayStartSound  ();
#line 166 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayFollowSound  ();
#line 167 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 168 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 169 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(ee  . ee_slEvent  == EVENTCODE_EStopSounds ){
#line 170 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! _pNetwork  -> IsServer  ()){
#line 171 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
StopFollowSound  ();
#line 172 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayStopSound  ();
#line 173 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 174 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 175 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(ee  . ee_slEvent  == EVENTCODE_EBrushDeath ){
#line 176 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! CMovableBrushEntity  :: HandleEvent  (ee ) && ! (GetFlags  () & ENF_HIDDEN )){
#line 177 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CPrintF  (" Warning: brush death event not handled!\n");
#line 178 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () | ENF_HIDDEN );
#line 179 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 180 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 181 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 182 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 183 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 186 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return CMovableBrushEntity  :: HandleEvent  (ee );
#line 187 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 190 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ULONG CMovingBrush::GetVisTweaks(void) 
#line 191 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 192 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return m_cbClassificationBits  | m_vbVisibilityBits ;
#line 193 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 195 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::Precache(void) 
#line 196 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 197 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PrecacheClass  (CLASS_DEBRIS );
#line 198 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PrecacheModel  (MODEL_STONE );
#line 199 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PrecacheTexture  (TEXTURE_STONE );
#line 200 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 202 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::GetForce(INDEX iForce,const FLOAT3D & vPoint,
#line 203 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CForceStrength & fsGravity,CForceStrength & fsField) 
#line 204 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 205 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
GetDefaultForce  (iForce  , vPoint  , fsGravity  , fsField );
#line 206 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 208 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::ReceiveDamage(CEntity * penInflictor,enum DamageType dmtType,
#line 209 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT fDamageAmmount,const FLOAT3D & vHitPoint,const FLOAT3D & vDirection) 
#line 210 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 211 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bMoveOnDamage )
#line 212 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 213 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
EHit  eHit ;
#line 214 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendEvent  (eHit );
#line 215 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return ;
#line 216 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 219 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_tdeSendEventOnDamage  != TDE_TOUCHONLY  && CanReactOnEntity  (penInflictor )){
#line 220 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendToTarget  (m_penTouchEvent  , m_eetTouchEvent  , penInflictor );
#line 221 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 224 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_fHealth  < 0){
#line 226 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return ;
#line 227 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 230 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bBlowupByBull )
#line 231 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 233 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(dmtType  == DMT_IMPACT )
#line 235 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 237 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , m_fHealth  * 2 , vHitPoint  , vDirection );
#line 239 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
((CLiveEntity  *) penInflictor ) -> SetHealth  (0.0f);
#line 240 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
InflictDirectDamage  (penInflictor  , this  , DMT_IMPACT  , 1.0f , 
#line 241 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
GetPlacement  () . pl_PositionVector  , FLOAT3D (0 , 1 , 0));
#line 242 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 243 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 244 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
else if(m_bBlowupByDamager )
#line 245 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 246 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(dmtType  == DMT_DAMAGER )
#line 247 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 248 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , fDamageAmmount  , vHitPoint  , vDirection );
#line 249 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 250 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 251 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
else 
#line 252 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 254 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if((dmtType  == DMT_EXPLOSION ) || 
#line 255 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
(dmtType  == DMT_PROJECTILE )
#line 257 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
)
#line 258 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 259 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovableBrushEntity  :: ReceiveDamage  (penInflictor  , dmtType  , fDamageAmmount  , vHitPoint  , vDirection );
#line 260 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 261 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 262 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 265 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::AdjustAngle(ANGLE & a) {
#line 266 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bInverseRotate ){
#line 267 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(a  > 0){a  = a  - 360;}
#line 268 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
else if(a  < 0){a  = 360 + a ;}
#line 269 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 270 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 274 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::MovesByTargetedRoute(CTString & strTargetProperty)const {
#line 275 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
strTargetProperty  = "Target";
#line 276 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 277 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 279 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::DropsMarker(CTFileName & fnmMarkerClass,CTString & strTargetProperty)const {
#line 280 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
fnmMarkerClass  = CTFILENAME  ("Classes\\MovingBrushMarker.ecl");
#line 281 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
strTargetProperty  = "Target";
#line 282 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 283 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 284 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const CTString & CMovingBrush::GetDescription(void)const {
#line 285 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
((CTString &) m_strDescription ) . PrintF  ("-><none>");
#line 286 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penTarget  != NULL ){
#line 287 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
((CTString &) m_strDescription ) . PrintF  ("->%s" , m_penTarget  -> GetName  ());
#line 288 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 289 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return m_strDescription ;
#line 290 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 292 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const CTString & CMovingBrush::GetMirrorName(INDEX iMirror) 
#line 293 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 294 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
static const CTString strDummyName  ("");
#line 295 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 296 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(iMirror  == 0){
#line 297 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return strDummyName ;
#line 298 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 300 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
switch(iMirror ){
#line 301 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 1: {static const CTString str  ("std mirror 1");return str ;};break ;
#line 302 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 2: {static const CTString str  ("std mirror 2");return str ;};break ;
#line 303 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 3: {static const CTString str  ("std mirror 3");return str ;};break ;
#line 304 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 4: {static const CTString str  ("std mirror 4");return str ;};break ;
#line 305 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 5: {static const CTString str  ("std mirror 5");return str ;};break ;
#line 306 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 6: {static const CTString str  ("std mirror 6");return str ;};break ;
#line 307 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 7: {static const CTString str  ("std mirror 7");return str ;};break ;
#line 308 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
case 8: {static const CTString str  ("std mirror 8");return str ;};break ;
#line 309 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
default  :{
#line 310 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
iMirror  -= 9;
#line 311 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
INDEX ctMirrorMarkers  = & m_penMirror4  - & m_penMirror0 ;
#line 312 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(iMirror  < ctMirrorMarkers ){
#line 313 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMirrorMarker  * pfm  = (CMirrorMarker  *) & * (& m_penMirror0 ) [ iMirror  ];
#line 314 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(pfm  != NULL ){
#line 315 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return pfm  -> GetMirrorName  ();
#line 316 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else {
#line 317 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return strMarkerUnused ;
#line 318 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 319 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 320 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 321 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 322 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return strDummyName ;
#line 323 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 326 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::GetMirror(INDEX iMirror,class CMirrorParameters & mpMirror) 
#line 327 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 328 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(iMirror  == 0){
#line 329 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 330 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 331 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(iMirror  >= 1 && iMirror  <= 8){
#line 332 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
mpMirror  . mp_ulFlags  = 0;
#line 333 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 334 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 335 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
iMirror  -= 9;
#line 336 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
INDEX ctMirrorMarkers  = & m_penMirror4  - & m_penMirror0 ;
#line 337 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(iMirror  < ctMirrorMarkers ){
#line 338 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMirrorMarker  * pmm  = (CMirrorMarker  *) & * (& m_penMirror0 ) [ iMirror  ];
#line 339 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(pmm  != NULL ){
#line 340 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
pmm  -> GetMirror  (mpMirror );
#line 341 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 342 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 343 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 344 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 345 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 348 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::PreMoving() {
#line 349 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bMoveToMarker ){
#line 350 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const FLOAT3D & vTarget  = m_penTarget  -> GetPlacement  () . pl_PositionVector ;
#line 351 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const ANGLE3D & aTarget  = m_penTarget  -> GetPlacement  () . pl_OrientationAngle ;
#line 352 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const FLOAT3D & vSource  = GetPlacement  () . pl_PositionVector ;
#line 353 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const ANGLE3D & aSource  = GetPlacement  () . pl_OrientationAngle ;
#line 356 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT3D vSpeed  = (vTarget  - vSource ) / _pTimer  -> TickQuantum ;
#line 358 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (vSpeed  (1)) < TRANSLATION_EPSILON ){
#line 359 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (1) = 0.0f;
#line 360 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((vSpeed  (1) - m_vDesiredTranslation  (1)) * m_fXLimitSign  > 0){
#line 361 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (1) = m_vDesiredTranslation  (1);
#line 362 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 364 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (vSpeed  (2)) < TRANSLATION_EPSILON ){
#line 365 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (2) = 0.0f;
#line 366 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((vSpeed  (2) - m_vDesiredTranslation  (2)) * m_fYLimitSign  > 0){
#line 367 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (2) = m_vDesiredTranslation  (2);
#line 368 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 370 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (vSpeed  (3)) < TRANSLATION_EPSILON ){
#line 371 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (3) = 0.0f;
#line 372 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((vSpeed  (3) - m_vDesiredTranslation  (3)) * m_fZLimitSign  > 0){
#line 373 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
vSpeed  (3) = m_vDesiredTranslation  (3);
#line 374 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 377 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ANGLE3D aSpeed ;
#line 378 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (1) = NormalizeAngle  (aTarget  (1) - aSource  (1));
#line 379 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aSpeed  (1));
#line 380 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (1) = Abs  (aSpeed  (1)) * m_aHLimitSign ;
#line 381 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (1) /= _pTimer  -> TickQuantum ;
#line 382 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (2) = NormalizeAngle  (aTarget  (2) - aSource  (2));
#line 383 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aSpeed  (2));
#line 384 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (2) = Abs  (aSpeed  (2)) * m_aPLimitSign ;
#line 385 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (2) /= _pTimer  -> TickQuantum ;
#line 386 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (3) = NormalizeAngle  (aTarget  (3) - aSource  (3));
#line 387 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aSpeed  (3));
#line 388 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (3) = Abs  (aSpeed  (3)) * m_aBLimitSign ;
#line 389 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (3) /= _pTimer  -> TickQuantum ;
#line 391 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (aSpeed  (1)) < ROTATION_EPSILON ){
#line 392 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (1) = 0.0f;
#line 393 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((aSpeed  (1) - m_aDesiredRotation  (1)) * m_aHLimitSign  > 0){
#line 394 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (1) = m_aDesiredRotation  (1);
#line 395 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 397 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (aSpeed  (2)) < ROTATION_EPSILON ){
#line 398 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (2) = 0.0f;
#line 399 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((aSpeed  (2) - m_aDesiredRotation  (2)) * m_aPLimitSign  > 0){
#line 400 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (2) = m_aDesiredRotation  (2);
#line 401 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 403 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(Abs  (aSpeed  (3)) < ROTATION_EPSILON ){
#line 404 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (3) = 0.0f;
#line 405 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if((aSpeed  (3) - m_aDesiredRotation  (3)) * m_aBLimitSign  > 0){
#line 406 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aSpeed  (3) = m_aDesiredRotation  (3);
#line 407 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 410 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(vSpeed  (1) == 0.0f && vSpeed  (2) == 0.0f && vSpeed  (3) == 0.0f 
#line 411 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
&& ((m_tmBankingRotation  != 0 || m_bNoRotation ) || (aSpeed  (1) == 0.0f && aSpeed  (2) == 0.0f && aSpeed  (3) == 0.0f)))
#line 412 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 414 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ForceFullStop  ();
#line 416 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = FALSE ;
#line 418 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendEvent  (EEnd  ());
#line 421 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else {
#line 422 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (vSpeed );
#line 423 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 424 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 425 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(! m_tmBankingRotation  && ! m_bNoRotation ){
#line 426 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (aSpeed );
#line 427 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else {
#line 428 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0 , 0 , 0));
#line 429 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 430 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 431 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 432 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 433 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 434 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 435 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovableBrushEntity  :: PreMoving  ();
#line 436 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 440 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::LoadMarkerParameters() 
#line 441 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 442 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penTarget  == NULL ){
#line 443 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 444 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 446 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! IsOfClass  (m_penTarget  , & CMovingBrushMarker_DLLClass )){
#line 447 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
WarningMessage  ("Entity '%s' is not of Moving Brush Marker class!" , m_penTarget  -> GetName  ());
#line 448 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 449 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 451 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovingBrushMarker  & mbm  = (CMovingBrushMarker  &) * m_penTarget ;
#line 452 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_penTarget  == NULL ){
#line 453 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 454 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 459 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_fSpeed  >= 0.0f){m_fSpeed  = mbm  . m_fSpeed ;}
#line 463 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_fWaitTime  >= 0.0f){m_fWaitTime  = mbm  . m_fWaitTime ;}
#line 466 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bInverseRotate  = mbm  . m_bInverseRotate ;
#line 469 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetBoolFromBoolEType  (m_bMoveOnTouch  , mbm  . m_betMoveOnTouch );
#line 472 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bStopMoving  = mbm  . m_bStopMoving ;
#line 475 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_fBlockDamage  >= 0.0f){
#line 476 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_fBlockDamage  = mbm  . m_fBlockDamage ;
#line 477 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 480 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_penTouchEvent  != NULL ){
#line 481 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_penTouchEvent  = mbm  . m_penTouchEvent ;
#line 482 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_eetTouchEvent  = mbm  . m_eetTouchEvent ;
#line 483 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 486 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendToTarget  (mbm  . m_penMarkerEvent  , mbm  . m_eetMarkerEvent );
#line 489 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_penSoundStart  != NULL ){
#line 490 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_penSoundStart  = mbm  . m_penSoundStart ;
#line 491 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 492 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_penSoundStop  != NULL ){
#line 493 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_penSoundStop  = mbm  . m_penSoundStop ;
#line 494 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 495 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_penSoundFollow  != NULL ){
#line 496 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_penSoundFollow  = mbm  . m_penSoundFollow ;
#line 497 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 499 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bNoRotation  = mbm  . m_bNoRotation ;
#line 501 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(mbm  . m_tmBankingRotation  >= 0.0f){
#line 502 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_tmBankingRotation  = mbm  . m_tmBankingRotation ;
#line 503 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! mbm  . m_bBankingClockwise ){
#line 504 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_tmBankingRotation  *= - 1;
#line 505 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 506 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 508 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 509 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 513 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BOOL CMovingBrush::CanReactOnEntity(CEntity * pen) 
#line 514 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 515 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(pen  == NULL ){
#line 516 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 517 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 519 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! (pen  -> GetFlags  () & ENF_ALIVE )){
#line 520 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 521 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 523 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bPlayersOnly  && ! IsDerivedFromClass  (pen  , & CPlayer_DLLClass )){
#line 524 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return FALSE ;
#line 525 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 527 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE ;
#line 528 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 531 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::PlayStartSound(void) {
#line 533 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penSoundStart  != NULL ){
#line 534 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CSoundHolder  & sh  = (CSoundHolder  &) * m_penSoundStart ;
#line 535 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soStart  . Set3DParameters  (FLOAT (sh  . m_rFallOffRange ) , FLOAT (sh  . m_rHotSpotRange ) , sh  . m_fVolume  , 1.0f);
#line 536 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlaySound  (m_soStart  , sh  . m_fnSound  , sh  . m_iPlayType );
#line 537 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 538 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 541 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::PlayStopSound(void) {
#line 543 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penSoundStop  != NULL ){
#line 544 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CSoundHolder  & sh  = (CSoundHolder  &) * m_penSoundStop ;
#line 545 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soStop  . Set3DParameters  (FLOAT (sh  . m_rFallOffRange ) , FLOAT (sh  . m_rHotSpotRange ) , sh  . m_fVolume  , 1.0f);
#line 546 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlaySound  (m_soStop  , sh  . m_fnSound  , sh  . m_iPlayType );
#line 547 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 548 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 551 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::PlayFollowSound(void) {
#line 553 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penSoundFollow  != NULL ){
#line 554 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CSoundHolder  & sh  = (CSoundHolder  &) * m_penSoundFollow ;
#line 555 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soFollow  . Set3DParameters  (FLOAT (sh  . m_rFallOffRange ) , FLOAT (sh  . m_rHotSpotRange ) , sh  . m_fVolume  , 1.0f);
#line 556 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlaySound  (m_soFollow  , sh  . m_fnSound  , sh  . m_iPlayType );
#line 557 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 558 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 561 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::StopFollowSound(void) {
#line 562 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soFollow  . Stop  ();
#line 563 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 566 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::MovingOn(void) 
#line 567 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 568 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bMoving ){
#line 569 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return ;
#line 570 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 571 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bVeryBigBrush ){
#line 572 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetCollisionFlags  (ECF_BRUSH  | ECF_IGNOREMODELS );
#line 573 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 574 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoving  = TRUE ;
#line 575 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 576 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::MovingOff(void) 
#line 577 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 578 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving ){
#line 579 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return ;
#line 580 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 581 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bVeryBigBrush ){
#line 582 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetCollisionFlags  (ECF_BRUSH );
#line 583 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 584 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoving  = FALSE ;
#line 585 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 587 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::MaybeActivateRotation(void) 
#line 588 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 589 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_tmBankingRotation  != 0){
#line 590 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bRotating  = TRUE ;
#line 591 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 360.0f / m_tmBankingRotation ));
#line 592 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
en_aCurrentRotationAbsolute  = ANGLE3D (0.0f , 0.0f , 360.0f / m_tmBankingRotation );
#line 593 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 594 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
else {
#line 595 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bRotating  = FALSE ;
#line 596 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 597 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 599 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::DeactivateRotation(void) 
#line 600 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 601 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bRotating  = FALSE ;
#line 602 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 603 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 605 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
void CMovingBrush::SetCombinedRotation(ANGLE3D aRotAngle,ANGLE3D aAddAngle) 
#line 606 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 607 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aRotAngle  (1) += aAddAngle  (1);
#line 608 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aRotAngle  (2) += aAddAngle  (2);
#line 609 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aRotAngle  (3) += aAddAngle  (3);
#line 610 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
  
#line 614 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SLONG CMovingBrush::GetUsedMemory(void) 
#line 615 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 617 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SLONG  slUsedMemory  = sizeof  (CMovingBrush ) - sizeof  (CMovableBrushEntity ) + CMovableBrushEntity  :: GetUsedMemory  ();
#line 619 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
slUsedMemory  += m_strName  . Length  ();
#line 620 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
slUsedMemory  += m_strDescription  . Length  ();
#line 621 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
slUsedMemory  += 3 * sizeof  (CSoundObject);
#line 622 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return slUsedMemory ;
#line 623 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
BOOL CMovingBrush::
#line 630 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MoveToMarker(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovingBrush_MoveToMarker
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovingBrush::MoveToMarker expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 632 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const FLOAT3D & vTarget  = m_penTarget  -> GetPlacement  () . pl_PositionVector ;
#line 633 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const ANGLE3D & aTarget  = m_penTarget  -> GetPlacement  () . pl_OrientationAngle ;
#line 634 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const FLOAT3D & vSource  = GetPlacement  () . pl_PositionVector ;
#line 635 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
const ANGLE3D & aSource  = GetPlacement  () . pl_OrientationAngle ;
#line 638 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_vDesiredTranslation  = (vTarget  - vSource ) / m_fSpeed ;
#line 639 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_fXLimitSign  = Sgn  (vTarget  (1) - vSource  (1));
#line 640 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_fYLimitSign  = Sgn  (vTarget  (2) - vSource  (2));
#line 641 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_fZLimitSign  = Sgn  (vTarget  (3) - vSource  (3));
#line 645 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ANGLE aDelta  = NormalizeAngle  (aTarget  (1) - aSource  (1));
#line 646 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aDelta );
#line 647 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aDesiredRotation  (1) = aDelta  / m_fSpeed ;
#line 648 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aHLimitSign  = Sgn  (aDelta );
#line 650 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aDelta  = NormalizeAngle  (aTarget  (2) - aSource  (2));
#line 651 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aDelta );
#line 652 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aDesiredRotation  (2) = aDelta  / m_fSpeed ;
#line 653 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aPLimitSign  = Sgn  (aDelta );
#line 655 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
aDelta  = NormalizeAngle  (aTarget  (3) - aSource  (3));
#line 656 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
AdjustAngle  (aDelta );
#line 657 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aDesiredRotation  (3) = aDelta  / m_fSpeed ;
#line 658 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_aBLimitSign  = Sgn  (aDelta );
#line 661 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = TRUE ;
#line 662 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (m_vDesiredTranslation );
#line 663 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 664 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 665 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(! m_tmBankingRotation ){
#line 666 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (m_aDesiredRotation );
#line 667 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 670 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x00650006, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x00650006_MoveToMarker_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650006
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EStop):{const EStop&e= (EStop&)__eeInput;

#line 674 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 675 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_tmBankingRotation  == 0){
#line 676 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 677 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 678 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bForceStop  = TRUE ;
#line 680 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = FALSE ;
#line 681 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bStopMoving  = TRUE ;
#line 683 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EEnd  ());
#line 683 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 684 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EBlock):{const EBlock&eBlock= (EBlock&)__eeInput;

#line 691 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_ebaAction  == BA_BOUNCE ){
#line 693 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (- m_vDesiredTranslation );
#line 694 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 695 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 696 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(! m_tmBankingRotation ){
#line 697 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (- m_aDesiredRotation );
#line 698 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 700 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_BounceObstructed, TRUE, EVoid());return TRUE;
#line 701 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(m_ebaAction  == BA_SKIPMARKER ){
#line 703 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ForceFullStop  ();
#line 705 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = FALSE ;
#line 707 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bSkipMarker  = TRUE ;
#line 708 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EEnd  ());
#line 708 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 709 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 710 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 711 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 712 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}return TRUE;}BOOL CMovingBrush::H0x00650007_MoveToMarker_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650007
 ASSERT(FALSE); return TRUE;};BOOL CMovingBrush::
#line 715 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
BounceObstructed(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovingBrush_BounceObstructed
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovingBrush::BounceObstructed expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 716 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetTimerAfter(0.2f);
Jump(STATE_CURRENT, 0x00650009, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x00650009_BounceObstructed_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650009
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x0065000a, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CMovingBrush::H0x0065000a_BounceObstructed_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065000a
;
#line 718 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (m_vDesiredTranslation );
#line 719 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 720 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 360.0f / m_tmBankingRotation ));
#line 721 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(! m_tmBankingRotation ){
#line 722 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (m_aDesiredRotation );
#line 723 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 724 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EVoid());
#line 724 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CMovingBrush::
#line 764 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MoveBrush(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovingBrush_MoveBrush
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovingBrush::MoveBrush expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 766 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penTarget  == NULL ){
#line 767 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOff  ();
#line 768 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EVoid());
#line 768 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 769 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 772 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bStartAtFirstMarker )
#line 773 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 774 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetPlacement  (m_penTarget  -> en_plPlacement );
#line 775 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 778 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOn  ();
#line 781 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Jump(STATE_CURRENT,0x00650014, FALSE, EInternal());return TRUE;}BOOL CMovingBrush::H0x00650014_MoveBrush_09(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650014

#line 783 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bForceStop )
#line 784 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 786 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_penTarget  = m_penTarget  -> GetTarget  ();
#line 787 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 788 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
else {
#line 789 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bForceStop  = FALSE ;
#line 790 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 792 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_penTarget  == NULL ){
#line 793 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOff  ();
#line 794 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EVoid  ());
#line 794 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 795 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 798 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(!(m_bSkipMarker )){ Jump(STATE_CURRENT,0x00650010, FALSE, EInternal());return TRUE;}
#line 799 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bSkipMarker  = FALSE ;Jump(STATE_CURRENT,0x0065000f, FALSE, EInternal());return TRUE;}BOOL CMovingBrush::H0x00650010_MoveBrush_05(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650010
if(!(m_fWaitTime  > 0.0f)){ Jump(STATE_CURRENT,0x0065000e, FALSE, EInternal());return TRUE;}
#line 803 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetTimerAfter(m_fWaitTime );
Jump(STATE_CURRENT, 0x0065000c, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x0065000c_MoveBrush_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065000c
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EStop):{const EStop&e= (EStop&)__eeInput;

#line 807 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (FLOAT3D (0.0f , 0.0f , 0.0f));
#line 808 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_tmBankingRotation  == 0){
#line 809 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (ANGLE3D (0.0f , 0.0f , 0.0f));
#line 810 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 811 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bForceStop  = TRUE ;
#line 813 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = FALSE ;
#line 814 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bStopMoving  = TRUE ;
#line 816 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;
UnsetTimer();Jump(STATE_CURRENT,0x0065000d, FALSE, EInternal());return TRUE;}ASSERT(FALSE);break;default: return FALSE; break;
#line 818 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}return TRUE;}BOOL CMovingBrush::H0x0065000d_MoveBrush_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065000d
Jump(STATE_CURRENT,0x0065000e, FALSE, EInternal());return TRUE;}BOOL CMovingBrush::H0x0065000e_MoveBrush_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065000e
Jump(STATE_CURRENT,0x0065000f, FALSE, EInternal());return TRUE;}
BOOL CMovingBrush::H0x0065000f_MoveBrush_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065000f

#line 821 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(!(! m_bForceStop )){ Jump(STATE_CURRENT,0x00650013, FALSE, EInternal());return TRUE;}
#line 822 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 824 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(_pNetwork  -> IsServer  ()){
#line 825 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendEvent  (EStartSounds  () , TRUE );
#line 826 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayStartSound  ();
#line 827 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayFollowSound  ();
#line 828 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 829 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
STATE_CMovingBrush_MoveToMarker, TRUE;
Jump(STATE_CURRENT, 0x00650011, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x00650011_MoveBrush_06(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650011
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: Call(STATE_CURRENT, STATE_CMovingBrush_MoveToMarker, TRUE, EVoid());return TRUE;case EVENTCODE_EEnd: Jump(STATE_CURRENT,0x00650012, FALSE, __eeInput); return TRUE;default: return FALSE; }}BOOL CMovingBrush::H0x00650012_MoveBrush_07(const CEntityEvent &__eeInput){
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650012
const EEnd&__e= (EEnd&)__eeInput;
;
#line 830 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(_pNetwork  -> IsServer  ()){
#line 831 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendEvent  (EStopSounds  () , TRUE );
#line 832 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
StopFollowSound  ();
#line 833 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
PlayStopSound  ();
#line 834 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}Jump(STATE_CURRENT,0x00650013, FALSE, EInternal());return TRUE;}BOOL CMovingBrush::H0x00650013_MoveBrush_08(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650013

#line 838 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bForceStop ){
#line 839 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bValidMarker  = LoadMarkerParameters  ();
#line 840 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 843 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bSkipMarker ){
#line 844 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bStopMoving  = FALSE ;
#line 845 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}if(!(! m_bStopMoving  && m_bValidMarker  && ! m_bForceStop )){ Jump(STATE_CURRENT,0x00650015, FALSE, EInternal());return TRUE;}Jump(STATE_CURRENT,0x00650014, FALSE, EInternal());return TRUE;
#line 846 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}BOOL CMovingBrush::H0x00650015_MoveBrush_10(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650015

#line 847 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOff  ();
#line 848 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EVoid());
#line 848 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CMovingBrush::
#line 851 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
TeleportToStopMarker(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovingBrush_TeleportToStopMarker
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovingBrush::TeleportToStopMarker expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 853 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOn  ();
#line 855 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
INDEX ctMarkers  = 0;
#line 857 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
CMovingBrushMarker  * pmbm  = (CMovingBrushMarker  *) & * m_penTarget ;
#line 858 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
while(pmbm  != NULL  && IsOfClass  (pmbm  -> m_penTarget  , & CMovingBrushMarker_DLLClass ) 
#line 859 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
&& ! pmbm  -> m_bStopMoving  && ctMarkers  < 50){
#line 860 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
pmbm  = (CMovingBrushMarker  *) & * pmbm  -> m_penTarget ;
#line 861 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ctMarkers  ++;
#line 862 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 864 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(pmbm  != NULL  && IsOfClass  (pmbm  , & CMovingBrushMarker_DLLClass ) && ctMarkers  < 50){
#line 865 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetPlacement  (pmbm  -> GetPlacement  ());
#line 866 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
en_plLastPlacement  = pmbm  -> GetPlacement  ();
#line 867 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ForceFullStop  ();
#line 868 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soStart  . Stop  ();
#line 869 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soStop  . Stop  ();
#line 870 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_soFollow  . Stop  ();
#line 871 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 874 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveToMarker  = FALSE ;
#line 875 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MovingOff  ();
#line 876 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EReturn  ());
#line 876 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CMovingBrush::
#line 879 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovingBrush_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovingBrush::Main expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 881 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
InitAsBrush  ();
#line 882 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetPhysicsFlags  (EPF_BRUSH_MOVING );
#line 883 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetCollisionFlags  (ECF_BRUSH );
#line 884 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetHealth  (m_fHealth );
#line 886 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(fabs  (m_tmBankingRotation ) < 0.01f && ((CEntity  *) m_penTarget ) == NULL ){
#line 887 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetPhysicsFlags  (GetPhysicsFlags  () & (~ EPF_MOVABLE ));
#line 888 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 891 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bZoning ){
#line 892 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () | ENF_ZONING );
#line 893 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else {
#line 894 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () & ~ ENF_ZONING );
#line 895 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 899 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bDynamicShadows ){
#line 900 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () | ENF_DYNAMICSHADOWS );
#line 901 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else {
#line 902 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () & ~ ENF_DYNAMICSHADOWS );
#line 903 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 906 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ForceFullStop  ();
#line 908 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlagOn  (ENF_CLIENTHANDLING );
#line 909 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetTimerAfter(0.1f);
Jump(STATE_CURRENT, 0x00650017, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x00650017_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650017
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x00650018, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CMovingBrush::H0x00650018_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650018
;
#line 910 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlagOff  (ENF_CLIENTHANDLING );
#line 913 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bValidMarker  = LoadMarkerParameters  ();
#line 920 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x00650019, FALSE, EBegin());return TRUE;}BOOL CMovingBrush::H0x00650019_Main_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00650019
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;

#line 922 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bAutoStart ){
#line 924 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 925 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving  && m_bValidMarker ){
#line 926 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_MoveBrush, TRUE, EVoid());return TRUE;
#line 927 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 928 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 929 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 930 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EHit):{const EHit&eHit= (EHit&)__eeInput;

#line 932 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving ){
#line 933 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 934 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_MoveBrush, TRUE, EVoid());return TRUE;
#line 935 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 936 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 937 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&eTouch= (ETouch&)__eeInput;

#line 941 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_fTouchDamage  != 0.0f)
#line 942 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 943 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
InflictDirectDamage  (eTouch  . penOther  , this  , DMT_SPIKESTAB  , m_fTouchDamage  , 
#line 944 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
eTouch  . penOther  -> GetPlacement  () . pl_PositionVector  , eTouch  . plCollision );
#line 945 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 947 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_tdeSendEventOnDamage  != TDE_DAMAGEONLY  && CanReactOnEntity  (eTouch  . penOther )){
#line 948 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendToTarget  (m_penTouchEvent  , m_eetTouchEvent );
#line 949 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 951 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving ){
#line 953 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bMoveOnTouch  && CanReactOnEntity  (eTouch  . penOther ) && m_bValidMarker ){
#line 954 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 955 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_MoveBrush, TRUE, EVoid());return TRUE;
#line 956 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 957 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 959 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bBlowupByBull )
#line 960 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 978 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 979 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 980 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EBlock):{const EBlock&eBlock= (EBlock&)__eeInput;

#line 983 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
InflictDirectDamage  (eBlock  . penOther  , this  , DMT_BRUSH  , m_fBlockDamage  , 
#line 984 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT3D (0.0f , 0.0f , 0.0f) , (FLOAT3D &) eBlock  . plCollision );
#line 985 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_ebaAction  == BA_BOUNCE ){
#line 987 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredTranslation  (- m_vDesiredTranslation );
#line 988 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_bRotating ){
#line 989 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (- ANGLE3D (0.0f , 0.0f , 360.0f / m_tmBankingRotation ));
#line 990 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}else if(! m_tmBankingRotation ){
#line 991 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDesiredRotation  (- m_aDesiredRotation );
#line 992 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 995 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_BounceObstructed, TRUE, EVoid());return TRUE;
#line 996 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 997 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 998 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EStart):{const EStart&e= (EStart&)__eeInput;

#line 1002 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving  && m_bValidMarker ){
#line 1003 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_MoveBrush, TRUE, EVoid());return TRUE;
#line 1004 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1005 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1006 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EStop):{const EStop&e= (EStop&)__eeInput;

#line 1009 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1010 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETeleportMovingBrush):{const ETeleportMovingBrush&e= (ETeleportMovingBrush&)__eeInput;

#line 1012 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_TeleportToStopMarker, TRUE, EVoid());return TRUE;
#line 1013 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1014 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETrigger):{const ETrigger&e= (ETrigger&)__eeInput;

#line 1017 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bMoving  && m_bValidMarker ){
#line 1018 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Call(STATE_CURRENT, STATE_CMovingBrush_MoveBrush, TRUE, EVoid());return TRUE;
#line 1019 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1020 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1021 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EActivate):{const EActivate&e= (EActivate&)__eeInput;

#line 1023 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(! m_bRotating ){
#line 1024 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
MaybeActivateRotation  ();
#line 1025 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1026 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1027 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeactivate):{const EDeactivate&e= (EDeactivate&)__eeInput;

#line 1029 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
DeactivateRotation  ();
#line 1030 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1031 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&eDeath= (EDeath&)__eeInput;

#line 1033 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(_pNetwork  -> IsServer  ()){
#line 1034 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
EBrushDeath  ebd ;
#line 1035 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ebd  . eidInflictor  = eDeath  . eLastDamage  . penInflictor ;
#line 1036 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendEvent  (ebd  , TRUE );
#line 1037 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1038 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE;
#line 1039 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;case(EVENTCODE_EBrushDeath):{const EBrushDeath&ebd= (EBrushDeath&)__eeInput;

#line 1042 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOATaabbox3D box ;
#line 1043 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
GetSize  (box );
#line 1044 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
if(m_ctDebrises  > 0)
#line 1045 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{
#line 1046 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT fEntitySize  = pow  (box  . Size  () (1) * box  . Size  () (2) * box  . Size  () (3) / m_ctDebrises  , 1.0f / 3.0f) * m_fCubeFactor ;
#line 1048 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Debris_Begin  (EIBT_ROCK  , DPT_NONE  , BET_NONE  , fEntitySize  , FLOAT3D (1.0f , 2.0f , 3.0f) , 
#line 1049 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT3D (0 , 0 , 0) , 1.0f + m_fCandyEffect  / 2.0f , m_fCandyEffect  , m_colDebrises  , m_bCollision  , m_bFade );
#line 1050 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
for(INDEX iDebris  = 0;iDebris  < m_ctDebrises ;iDebris  ++){
#line 1051 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Debris_Spawn  (this  , this  , MODEL_STONE  , TEXTURE_STONE  , 0 , 0 , 0 , IRnd  () % 4 , 1.0f , 
#line 1052 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FLOAT3D (FRnd  () * 0.8f + 0.1f , FRnd  () * 0.8f + 0.1f , FRnd  () * 0.8f + 0.1f));
#line 1053 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1054 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1057 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
FOREACHINLIST  (CEntity  , en_lnInParent  , en_lhChildren  , iten ){
#line 1058 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
iten  -> SendEvent  (EBrushDestroyed  ());
#line 1059 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}
#line 1061 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SendToTarget  (m_penBlowupEvent  , m_eetBlowupEvent  , ebd  . eidInflictor );
#line 1064 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_tdeSendEventOnDamage  = TDE_TOUCHONLY ;
#line 1065 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_fHealth  = - 1;
#line 1066 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
m_bMoveOnDamage  = FALSE ;
#line 1067 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
ForceFullStop  ();
#line 1068 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetDefaultProperties  ();
#line 1072 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
NotifyCollisionChanged  ();
#line 1074 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetFlags  (GetFlags  () | ENF_HIDDEN );
#line 1075 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 1078 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
{FOREACHINLIST  (CEntity  , en_lnInParent  , en_lhChildren  , itenChild ){
#line 1080 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
itenChild  -> SendEvent  (ERangeModelDestruction  () , TRUE );
#line 1081 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}}
#line 1083 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
UnsetTimer();Jump(STATE_CURRENT,0x0065001a, FALSE, EInternal());return TRUE;
#line 1084 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 1085 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
}return TRUE;}BOOL CMovingBrush::H0x0065001a_Main_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x0065001a

#line 1086 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
Return(STATE_CURRENT,EVoid());
#line 1086 "E:/질산/Korea/Client_USA/EntitiesMP/MovingBrush.es"
return TRUE; ASSERT(FALSE); return TRUE;};