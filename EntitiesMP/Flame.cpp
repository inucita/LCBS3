/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"

#include "StdH.h"
#define TM_APPLY_DAMAGE_QUANTUM 0.25f
#define TM_APPLY_WHOLE_DAMAGE 7.5f
#define DAMAGE_AMMOUNT 30.0f
#define MIN_DAMAGE_QUANTUM (DAMAGE_AMMOUNT/TM_APPLY_WHOLE_DAMAGE*TM_APPLY_DAMAGE_QUANTUM)
#define MAX_DAMAGE_QUANTUM (MIN_DAMAGE_QUANTUM*10.0f)
#define DEATH_BURN_TIME 4.0f

#include "EntitiesMP/MovingBrush.h"
//#include "EntitiesMP/Santa.h"
#include "EntitiesMP/Player.h"

#include <EntitiesMP/Flame.h>
#include <EntitiesMP/Flame_tables.h>
CEntityEvent *EFlame::MakeCopy(void) { CEntityEvent *peeCopy = new EFlame(*this); return peeCopy;}
SLONG EFlame::GetSizeOf(void) { return sizeof(*this);}
EFlame::EFlame() : CEntityEvent(EVENTCODE_EFlame) {;
 ClearToDefault(eidOwner);
 ClearToDefault(eidAttach);
};
BOOL EFlame::CheckIDs(void) { return TRUE && eidOwner.IsValid()&& eidAttach.IsValid(); }
CEntityEvent *EStopFlaming::MakeCopy(void) { CEntityEvent *peeCopy = new EStopFlaming(*this); return peeCopy;}
SLONG EStopFlaming::GetSizeOf(void) { return sizeof(*this);}
EStopFlaming::EStopFlaming() : CEntityEvent(EVENTCODE_EStopFlaming) {;
 ClearToDefault(m_bNow);
};
BOOL EStopFlaming::CheckIDs(void) { return TRUE ; }
#line 29 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"

void CFlame_OnPrecache(CDLLEntityClass *pdec, INDEX iUser) 
{
  pdec->PrecacheModel(MODEL_FLAME);
  pdec->PrecacheTexture(TEXTURE_FLAME);
  pdec->PrecacheSound(SOUND_FLAME);
}

extern ULONG _ulPlayerRenderingMask;

void CFlame::SetDefaultProperties(void) {
  m_penOwner = NULL;
  m_penAttach = NULL;
  m_bLoop = FALSE ;
  m_vHitPoint = FLOAT3D(0.0f , 0.0f , 0.0f);
  m_soEffect.SetOwner(this);
m_soEffect.Stop(FALSE);
  m_tmStart = 0.0f;
  m_fDamageToApply = 0.0f;
  m_fDamageStep = 0.0f;
  m_fAppliedDamage = 0.0f;
  m_tmFirstStart = 0.0f;
  m_ctFlames = 0;
  m_vPos01 = FLOAT3D(0 , 0 , 0);
  m_vPos02 = FLOAT3D(0 , 0 , 0);
  m_vPos03 = FLOAT3D(0 , 0 , 0);
  m_vPos04 = FLOAT3D(0 , 0 , 0);
  m_vPos05 = FLOAT3D(0 , 0 , 0);
  m_vPos06 = FLOAT3D(0 , 0 , 0);
  m_vPos07 = FLOAT3D(0 , 0 , 0);
  m_vPos08 = FLOAT3D(0 , 0 , 0);
  m_vPos09 = FLOAT3D(0 , 0 , 0);
  m_vPos10 = FLOAT3D(0 , 0 , 0);
  m_vPlaneNormal = FLOAT3D(0 , 0 , 0);
  m_bBurningBrush = FALSE ;
  m_tmDeathParticlesStart = 1e6;
  m_penPrediction = NULL;
  CMovableModelEntity::SetDefaultProperties();
}
  
#line 90 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
void CFlame::PostMoving(void) {
#line 91 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CMovableModelEntity  :: PostMoving  ();
#line 94 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CContentType  & ctDn  = GetWorld  () -> wo_actContentTypes  [ en_iDnContent  ];
#line 96 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(! (ctDn  . ct_ulFlags  & CTF_BREATHABLE_LUNGS )){
#line 97 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
EStopFlaming  esf ;
#line 98 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
esf  . m_bNow  = TRUE ;
#line 99 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SendEvent  (esf );
#line 100 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 103 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
en_ulFlags  &= ~ ENF_INRENDERING ;
#line 105 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
en_plLastPlacement  = en_plPlacement ;
#line 106 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
  
#line 109 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
void CFlame::Read_t(CTStream * istr,BOOL bNetwork) 
#line 110 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 111 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CMovableModelEntity  :: Read_t  (istr  , bNetwork );
#line 112 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetupLightSource  ();
#line 113 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
  
#line 115 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
BOOL CFlame::IsPointInsidePolygon(const FLOAT3D & vPos,CBrushPolygon * pbpo) 
#line 116 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 117 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOATplane3D & plPlane  = pbpo  -> bpo_pbplPlane  -> bpl_plAbsolute ;
#line 119 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
INDEX iMajorAxis1  , iMajorAxis2 ;
#line 120 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
GetMajorAxesForPlane  (plPlane  , iMajorAxis1  , iMajorAxis2 );
#line 123 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CIntersector  isIntersector  (vPos  (iMajorAxis1 ) , vPos  (iMajorAxis2 ));
#line 125 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FOREACHINSTATICARRAY  (pbpo  -> bpo_abpePolygonEdges  , CBrushPolygonEdge  , itbpePolygonEdge ){
#line 127 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
const FLOAT3D & vVertex0  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex0  -> bvx_vAbsolute ;
#line 128 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
const FLOAT3D & vVertex1  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex1  -> bvx_vAbsolute ;
#line 130 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
isIntersector  . AddEdge  (
#line 131 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vVertex0  (iMajorAxis1 ) , vVertex0  (iMajorAxis2 ) , 
#line 132 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vVertex1  (iMajorAxis1 ) , vVertex1  (iMajorAxis2 ));
#line 133 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 135 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return isIntersector  . IsIntersecting  ();
#line 136 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
  
#line 139 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CLightSource * CFlame::GetLightSource(void) 
#line 140 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 141 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return & m_lsLightSource ;
#line 142 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
  
#line 145 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
void CFlame::RenderParticles(void) 
#line 146 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 147 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CEntity  * penParent  = GetParent  ();
#line 149 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(IsOfClass  (penParent  , & CPlayer_DLLClass )){
#line 150 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
INDEX iPlayer  = ((CPlayerEntity  *) penParent ) -> GetMyPlayerIndex  ();
#line 151 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(_ulPlayerRenderingMask  & (1 << iPlayer )){
#line 152 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return ;
#line 153 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 154 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 156 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fTimeFactor  = CalculateRatio  (_pTimer  -> CurrentTick  () , m_tmFirstStart  , m_tmStart  + TM_APPLY_WHOLE_DAMAGE  , 0.05f , 0.2f);
#line 157 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fDeathFactor  = 1.0f;
#line 158 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(_pTimer  -> CurrentTick  () > m_tmDeathParticlesStart )
#line 159 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 160 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
fDeathFactor  = 1.0f - Clamp  ((_pTimer  -> CurrentTick  () - m_tmDeathParticlesStart ) / DEATH_BURN_TIME  , 0.0f , 1.0f);
#line 161 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 163 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fPower  = ClampUp  (m_fDamageStep  - MIN_DAMAGE_QUANTUM  , MAX_DAMAGE_QUANTUM ) / MAX_DAMAGE_QUANTUM ;
#line 164 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(penParent  != NULL ){
#line 166 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(penParent  -> en_RenderType  == CEntity  :: RT_EDITORMODEL  || penParent  -> en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ){
#line 167 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return ;
#line 168 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}else {
#line 170 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(penParent  -> en_RenderType  == CEntity  :: RT_MODEL  || penParent  -> en_RenderType  == CEntity  :: RT_SKAMODEL ){
#line 172 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Particles_Burning  (penParent  , fPower  , fTimeFactor  * fDeathFactor );
#line 174 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}else {
#line 176 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Particles_BrushBurning  (this  , & m_vPos01  , m_ctFlames  , m_vPlaneNormal  , fPower  , fTimeFactor  * fDeathFactor );
#line 177 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 178 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 179 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 180 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
  
#line 183 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
void CFlame::SetupLightSource(void) 
#line 184 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 186 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CLightSource  lsNew ;
#line 187 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_ulFlags  = LSF_NONPERSISTENT  | LSF_DYNAMIC ;
#line 188 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(m_bBurningBrush )
#line 189 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 190 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UBYTE  ubRndH  = UBYTE  (25 + (FLOAT (rand  ()) / RAND_MAX  - 0.5f) * 28);
#line 191 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UBYTE  ubRndS  = 166;
#line 192 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UBYTE  ubRndV  = 48;
#line 193 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_colColor  = HSVToColor  (ubRndH  , ubRndS  , ubRndV );
#line 195 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_rFallOff  = 4.0f;
#line 196 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_rHotSpot  = 0.2f;
#line 197 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 198 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
else 
#line 199 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 200 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_colColor  = 0x8F8F5000;
#line 201 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_rFallOff  = 6.0f;
#line 202 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_rHotSpot  = 0.50f;
#line 203 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 204 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_plftLensFlare  = NULL ;
#line 205 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_ubPolygonalMask  = 0;
#line 206 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
lsNew  . ls_paoLightAnimation  = NULL ;
#line 208 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_lsLightSource  . ls_penEntity  = this ;
#line 209 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_lsLightSource  . SetLightSource  (lsNew );
#line 210 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
BOOL CFlame::
#line 217 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CFlame_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EFlame, "CFlame::Main expects 'EFlame' as input!");  const EFlame &ef = (const EFlame &)__eeInput;
#line 219 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
InitAsVoid  ();
#line 220 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Return(STATE_CURRENT,EVoid());
#line 220 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return TRUE;
#line 224 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
ASSERT  (((CEntity  *) ef  . eidOwner ) != NULL );
#line 225 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
ASSERT  (((CEntity  *) ef  . eidAttach ) != NULL );
#line 226 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_penOwner  = ef  . eidOwner ;
#line 227 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_penAttach  = ef  . eidAttach ;
#line 237 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetFlagOn  (ENF_CLIENTHANDLING );
#line 239 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_tmStart  = _pTimer  -> CurrentTick  ();
#line 240 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_tmFirstStart  = m_tmStart ;
#line 241 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetParent  (ef  . eidAttach );
#line 243 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
InitAsModel  ();
#line 244 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetPhysicsFlags  (EPF_MODEL_FLYING );
#line 245 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetCollisionFlags  (ECF_FLAME );
#line 246 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetFlags  (GetFlags  () | ENF_SEETHROUGH );
#line 248 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetModel  (MODEL_FLAME );
#line 249 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetModelMainTexture  (TEXTURE_FLAME );
#line 250 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
ModelChangeNotify  ();
#line 253 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_soEffect  . Set3DParameters  (20.0f , 2.0f , 0.7f , 1.0f);
#line 254 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
PlaySound  (m_soEffect  , SOUND_FLAME  , SOF_3D  | SOF_LOOP );
#line 257 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
AddToMovers  ();
#line 259 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bBurningBrush  = FALSE ;
#line 260 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
BOOL bAllowFlame  = TRUE ;
#line 261 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(! (((CEntity  *) ef  . eidAttach ) -> en_RenderType  == CEntity  :: RT_MODEL  || ((CEntity  *) ef  . eidAttach ) -> en_RenderType  == CEntity  :: RT_EDITORMODEL  || 
#line 262 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
((CEntity  *) ef  . eidAttach ) -> en_RenderType  == CEntity  :: RT_SKAMODEL  || ((CEntity  *) ef  . eidAttach ) -> en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ))
#line 263 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 264 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bBurningBrush  = TRUE ;
#line 265 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vPos  = GetPlacement  () . pl_PositionVector ;
#line 266 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOATplane3D plPlane ;
#line 267 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fDistanceToEdge ;
#line 268 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FindSectorsAroundEntity  ();
#line 269 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
CBrushPolygon  * pbpo  = NULL ;
#line 270 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
pbpo  = GetNearestPolygon  (vPos  , plPlane  , fDistanceToEdge );
#line 271 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vBrushPos  = ((CEntity  *) ef  . eidAttach ) -> GetPlacement  () . pl_PositionVector ;
#line 272 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOATmatrix3D mBrushRotInv  = ! ((CEntity  *) ef  . eidAttach ) -> GetRotationMatrix  ();
#line 273 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(pbpo  != NULL  && pbpo  -> bpo_pbscSector  -> bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity  == ef  . eidAttach )
#line 274 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 275 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
plPlane  = pbpo  -> bpo_pbplPlane  -> bpl_plAbsolute ;
#line 276 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_vPlaneNormal  = (FLOAT3D &) plPlane ;
#line 277 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_vPlaneNormal  . Normalize  ();
#line 279 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vU  , vV ;
#line 281 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(plPlane  (2) < - 0.1f)
#line 282 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 283 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
bAllowFlame  = FALSE ;
#line 284 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 287 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(Abs  (plPlane  (2)) > 0.5){
#line 289 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vU  = FLOAT3D (1.0f , 0.0f , 0.0f) * m_vPlaneNormal ;
#line 291 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}else {
#line 293 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vU  = FLOAT3D (0.0f , 1.0f , 0.0f) * m_vPlaneNormal ;
#line 294 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 296 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vU  . Normalize  ();
#line 298 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vV  = vU  * m_vPlaneNormal ;
#line 299 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vV  . Normalize  ();
#line 302 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_ctFlames  = 0;
#line 303 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
for(INDEX iTest  = 0;iTest  < 20;iTest  ++)
#line 304 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 305 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fA  = FRnd  () * 360.0f;
#line 306 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fR  = FRnd  () * 2.0f;
#line 307 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vRndV  = vV  * fR  * SinFast  (fA );
#line 308 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vRndU  = vU  * fR  * CosFast  (fA );
#line 309 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vRndPos  = vPos ;
#line 310 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(iTest  != 0)
#line 311 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 312 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
vRndPos  += vRndV  + vRndU ;
#line 313 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 315 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT3D vProjectedRndPos  = plPlane  . ProjectPoint  (vRndPos );
#line 316 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(IsPointInsidePolygon  (vProjectedRndPos  , pbpo ))
#line 317 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 318 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
(& m_vPos01 ) [ m_ctFlames  ] = (vProjectedRndPos  - vBrushPos ) * mBrushRotInv ;
#line 319 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_ctFlames  ++;
#line 320 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(m_ctFlames  == 6){break ;};
#line 321 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 322 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 323 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 324 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
else 
#line 325 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 326 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
bAllowFlame  = FALSE ;
#line 327 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 328 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 330 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(bAllowFlame )
#line 331 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 332 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetupLightSource  ();
#line 333 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 335 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bLoop  = bAllowFlame ;
#line 336 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Jump(STATE_CURRENT,0x01f80004, FALSE, EInternal());return TRUE;}BOOL CFlame::H0x01f80004_Main_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f80004
if(!(m_bLoop )){ Jump(STATE_CURRENT,0x01f80005, FALSE, EInternal());return TRUE;}
#line 337 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
SetTimerAfter(TM_APPLY_DAMAGE_QUANTUM );
Jump(STATE_CURRENT, 0x01f80002, FALSE, EBegin());return TRUE;}BOOL CFlame::H0x01f80002_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f80002
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;

#line 341 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(m_penAttach  == NULL  || (m_penAttach  -> GetFlags  () & ENF_DELETED )){
#line 343 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bLoop  = FALSE ;
#line 344 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f80003, FALSE, EInternal());return TRUE;
#line 345 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 347 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
const FLOAT fDamageMul  = GetSeriousDamageMultiplier  (m_penOwner );
#line 348 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fDamageToApply  = fDamageMul  * (m_fDamageToApply  / TM_APPLY_WHOLE_DAMAGE  * TM_APPLY_DAMAGE_QUANTUM ) * m_fDamageStep ;
#line 349 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_penAttach  -> InflictDirectDamage  (m_penAttach  , m_penOwner  , DMT_BURNING  , fDamageToApply  , 
#line 350 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
GetPlacement  () . pl_PositionVector  , - en_vGravityDir );
#line 351 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_fAppliedDamage  += fDamageToApply ;
#line 352 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return TRUE;
#line 353 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}ASSERT(FALSE);break;case(EVENTCODE_EFlame):{const EFlame&ef= (EFlame&)__eeInput;

#line 355 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_penOwner  = ef  . eidOwner ;
#line 356 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fTimeLeft  = m_tmStart  + TM_APPLY_WHOLE_DAMAGE  - _pTimer  -> CurrentTick  ();
#line 357 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
FLOAT fDamageLeft  = (fTimeLeft  / TM_APPLY_DAMAGE_QUANTUM ) * m_fDamageStep ;
#line 358 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_fDamageToApply  = ClampUp  (fDamageLeft  + DAMAGE_AMMOUNT  , 80.0f);
#line 359 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_tmStart  = _pTimer  -> CurrentTick  ();
#line 360 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_fDamageStep  = m_fDamageToApply  / (TM_APPLY_WHOLE_DAMAGE  / TM_APPLY_DAMAGE_QUANTUM );
#line 361 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return TRUE;
#line 362 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}ASSERT(FALSE);break;case(EVENTCODE_EStopFlaming):{const EStopFlaming&esf= (EStopFlaming&)__eeInput;

#line 364 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(! esf  . m_bNow )
#line 365 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 366 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_tmDeathParticlesStart  = _pTimer  -> CurrentTick  ();
#line 367 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return TRUE;
#line 368 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 369 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
else 
#line 370 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 371 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bLoop  = FALSE ;
#line 372 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f80003, FALSE, EInternal());return TRUE;
#line 373 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}
#line 374 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}ASSERT(FALSE);break;case(EVENTCODE_EBrushDestroyed):{const EBrushDestroyed&e= (EBrushDestroyed&)__eeInput;

#line 376 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bLoop  = FALSE ;
#line 377 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f80003, FALSE, EInternal());return TRUE;
#line 378 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;
UnsetTimer();Jump(STATE_CURRENT,0x01f80003, FALSE, EInternal());return TRUE;}ASSERT(FALSE);break;default: return FALSE; break;
#line 380 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}return TRUE;}BOOL CFlame::H0x01f80003_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f80003

#line 381 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
if(_pTimer  -> CurrentTick  () > m_tmStart  + TM_APPLY_WHOLE_DAMAGE )
#line 382 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
{
#line 383 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
m_bLoop  = FALSE ;
#line 384 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}Jump(STATE_CURRENT,0x01f80004, FALSE, EInternal());return TRUE;
#line 385 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
}BOOL CFlame::H0x01f80005_Main_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f80005

#line 388 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Destroy  (FALSE );
#line 389 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
Return(STATE_CURRENT,EVoid());
#line 389 "E:/질산/Korea/Client_USA/EntitiesMP/Flame.es"
return TRUE; ASSERT(FALSE); return TRUE;};