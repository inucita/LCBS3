/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"

#include "StdH.h"

//#include "Models/Weapons/Laser/Projectile/LaserProjectile.h"
#include "EntitiesMP/EnemyBase.h"
//#include "EntitiesMP/Dragonman.h"
#include "Models/Enemies/Elementals/Projectile/IcePyramid.h"
//#include "Models/Enemies/ElementalLava/Projectile/LavaStone.h"
//#include "Models/Enemies/ElementalLava/Projectile/LavaBomb.h"
//#include "Models/Enemies/Headman/Projectile/Blade.h"
#include "Models/Enemies/Huanman/Projectile/Projectile.h"
//#include "Models/Enemies/Cyborg/Projectile/LaserProjectile.h"
	
//#include "ModelsMP/Enemies/Grunt/Projectile/GruntProjectile.h"
//#include "ModelsMP/Enemies/Guffy/Projectile/GuffyProjectile.h"

//#include "ModelsMP/Enemies/ExotechLarva/Weapons/PlasmaGun.h"

#include "EntitiesMP/EnemyBase.h"
#include "EntitiesMP/PlayerWeapons.h"
//#include "EntitiesMP/Shooter.h"
#include "EntitiesMP/MovingBrush.h"
#include "EntitiesMP/Projectile.h"
//#include "EntitiesMP/Demon.h"
//#include "EntitiesMP/AirElemental.h"
//#include "EntitiesMP/Twister.h"

//#define DEVIL_LASER_SPEED 100.0f
//#define DEVIL_ROCKET_SPEED 60.0f

#include <EntitiesMP/Projectile.h>
#include <EntitiesMP/Projectile_tables.h>
CEntityEvent *ELaunchProjectile::MakeCopy(void) { CEntityEvent *peeCopy = new ELaunchProjectile(*this); return peeCopy;}
SLONG ELaunchProjectile::GetSizeOf(void) { return sizeof(*this);}
ELaunchProjectile::ELaunchProjectile() : CEntityEvent(EVENTCODE_ELaunchProjectile) {;
 ClearToDefault(eidLauncher);
 ClearToDefault(prtType);
 ClearToDefault(fSpeed);
 ClearToDefault(fStretch);
};
BOOL ELaunchProjectile::CheckIDs(void) { return TRUE && eidLauncher.IsValid(); }
CEntityEvent *EExplode::MakeCopy(void) { CEntityEvent *peeCopy = new EExplode(*this); return peeCopy;}
SLONG EExplode::GetSizeOf(void) { return sizeof(*this);}
EExplode::EExplode() : CEntityEvent(EVENTCODE_EExplode) {;
 ClearToDefault(vPosition);
};
BOOL EExplode::CheckIDs(void) { return TRUE ; }
CEntityEvent *ESpawnFlame::MakeCopy(void) { CEntityEvent *peeCopy = new ESpawnFlame(*this); return peeCopy;}
SLONG ESpawnFlame::GetSizeOf(void) { return sizeof(*this);}
ESpawnFlame::ESpawnFlame() : CEntityEvent(EVENTCODE_ESpawnFlame) {;
 ClearToDefault(eidLauncher);
 ClearToDefault(eidAttach);
 ClearToDefault(vPos);
};
BOOL ESpawnFlame::CheckIDs(void) { return TRUE && eidLauncher.IsValid()&& eidAttach.IsValid(); }
#line 127 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"

//#define DRAGONMAN_NORMAL 0
//#define DRAGONMAN_STRONG 1

#define ELEMENTAL_LARGE   2
#define ELEMENTAL_BIG     1
#define ELEMENTAL_NORMAL  0

//#define ELEMENTAL_STONEMAN 0
//#define ELEMENTAL_LAVAMAN  1
//#define ELEMENTAL_ICEMAN   2


void CProjectile_PrecacheForPlayer()
{
	CDLLEntityClass *pdec = &CProjectile_DLLClass;

	/*
	// rocket launcher
	pdec->PrecacheModel(MODEL_ROCKET  );
	pdec->PrecacheTexture(TEXTURE_ROCKET);
	pdec->PrecacheSound(SOUND_FLYING  );
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_ROCKET);
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_EXPLOSIONSTAIN);
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_ROCKET_PLANE);

	// grenade launcher
	pdec->PrecacheModel(MODEL_GRENADE);
	pdec->PrecacheTexture(TEXTURE_GRENADE);
	pdec->PrecacheSound(SOUND_GRENADE_BOUNCE);
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE);
	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE_PLANE);
	*/

	// flamer
	pdec->PrecacheModel(MODEL_FLAME);
	pdec->PrecacheClass(CLASS_FLAME);

	// laser
//	pdec->PrecacheModel(MODEL_LASER                   );
//	pdec->PrecacheTexture(TEXTURE_GREEN_LASER         );    
//	pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LASERWAVE);
}

void CProjectile_OnInitClass(void)
{
}

void CProjectile_OnPrecache(CDLLEntityClass *pdec, INDEX iUser) 
{
	pdec->PrecacheTexture(TEX_REFL_BWRIPLES01);
	pdec->PrecacheTexture(TEX_REFL_BWRIPLES02);
	pdec->PrecacheTexture(TEX_REFL_LIGHTMETAL01);
	pdec->PrecacheTexture(TEX_REFL_LIGHTBLUEMETAL01);
	pdec->PrecacheTexture(TEX_REFL_DARKMETAL);
	pdec->PrecacheTexture(TEX_REFL_PURPLE01);

	pdec->PrecacheTexture(TEX_SPEC_WEAK);
	pdec->PrecacheTexture(TEX_SPEC_MEDIUM);
	pdec->PrecacheTexture(TEX_SPEC_STRONG);

	switch ((ProjectileType)iUser) {
	//case PRT_ROCKET                :
	//case PRT_WALKER_ROCKET         :
		/*
	case PRT_DEVIL_ROCKET          :
		pdec->PrecacheModel(MODEL_ROCKET  );
		pdec->PrecacheTexture(TEXTURE_ROCKET);
		pdec->PrecacheSound(SOUND_FLYING  );
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_ROCKET);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_EXPLOSIONSTAIN);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_ROCKET_PLANE);
		break;
	case PRT_GRENADE:
		pdec->PrecacheModel(MODEL_GRENADE);
		pdec->PrecacheTexture(TEXTURE_GRENADE);
		pdec->PrecacheSound(SOUND_GRENADE_BOUNCE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_EXPLOSIONSTAIN);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE_PLANE);
		break;
		*/
	
	case PRT_FLAME:
		pdec->PrecacheModel(MODEL_FLAME);
		pdec->PrecacheClass(CLASS_FLAME);
		break;

		/*
	case PRT_LASER_RAY:
		pdec->PrecacheModel(MODEL_LASER                   );
		pdec->PrecacheTexture(TEXTURE_GREEN_LASER         );
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LASERWAVE);
		break;

	case PRT_GRUNT_PROJECTILE_SOL:
		pdec->PrecacheModel(MODEL_GRUNT_PROJECTILE           );
		pdec->PrecacheTexture(TEXTURE_GRUNT_PROJECTILE_01    );
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LASERWAVE);
		break;

	case PRT_GRUNT_PROJECTILE_COM:
		pdec->PrecacheModel(MODEL_GRUNT_PROJECTILE           );
		pdec->PrecacheTexture(TEXTURE_GRUNT_PROJECTILE_02    );
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LASERWAVE);
		break;

	case PRT_CATMAN_FIRE:
		pdec->PrecacheModel(MODEL_CATMAN_FIRE             );
		pdec->PrecacheTexture(TEXTURE_CATMAN_FIRE         );
		break;

	case PRT_HEADMAN_FIRECRACKER:
		pdec->PrecacheModel(MODEL_HEADMAN_FIRECRACKER     );
		pdec->PrecacheTexture(TEXTURE_HEADMAN_FIRECRACKER );
		break;
	case PRT_HEADMAN_ROCKETMAN:
		pdec->PrecacheModel(MODEL_HEADMAN_BLADE           );
		pdec->PrecacheTexture(TEXTURE_HEADMAN_BLADE       );
		pdec->PrecacheModel(MODEL_HEADMAN_BLADE_FLAME     );
		pdec->PrecacheTexture(TEXTURE_HEADMAN_BLADE_FLAME );
		break;
	case PRT_HEADMAN_BOMBERMAN:
		pdec->PrecacheModel(MODEL_HEADMAN_BOMB         );
		pdec->PrecacheTexture(TEXTURE_HEADMAN_BOMB     );  
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BOMB);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_EXPLOSIONSTAIN);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE_PLANE);
		break;

	case PRT_BONEMAN_FIRE:
		pdec->PrecacheModel(MODEL_BONEMAN_FIRE         );
		pdec->PrecacheTexture(TEXTURE_BONEMAN_FIRE     );
		break;

	case PRT_WOMAN_FIRE:
		pdec->PrecacheModel(MODEL_WOMAN_FIRE           );
		pdec->PrecacheTexture(TEXTURE_WOMAN_FIRE       );
		break;

	case PRT_DRAGONMAN_FIRE:
	case PRT_DRAGONMAN_STRONG_FIRE:
		pdec->PrecacheModel(MODEL_DRAGONMAN_FIRE       );
		pdec->PrecacheTexture(TEXTURE_DRAGONMAN_FIRE1  );
		pdec->PrecacheTexture(TEXTURE_DRAGONMAN_FIRE2  );
		break;

	case PRT_STONEMAN_FIRE:
	case PRT_STONEMAN_BIG_FIRE:
	case PRT_STONEMAN_LARGE_FIRE:
		pdec->PrecacheModel(MODEL_ELEM_STONE           );
		pdec->PrecacheTexture(TEXTURE_ELEM_STONE       ); 
		break;
	
	case PRT_LAVAMAN_BIG_BOMB:
	case PRT_LAVAMAN_BOMB:
	case PRT_LAVAMAN_STONE:
		pdec->PrecacheModel(MODEL_ELEM_LAVA_STONE);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_STONE_FLARE);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_BOMB);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_BOMB_FLARE);
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_STONE); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_STONE_FLARE ); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_BOMB); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_BOMB_FLARE); 
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
		pdec->PrecacheClass(CLASS_BLOOD_SPRAY);
		break;
		*/
		/*
	case PRT_METEOR:
		pdec->PrecacheSound(SOUND_FLYING  );
		pdec->PrecacheSound(SOUND_METEOR_BLAST  );
		pdec->PrecacheModel(MODEL_ELEM_LAVA_BOMB);
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_BOMB); 
		pdec->PrecacheClass(CLASS_BLOOD_SPRAY);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_CANNON);

		break;
		*/

	case PRT_ICEMAN_FIRE:
	case PRT_ICEMAN_BIG_FIRE:
	case PRT_ICEMAN_LARGE_FIRE:
		pdec->PrecacheModel(MODEL_ELEM_ICE          );  
		pdec->PrecacheModel(MODEL_ELEM_ICE_FLARE    );  
		pdec->PrecacheTexture(TEXTURE_ELEM_ICE      );    
	//pdec->PrecacheTexture(TEXTURE_ELEM_ICE_FLARE);    
		break;

	case PRT_HUANMAN_FIRE:
		pdec->PrecacheModel(MODEL_HUANMAN_FIRE      );
		pdec->PrecacheTexture(TEXTURE_HUANMAN_FIRE  );
		pdec->PrecacheModel(MODEL_HUANMAN_FLARE     );
		pdec->PrecacheTexture(TEXTURE_HUANMAN_FLARE );
		break;

		/*
	case PRT_FISHMAN_FIRE:
		pdec->PrecacheModel(MODEL_FISHMAN_FIRE      );
		pdec->PrecacheTexture(TEXTURE_FISHMAN_FIRE  );
		break;

	case PRT_MANTAMAN_FIRE:
		pdec->PrecacheModel(MODEL_MANTAMAN_FIRE     );
		pdec->PrecacheTexture(TEXTURE_MANTAMAN_FIRE );
		break;

	//case PRT_DEVIL_LASER:         
		pdec->PrecacheModel(MODEL_DEVIL_LASER      );
		pdec->PrecacheTexture(TEXTURE_DEVIL_LASER  ); 
		break;

	//case PRT_CYBORG_LASER:         
	case PRT_CYBORG_BOMB:
		//pdec->PrecacheModel(MODEL_CYBORG_LASER      );
		//pdec->PrecacheTexture(TEXTURE_CYBORG_LASER  ); 
		pdec->PrecacheModel(MODEL_CYBORG_BOMB       );
		pdec->PrecacheTexture(TEXTURE_CYBORG_BOMB   ); 
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_BOMB);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_EXPLOSIONSTAIN);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_GRENADE_PLANE);
		break;

	case PRT_LAVA_COMET:
		pdec->PrecacheModel(MODEL_ELEM_LAVA_STONE);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_STONE_FLARE);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_BOMB);
		pdec->PrecacheModel(MODEL_ELEM_LAVA_BOMB_FLARE);
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_STONE); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_STONE_FLARE ); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_BOMB); 
		pdec->PrecacheTexture(TEXTURE_ELEM_LAVA_BOMB_FLARE); 
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
		pdec->PrecacheClass(CLASS_BLOOD_SPRAY);
		pdec->PrecacheModel(MODEL_LAVA          );
		pdec->PrecacheTexture(TEXTURE_LAVA      );
		pdec->PrecacheModel(MODEL_LAVA_FLARE    );
		pdec->PrecacheTexture(TEXTURE_LAVA_FLARE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_SHOCKWAVE);
		pdec->PrecacheClass(CLASS_BLOOD_SPRAY);
		break;
		*/
		/*
	case PRT_BEAST_PROJECTILE:
	case PRT_BEAST_DEBRIS:
		pdec->PrecacheSound(SOUND_BEAST_FLYING  );
		pdec->PrecacheModel(MODEL_BEAST_FIRE);
		pdec->PrecacheTexture(TEXTURE_BEAST_FIRE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_CANNON);
		break;
		*/
		/*
	case PRT_GUFFY_PROJECTILE:
		pdec->PrecacheSound(SOUND_FLYING                   );
		pdec->PrecacheModel(MODEL_GUFFY_PROJECTILE         );
		pdec->PrecacheTexture(TEXTURE_GUFFY_PROJECTILE     );
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_ROCKET );
		break;
		*/
	//case PRT_BEAST_BIG_PROJECTILE:
	//case PRT_DEVIL_GUIDED_PROJECTILE:
	//case PRT_BEAST_BIG_DEBRIS:
		/*
	case PRT_SHOOTER_FIREBALL:
		pdec->PrecacheSound(SOUND_BEAST_FLYING  );
		pdec->PrecacheModel(MODEL_BEAST_FIRE);
		pdec->PrecacheTexture(TEXTURE_BEAST_BIG_FIRE);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LIGHT_CANNON);
		break;
		*/
		/*
	case PRT_DEMON_FIREBALL:
	case PRT_DEMON_FIREBALL_DEBRIS:
		pdec->PrecacheSound(SOUND_DEMON_FLYING  );
		pdec->PrecacheModel(MODEL_DEMON_FIREBALL);
		pdec->PrecacheTexture(TEXTURE_DEMON_FIREBALL);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LIGHT_CANNON);
		break;
		*/
		/*
	case PRT_LARVA_PLASMA:
		pdec->PrecacheSound(SOUND_DEMON_FLYING  );
		pdec->PrecacheModel(MODEL_LARVA_PLASMA);
		pdec->PrecacheTexture(TEXTURE_LARVA_PLASMA);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_LIGHT_CANNON);    
		break;
		*/
		/*
	case PRT_LARVA_TAIL_PROJECTILE:
		pdec->PrecacheSound(SOUND_LARVETTE  );
		pdec->PrecacheModel(MODEL_LARVA_TAIL);
		pdec->PrecacheTexture(TEXTURE_LARVA_TAIL);
		pdec->PrecacheClass(CLASS_BASIC_EFFECT, BET_CANNON);
		break;
		*/
		/*
	case PRT_SHOOTER_WOODEN_DART:
		pdec->PrecacheModel(MODEL_SHTR_WOODEN_DART);
		pdec->PrecacheTexture(TEX_SHTR_WOODEN_DART);
		break;
	case PRT_SHOOTER_FLAME:
		pdec->PrecacheModel(MODEL_FLAME);
		pdec->PrecacheClass(CLASS_FLAME);
		break;
	case PRT_AIRELEMENTAL_WIND:
		pdec->PrecacheModel(MODEL_WINDBLAST);
		pdec->PrecacheTexture(TEXTURE_WINDBLAST);    
		break;
	case PRT_AFTERBURNER_DEBRIS:
		pdec->PrecacheModel(MODEL_MARKER);
		pdec->PrecacheTexture(TEXTURE_MARKER);    
		break;
		*/
	default:
		ASSERT(FALSE);
	}
}

void CProjectile::SetDefaultProperties(void) {
  m_penLauncher = NULL;
  m_prtType = PRT_FLAME ;
  m_pmtMove = PMT_FLYING ;
  m_penParticles = NULL;
  m_penTarget = NULL;
  m_penLastDamaged = NULL;
  m_fSpeed = 0.0f;
  m_fIgnoreTime = 0.0f;
  m_fFlyTime = 0.0f;
  m_fStartTime = 0.0f;
  m_fDamageAmount = 0.0f;
  m_fRangeDamageAmount = 0.0f;
  m_fDamageHotSpotRange = 0.0f;
  m_fDamageFallOffRange = 0.0f;
  m_fSoundRange = 0.0f;
  m_bExplode = FALSE ;
  m_bLightSource = FALSE ;
  m_bCanHitHimself = FALSE ;
  m_bCanBeDestroyed = FALSE ;
  m_fWaitAfterDeath = 0.0f;
  m_aRotateSpeed = 0.0f;
  m_tmExpandBox = 0.0f;
  m_tmInvisibility = 0.0f;
  m_iRebounds = 0;
  m_fStretch = 1.0f;
  m_soEffect.SetOwner(this);
m_soEffect.Stop(FALSE);
  m_soExplosion.SetOwner(this);
m_soExplosion.Stop(FALSE);
  m_fGuidedMaxSpeedFactor = 30.0f;
  bLockedOn = TRUE ;
  m_bLeftFlame = FALSE ;
  m_iLauncherID = -1;
  m_penPrediction = NULL;
  CMovableModelEntity::SetDefaultProperties();
}
  void CProjectile::InitializeFromNet() {
#line 666 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ELaunchProjectile  eLaunch ;
#line 667 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ASSERT  (m_iLauncherID  != - 1);
#line 669 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penEntity ;
#line 670 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_iLauncherID  == - 1){
#line 671 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eLaunch  . eidLauncher  = (CEntity  *) NULL ;
#line 672 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else {
#line 673 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
_pNetwork  -> ga_World  . EntityExists  (m_iLauncherID  , penEntity );
#line 674 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eLaunch  . eidLauncher  = penEntity ;
#line 675 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 677 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eLaunch  . prtType  = m_prtType ;
#line 678 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eLaunch  . fSpeed  = m_fSpeed ;
#line 679 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eLaunch  . fStretch  = m_fStretch ;
#line 680 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Initialize  (eLaunch  , FALSE );
#line 681 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 684 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::PreMoving(void) {
#line 685 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_tmExpandBox  > 0){
#line 686 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pTimer  -> CurrentTick  () > m_fStartTime  + m_tmExpandBox ){
#line 687 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ChangeCollisionBoxIndexWhenPossible  (1);
#line 688 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_tmExpandBox  = 0;
#line 689 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 690 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 691 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CMovableModelEntity  :: PreMoving  ();
#line 692 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 695 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::PostMoving(void) {
#line 696 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CMovableModelEntity  :: PostMoving  ();
#line 698 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_prtType  == PRT_FLAME ){
#line 700 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CContentType  & ctDn  = GetWorld  () -> wo_actContentTypes  [ en_iDnContent  ];
#line 702 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(! (ctDn  . ct_ulFlags  & CTF_BREATHABLE_LUNGS )){
#line 703 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fWaitAfterDeath  = 0.0f;
#line 704 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 705 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 706 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 707 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 708 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 709 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 712 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::Read_t(CTStream * istr,BOOL bNetwork) 
#line 713 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 714 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CMovableModelEntity  :: Read_t  (istr  , bNetwork );
#line 716 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bLightSource ){
#line 717 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetupLightSource  (TRUE );
#line 718 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 719 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 722 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CLightSource * CProjectile::GetLightSource(void) 
#line 723 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 724 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bLightSource ){
#line 725 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return & m_lsLightSource ;
#line 726 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else {
#line 727 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return NULL ;
#line 728 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 729 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  void CProjectile::Copy(CEntity & enOther,ULONG ulFlags) 
#line 732 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 733 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CMovableModelEntity  :: Copy  (enOther  , ulFlags );
#line 734 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CProjectile  * penOther  = (CProjectile  *) (& enOther );
#line 735 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 737 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL CProjectile::AdjustShadingParameters(FLOAT3D & vLightDirection,COLOR & colLight,COLOR & colAmbient) 
#line 738 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 740 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CModelObject * pmo  = GetModelObject  ();
#line 741 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if((pmo  != NULL ) && (_pTimer  -> GetLerpedCurrentTick  () < (m_fStartTime  + m_tmInvisibility )))
#line 742 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 744 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
pmo  -> mo_colBlendColor  = 0;
#line 745 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 746 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 747 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 749 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
pmo  -> mo_colBlendColor  = C_WHITE  | CT_OPAQUE ;
#line 750 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 751 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  :: AdjustShadingParameters  (vLightDirection  , colLight  , colAmbient );
#line 752 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return FALSE ;
#line 753 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 756 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::SetupLightSource(BOOL bLive) 
#line 757 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 759 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CLightSource  lsNew ;
#line 760 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_ulFlags  = LSF_NONPERSISTENT  | LSF_DYNAMIC ;
#line 761 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_rHotSpot  = 0.0f;
#line 762 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
switch(m_prtType ){
#line 791 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
case PRT_FLAME : 
#line 792 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_colColor  = C_dORANGE ;
#line 793 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_rFallOff  = 1.0f;
#line 794 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_plftLensFlare  = NULL ;
#line 795 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
break ;
#line 851 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
case PRT_HUANMAN_FIRE : 
#line 852 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_colColor  = C_lBLUE ;
#line 853 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_rFallOff  = 2.0f;
#line 854 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_plftLensFlare  = NULL ;
#line 855 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
break ;
#line 893 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
default  : 
#line 894 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ASSERTALWAYS  ("Unknown light source");
#line 895 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 896 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_ubPolygonalMask  = 0;
#line 897 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
lsNew  . ls_paoLightAnimation  = NULL ;
#line 899 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_lsLightSource  . ls_penEntity  = this ;
#line 900 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_lsLightSource  . SetLightSource  (lsNew );
#line 901 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 904 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::RenderParticles(void) {
#line 905 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
switch(m_prtType ){
#line 919 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
case PRT_FLAME : {
#line 921 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fLeaderLiving  , fFollowerLiving  , fInFrontLiving ;
#line 922 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fInFrontLiving  = 1.05f;
#line 923 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fLeaderLiving  = _pTimer  -> GetLerpedCurrentTick  () - m_fStartTime ;
#line 925 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penParticles  != NULL  && ! (m_penParticles  -> GetFlags  () & ENF_DELETED )){
#line 926 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirLeader  = en_vCurrentTranslationAbsolute ;
#line 927 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirLeader  . Normalize  ();
#line 929 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(IsOfClass  (m_penParticles  , & CProjectile_DLLClass ))
#line 930 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 931 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CProjectile  & prLast  = (CProjectile  &) * m_penParticles ;
#line 933 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(IsOfClass  (prLast  . m_penParticles  , & CPlayerWeapons_DLLClass ))
#line 934 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 935 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CPlayerWeapons  & plw  = (CPlayerWeapons  &) * prLast  . m_penParticles ;
#line 936 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(! (plw  . GetPlayer  () -> GetFlags  () & ENF_ALIVE ))
#line 937 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 938 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return ;
#line 939 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 940 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CPlacement3D plPipe  , plInFrontOfPipe ;
#line 941 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
((CPlayerWeapons  &) * prLast  . m_penParticles ) . GetFlamerSourcePlacement  (plPipe  , plInFrontOfPipe );
#line 942 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fFollowerLiving  = _pTimer  -> GetLerpedCurrentTick  () - ((CProjectile  &) * m_penParticles ) . m_fStartTime ;
#line 943 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirPipeFront ;
#line 944 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
AnglesToDirectionVector  (plInFrontOfPipe  . pl_OrientationAngle  , vDirPipeFront );
#line 945 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirPipeFront  . Normalize  ();
#line 946 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Particles_FlameThrower  (GetLerpedPlacement  () , plInFrontOfPipe  , 
#line 947 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirLeader  , vDirPipeFront  , 
#line 948 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fLeaderLiving  , fInFrontLiving  , en_ulID  , FALSE );
#line 949 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 951 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 952 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 953 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fFollowerLiving  = _pTimer  -> GetLerpedCurrentTick  () - ((CProjectile  &) * m_penParticles ) . m_fStartTime ;
#line 954 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirFollower  = ((CMovableModelEntity  *) (CEntity  *) m_penParticles ) -> en_vCurrentTranslationAbsolute ;
#line 955 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirFollower  . Normalize  ();
#line 956 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Particles_FlameThrower  (GetLerpedPlacement  () , m_penParticles  -> GetLerpedPlacement  () , 
#line 957 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirLeader  , vDirFollower  , fLeaderLiving  , fFollowerLiving  , en_ulID  , FALSE );
#line 958 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 960 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(IsOfClass  (m_penParticles  , & CPlayerWeapons_DLLClass )){
#line 961 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CPlayerWeapons  & plw  = (CPlayerWeapons  &) * m_penParticles ;
#line 962 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(! (plw  . GetPlayer  () -> GetFlags  () & ENF_ALIVE ))
#line 963 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 964 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return ;
#line 965 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 966 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CPlacement3D plPipe  , plInFrontOfPipe ;
#line 967 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
plw  . GetFlamerSourcePlacement  (plPipe  , plInFrontOfPipe );
#line 968 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirPipeFront ;
#line 969 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
AnglesToDirectionVector  (plInFrontOfPipe  . pl_OrientationAngle  , vDirPipeFront );
#line 970 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vViewDir ;
#line 971 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
AnglesToDirectionVector  (plPipe  . pl_OrientationAngle  , vViewDir );
#line 972 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirFollower  = vViewDir  . Normalize  ();
#line 980 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Particles_FlameThrower  (plInFrontOfPipe  , plPipe  , 
#line 981 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirPipeFront  , vDirFollower  , 
#line 982 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fInFrontLiving  , 0.0f , en_ulID  , TRUE );
#line 984 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Particles_FlameThrowerStart  (plPipe  , plw  . m_tmFlamerStart  , plw  . m_tmFlamerStop );
#line 985 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 986 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 987 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
break ;
#line 988 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 1043 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 1044 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 2490 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::LavaBall(void) {
#line 2492 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
InitAsModel  ();
#line 2493 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetPhysicsFlags  (EPF_MODEL_FALL );
#line 2494 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetCollisionFlags  (ECF_PROJECTILE_MAGIC );
#line 2495 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetModel  (MODEL_LAVA );
#line 2496 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetModelMainTexture  (TEXTURE_LAVA );
#line 2497 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
AddAttachment  (0 , MODEL_LAVA_FLARE  , TEXTURE_LAVA_FLARE );
#line 2500 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
LaunchAsFreeProjectile  (FLOAT3D (0.0f , 0.0f , - m_fSpeed ) , (CMovableEntity  *) & * m_penLauncher );
#line 2501 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (0 , FRnd  () * 360.0f - 180.0f , FRnd  () * 360.0f - 180.0f));
#line 2502 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fFlyTime  = 5.0f;
#line 2503 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageAmount  = 5.0f;
#line 2504 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fRangeDamageAmount  = 5.0f;
#line 2505 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageHotSpotRange  = 1.0f;
#line 2506 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageFallOffRange  = 4.0f;
#line 2507 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fSoundRange  = 0.0f;
#line 2508 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bExplode  = TRUE ;
#line 2509 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bLightSource  = FALSE ;
#line 2510 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bCanHitHimself  = FALSE ;
#line 2511 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bCanBeDestroyed  = FALSE ;
#line 2512 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fWaitAfterDeath  = 0.0f;
#line 2513 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_pmtMove  = PMT_FLYING ;
#line 2514 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 2516 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::LavaBallExplosion(void) {
#line 2517 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ESpawnEffect  ese ;
#line 2518 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vPoint ;
#line 2519 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOATplane3D vPlaneNormal ;
#line 2520 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fDistanceToEdge ;
#line 2521 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(GetNearestPolygon  (vPoint  , vPlaneNormal  , fDistanceToEdge )){
#line 2522 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if((vPoint  - GetPlacement  () . pl_PositionVector ) . Length  () < 3.5f){
#line 2524 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ese  . colMuliplier  = C_WHITE  | CT_OPAQUE ;
#line 2525 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ese  . betType  = BET_SHOCKWAVE ;
#line 2526 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ese  . vNormal  = FLOAT3D (vPlaneNormal );
#line 2527 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SpawnEffect  (CPlacement3D (vPoint  , ANGLE3D (0 , 0 , 0)) , ese );
#line 2528 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 2529 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 2530 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3069 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::AfterburnerDebris(void) 
#line 3070 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3071 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Particles_AfterBurner_Prepare  (this );
#line 3073 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
InitAsEditorModel  ();
#line 3074 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetPhysicsFlags  (EPF_MODEL_FALL );
#line 3075 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetCollisionFlags  (ECF_PROJECTILE_MAGIC );
#line 3076 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetModel  (MODEL_MARKER );
#line 3077 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetModelMainTexture  (TEXTURE_MARKER );
#line 3079 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
LaunchAsFreeProjectile  (FLOAT3D (0.0f , 0.0f , - m_fSpeed ) , (CMovableEntity  *) & * m_penLauncher );
#line 3080 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (0 , FRnd  () * 360.0f - 180.0f , FRnd  () * 360.0f - 180.0f));
#line 3081 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fFlyTime  = 10.0f;
#line 3082 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageAmount  = 0.0f;
#line 3083 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fRangeDamageAmount  = 0.0f;
#line 3084 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageHotSpotRange  = 0.0f;
#line 3085 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fDamageFallOffRange  = 0.0f;
#line 3086 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fSoundRange  = 0.0f;
#line 3087 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bExplode  = TRUE ;
#line 3088 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bLightSource  = FALSE ;
#line 3089 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bCanHitHimself  = FALSE ;
#line 3090 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bCanBeDestroyed  = FALSE ;
#line 3091 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fWaitAfterDeath  = 2.0f;
#line 3092 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_pmtMove  = PMT_FLYING ;
#line 3093 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3101 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::ProjectileTouch(CEntityPointer penHit) 
#line 3102 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3104 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3107 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDirection ;
#line 3108 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fTransLen  = en_vIntendedTranslation  . Length  ();
#line 3109 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(fTransLen  > 0.5f)
#line 3110 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3111 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirection  = en_vIntendedTranslation  / fTransLen ;
#line 3112 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3113 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3114 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3115 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
vDirection  = - en_vGravityDir ;
#line 3116 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3119 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
const FLOAT fDamageMul  = GetSeriousDamageMultiplier  (m_penLauncher );
#line 3120 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if((m_prtType  == PRT_FLAME ) && m_fWaitAfterDeath  > 0.0f){
#line 3122 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penLastDamaged  == penHit ){
#line 3123 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return ;
#line 3124 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else {
#line 3125 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_penLastDamaged  = penHit ;
#line 3126 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3129 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bSpawnFlame  = TRUE ;
#line 3130 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bInflictDamage  = TRUE ;
#line 3138 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EntityInfo  * pei  = (EntityInfo  *) penHit  -> GetEntityInfo  ();
#line 3139 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(pei  != NULL  && pei  -> Eeibt  == EIBT_ICE )
#line 3140 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3141 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bSpawnFlame  = FALSE ;
#line 3142 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bInflictDamage  = FALSE ;
#line 3143 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3145 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bSpawnFlame )
#line 3146 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3147 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ESpawnFlame  eFlame ;
#line 3148 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . eidLauncher  = m_penLauncher ;
#line 3149 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . eidAttach  = penHit ;
#line 3150 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . vPos  = GetPlacement  () . pl_PositionVector ;
#line 3151 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eFlame  , TRUE );
#line 3152 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3153 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bInflictDamage )
#line 3154 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3155 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
InflictDirectDamage  (penHit  , m_penLauncher  , DMT_BURNING  , m_fDamageAmount  * fDamageMul  , 
#line 3156 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetPlacement  () . pl_PositionVector  , vDirection );
#line 3157 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3160 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3173 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3174 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3175 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
InflictDirectDamage  (penHit  , m_penLauncher  , DMT_PROJECTILE  , m_fDamageAmount  * fDamageMul  , 
#line 3176 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetPlacement  () . pl_PositionVector  , vDirection );
#line 3177 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3178 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3182 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::ProjectileHit(void) 
#line 3183 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3185 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bExplode ){
#line 3186 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
const FLOAT fDamageMul  = GetSeriousDamageMultiplier  (m_penLauncher );
#line 3187 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
InflictRangeDamage  (m_penLauncher  , DMT_EXPLOSION  , m_fRangeDamageAmount  * fDamageMul  , 
#line 3188 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetPlacement  () . pl_PositionVector  , m_fDamageHotSpotRange  , m_fDamageFallOffRange );
#line 3189 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3191 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_fSoundRange  > 0.0f && IsDerivedFromClass  (m_penLauncher  , & CPlayer_DLLClass ))
#line 3192 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3193 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ESound  eSound ;
#line 3194 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eSound  . EsndtSound  = SNDT_EXPLOSION ;
#line 3195 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eSound  . penTarget  = m_penLauncher ;
#line 3196 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEventInRange  (eSound  , FLOATaabbox3D (GetPlacement  () . pl_PositionVector  , m_fSoundRange ));
#line 3197 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3198 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3202 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::SpawnEffect(const CPlacement3D & plEffect,const ESpawnEffect & eSpawnEffect) {
#line 3205 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3212 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::BounceSound(void) 
#line 3213 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3226 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3231 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE CProjectile::GetRotationSpeed(ANGLE aWantedAngle,ANGLE aRotateSpeed,FLOAT fWaitFrequency) 
#line 3232 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3233 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aResult ;
#line 3235 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(aWantedAngle  < - aRotateSpeed  * fWaitFrequency )
#line 3236 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3238 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
aResult  = - aRotateSpeed ;
#line 3239 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3241 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else if(aWantedAngle  > aRotateSpeed  * fWaitFrequency )
#line 3242 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3244 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
aResult  = + aRotateSpeed ;
#line 3245 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3247 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3248 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3249 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
aResult  = aWantedAngle  / fWaitFrequency ;
#line 3250 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3251 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return aResult ;
#line 3252 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
  
#line 3256 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
void CProjectile::ReceiveDamage(CEntity * penInflictor,enum DamageType dmtType,
#line 3257 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fDamageAmmount,const FLOAT3D & vHitPoint,const FLOAT3D & vDirection) 
#line 3258 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3267 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_prtType  == PRT_FLAME  && IsOfClass  (penInflictor  , & CMovingBrush_DLLClass ))
#line 3268 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3269 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Destroy  (FALSE );
#line 3270 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3272 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CMovableModelEntity  :: ReceiveDamage  (penInflictor  , 
#line 3273 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
dmtType  , fDamageAmmount  , vHitPoint  , vDirection );
#line 3274 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
BOOL CProjectile::
#line 3281 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileFly(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileFly
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileFly expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3283 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3284 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3286 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3291 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3292 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3293 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3294 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3294 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3295 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3297 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(m_fFlyTime );
Jump(STATE_CURRENT, 0x01f50004, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f50004_ProjectileFly_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50004
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3300 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3302 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3304 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) 
#line 3305 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3308 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit )
#line 3309 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3310 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3313 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50005, FALSE, EInternal());return TRUE;
#line 3314 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3315 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3316 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&etouch= (ETouch&)__eeInput;

#line 3319 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fIgnoreTime  = 0.0f;
#line 3321 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3322 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = ! ((! m_bCanHitHimself  && IsOfClass  (etouch  . penOther  , & CProjectile_DLLClass ) 
#line 3323 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * etouch  . penOther ) -> m_prtType  == m_prtType ));
#line 3325 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3326 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (etouch  . penOther );
#line 3327 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50005, FALSE, EInternal());return TRUE;
#line 3328 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3329 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3330 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&e= (EDeath&)__eeInput;

#line 3332 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed ){
#line 3333 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3334 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50005, FALSE, EInternal());return TRUE;
#line 3335 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3336 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3337 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;

#line 3339 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3340 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50005, FALSE, EInternal());return TRUE;
#line 3341 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3342 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f50005_ProjectileFly_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50005

#line 3343 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3344 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3345 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3346 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3346 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3350 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileGuidedFly(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileGuidedFly
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileGuidedFly expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3352 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3353 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3355 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3356 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3357 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3358 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3359 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3359 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3360 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3362 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Jump(STATE_CURRENT,0x01f50009, FALSE, EInternal());return TRUE;}BOOL CProjectile::H0x01f50009_ProjectileGuidedFly_03(const CEntityEvent &__eeInput)
#line 3363 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50009
if(!(_pTimer  -> CurrentTick  () < (m_fStartTime  + m_fFlyTime ))){ Jump(STATE_CURRENT,0x01f5000a, FALSE, EInternal());return TRUE;}
#line 3364 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWaitFrequency  = 0.1f;
#line 3372 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penTarget  != NULL ){
#line 3374 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EntityInfo  * pei  = (EntityInfo  *) (m_penTarget  -> GetEntityInfo  ());
#line 3375 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredPosition ;
#line 3376 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetEntityInfoPosition  (m_penTarget  , pei  -> vSourceCenter  , vDesiredPosition );
#line 3377 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredDirection  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Normalize  ();
#line 3379 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aWantedHeading  = GetRelativeHeading  (vDesiredDirection );
#line 3384 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aHeading  = GetRotationSpeed  (aWantedHeading  , m_aRotateSpeed  , fWaitFrequency );
#line 3387 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedDecreasingFactor  = ((180 - abs  (aWantedHeading )) / 180.0f);
#line 3389 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedIncreasingFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 100;
#line 3390 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fSpeedIncreasingFactor  = ClampDn  (fSpeedIncreasingFactor  , 1.0f);
#line 3392 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMaxSpeed  = m_fGuidedMaxSpeedFactor  * fSpeedIncreasingFactor ;
#line 3393 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMinSpeedRatio  = 0.5f;
#line 3394 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWantedSpeed  = fMaxSpeed  * (fMinSpeedRatio  + (1 - fMinSpeedRatio ) * fSpeedDecreasingFactor );
#line 3396 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredTranslation  (FLOAT3D (0 , 0 , - fWantedSpeed ));
#line 3399 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_aRotateSpeed  = 75.0f * (1 + 0.5f * fSpeedDecreasingFactor );
#line 3402 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fDistanceFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 50.0;
#line 3403 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fDistanceFactor  = ClampUp  (fDistanceFactor  , 4.0f);
#line 3404 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fRNDHeading  = (FRnd  () - 0.5f) * 180 * fDistanceFactor ;
#line 3405 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fRNDPitch  = (FRnd  () - 0.5f) * 90 * fDistanceFactor ;
#line 3408 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(abs  (aWantedHeading ) < 30.0f)
#line 3409 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3411 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aWantedPitch  = GetRelativePitch  (vDesiredDirection );
#line 3412 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aPitch  = GetRotationSpeed  (aWantedPitch  , m_aRotateSpeed  * 1.5f , fWaitFrequency );
#line 3414 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  + fRNDHeading  , aPitch  + fRNDPitch  , 0));
#line 3415 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3417 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3418 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3419 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  , fDistanceFactor  * 40 , 0));
#line 3420 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3421 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3423 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(fWaitFrequency );
Jump(STATE_CURRENT, 0x01f50007, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f50007_ProjectileGuidedFly_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50007
switch(__eeInput.ee_slEvent)
#line 3424 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3427 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3429 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3431 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) 
#line 3432 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3435 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3436 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3437 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3438 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3439 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3440 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3440 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3441 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3442 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3443 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):
#line 3445 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const EDeath&e= (EDeath&)__eeInput;

#line 3446 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed )
#line 3447 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3448 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3449 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3450 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3451 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3452 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3452 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3453 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3454 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3455 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):
#line 3457 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const ETimer&e= (ETimer&)__eeInput;

#line 3458 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50008, FALSE, EInternal());return TRUE;
#line 3459 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3460 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f50008_ProjectileGuidedFly_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50008
Jump(STATE_CURRENT,0x01f50009, FALSE, EInternal());return TRUE;
#line 3461 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}BOOL CProjectile::H0x01f5000a_ProjectileGuidedFly_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5000a

#line 3462 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (EExplode  () , TRUE );
#line 3463 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3463 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3466 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileGuidedFastFly(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileGuidedFastFly
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileGuidedFastFly expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3468 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3469 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3471 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3472 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3473 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3474 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3475 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3475 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3476 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3478 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Jump(STATE_CURRENT,0x01f5000e, FALSE, EInternal());return TRUE;}BOOL CProjectile::H0x01f5000e_ProjectileGuidedFastFly_03(const CEntityEvent &__eeInput)
#line 3479 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5000e
if(!(_pTimer  -> CurrentTick  () < (m_fStartTime  + m_fFlyTime ))){ Jump(STATE_CURRENT,0x01f5000f, FALSE, EInternal());return TRUE;}
#line 3480 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWaitFrequency  = 0.1f;
#line 3482 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penTarget  != NULL  && 
#line 3483 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
DistanceTo  (this  , m_penTarget ) < 20.0f && 
#line 3484 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
(m_fStartTime  + m_fFlyTime  - _pTimer  -> CurrentTick  ()) > 1.5f)
#line 3485 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3486 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fFlyTime  = _pTimer  -> CurrentTick  () - m_fStartTime  + 1.5f;
#line 3487 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3488 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penTarget  != NULL ){
#line 3490 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EntityInfo  * pei  = (EntityInfo  *) (m_penTarget  -> GetEntityInfo  ());
#line 3491 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredPosition ;
#line 3492 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetEntityInfoPosition  (m_penTarget  , pei  -> vSourceCenter  , vDesiredPosition );
#line 3493 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredDirection  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Normalize  ();
#line 3495 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aWantedHeading  = GetRelativeHeading  (vDesiredDirection );
#line 3496 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aHeading  = GetRotationSpeed  (aWantedHeading  , 5.0f , fWaitFrequency );
#line 3499 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedDecreasingFactor  = ((180 - abs  (aWantedHeading )) / 180.0f);
#line 3501 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedIncreasingFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 100;
#line 3502 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fSpeedIncreasingFactor  = ClampDn  (fSpeedIncreasingFactor  , 1.0f);
#line 3504 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMaxSpeed  = m_fGuidedMaxSpeedFactor  * fSpeedIncreasingFactor ;
#line 3505 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMinSpeedRatio  = 10.0f;
#line 3506 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWantedSpeed  = fMaxSpeed  * (fMinSpeedRatio  + (1 - fMinSpeedRatio ) * fSpeedDecreasingFactor );
#line 3508 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredTranslation  (FLOAT3D (0 , 0 , - fWantedSpeed ));
#line 3511 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_aRotateSpeed  = 110.0f * (1 + 0.5f * fSpeedDecreasingFactor );
#line 3514 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fDistanceFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 50.0;
#line 3515 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fDistanceFactor  = ClampUp  (fDistanceFactor  , 4.0f);
#line 3518 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(abs  (aWantedHeading ) < 30.0f)
#line 3519 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3520 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bLockedOn  = TRUE ;
#line 3522 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aWantedPitch  = GetRelativePitch  (vDesiredDirection );
#line 3523 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aPitch  = GetRotationSpeed  (aWantedPitch  , m_aRotateSpeed  * 1.5f , fWaitFrequency );
#line 3525 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  , aPitch  , 0));
#line 3526 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3528 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3529 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3530 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bLockedOn )
#line 3531 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3532 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE3D aBankingUp ;
#line 3533 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
aBankingUp  = GetPlacement  () . pl_OrientationAngle ;
#line 3534 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
aBankingUp  (3) = 0.0f;
#line 3535 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetPlacement  (CPlacement3D (GetPlacement  () . pl_PositionVector  , aBankingUp ));
#line 3536 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3537 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bLockedOn  = FALSE ;
#line 3539 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  , 400 , 0));
#line 3540 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3541 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3543 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(fWaitFrequency );
Jump(STATE_CURRENT, 0x01f5000c, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f5000c_ProjectileGuidedFastFly_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5000c
switch(__eeInput.ee_slEvent)
#line 3544 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&etouch= (ETouch&)__eeInput;

#line 3548 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fIgnoreTime  = 0.0f;
#line 3550 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3551 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = ! ((! m_bCanHitHimself  && IsOfClass  (etouch  . penOther  , & CProjectile_DLLClass ) 
#line 3552 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * etouch  . penOther ) -> m_prtType  == m_prtType ));
#line 3554 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vTrans  = en_vCurrentTranslationAbsolute ;
#line 3555 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= Abs  (vTrans  . Normalize  () % FLOAT3D (etouch  . plCollision )) > 0.35;
#line 3557 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3558 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (etouch  . penOther );
#line 3559 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3560 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3561 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3562 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3562 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3563 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3565 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3566 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3568 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3570 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3572 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) 
#line 3573 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3580 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3581 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3582 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3583 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3584 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3585 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3585 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3586 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3587 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3588 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):
#line 3590 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const EDeath&e= (EDeath&)__eeInput;

#line 3591 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed )
#line 3592 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3593 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3594 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3595 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3596 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3597 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3597 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3598 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3599 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3600 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):
#line 3602 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const ETimer&e= (ETimer&)__eeInput;

#line 3603 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5000d, FALSE, EInternal());return TRUE;
#line 3604 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3605 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f5000d_ProjectileGuidedFastFly_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5000d
Jump(STATE_CURRENT,0x01f5000e, FALSE, EInternal());return TRUE;
#line 3606 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}BOOL CProjectile::H0x01f5000f_ProjectileGuidedFastFly_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5000f

#line 3607 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3608 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3609 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3610 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3610 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3614 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileGuidedSlide(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileGuidedSlide
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileGuidedSlide expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3616 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3617 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3619 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3620 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3621 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3622 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3623 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3623 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3624 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3626 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Jump(STATE_CURRENT,0x01f50013, FALSE, EInternal());return TRUE;}BOOL CProjectile::H0x01f50013_ProjectileGuidedSlide_03(const CEntityEvent &__eeInput)
#line 3627 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50013
if(!(_pTimer  -> CurrentTick  () < (m_fStartTime  + m_fFlyTime ))){ Jump(STATE_CURRENT,0x01f50014, FALSE, EInternal());return TRUE;}
#line 3628 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWaitFrequency  = 0.1f;
#line 3629 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penTarget  != NULL ){
#line 3631 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EntityInfo  * pei  = (EntityInfo  *) (m_penTarget  -> GetEntityInfo  ());
#line 3632 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredPosition ;
#line 3633 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
GetEntityInfoPosition  (m_penTarget  , pei  -> vSourceCenter  , vDesiredPosition );
#line 3634 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT3D vDesiredDirection  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Normalize  ();
#line 3636 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aWantedHeading  = GetRelativeHeading  (vDesiredDirection );
#line 3637 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ANGLE aHeading  = GetRotationSpeed  (aWantedHeading  , m_aRotateSpeed  , fWaitFrequency );
#line 3640 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedDecreasingFactor  = ((180 - abs  (aWantedHeading )) / 180.0f);
#line 3642 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fSpeedIncreasingFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 100;
#line 3643 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fSpeedIncreasingFactor  = ClampDn  (fSpeedIncreasingFactor  , 1.0f);
#line 3645 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMaxSpeed  = 30.0f * fSpeedIncreasingFactor ;
#line 3646 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fMinSpeedRatio  = 0.5f;
#line 3647 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fWantedSpeed  = fMaxSpeed  * (fMinSpeedRatio  + (1 - fMinSpeedRatio ) * fSpeedDecreasingFactor );
#line 3649 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredTranslation  (FLOAT3D (0 , 0 , - fWantedSpeed ));
#line 3652 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_aRotateSpeed  = 75.0f * (1 + 0.5f * fSpeedDecreasingFactor );
#line 3655 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fDistanceFactor  = (vDesiredPosition  - GetPlacement  () . pl_PositionVector ) . Length  () / 50.0;
#line 3656 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
fDistanceFactor  = ClampUp  (fDistanceFactor  , 4.0f);
#line 3657 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
FLOAT fRNDHeading  = (FRnd  () - 0.5f) * 180 * fDistanceFactor ;
#line 3660 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(abs  (aWantedHeading ) < 30.0f)
#line 3661 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3663 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  + fRNDHeading  , 0 , 0));
#line 3664 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3666 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
else 
#line 3667 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3668 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetDesiredRotation  (ANGLE3D (aHeading  , 0 , 0));
#line 3669 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3670 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3672 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(fWaitFrequency );
Jump(STATE_CURRENT, 0x01f50011, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f50011_ProjectileGuidedSlide_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50011
switch(__eeInput.ee_slEvent)
#line 3673 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3676 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3678 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3680 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) 
#line 3681 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3684 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3685 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3686 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3687 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3688 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3689 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3689 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3690 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3691 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3692 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):
#line 3694 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const EDeath&e= (EDeath&)__eeInput;

#line 3695 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed )
#line 3696 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3697 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3698 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3699 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3700 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3701 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3701 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3702 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3703 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3704 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):
#line 3706 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{const ETimer&e= (ETimer&)__eeInput;

#line 3707 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50012, FALSE, EInternal());return TRUE;
#line 3708 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3709 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f50012_ProjectileGuidedSlide_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50012
Jump(STATE_CURRENT,0x01f50013, FALSE, EInternal());return TRUE;
#line 3710 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}BOOL CProjectile::H0x01f50014_ProjectileGuidedSlide_04(const CEntityEvent &__eeInput) {
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50014

#line 3711 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3712 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3713 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3714 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3714 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3718 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileSlide(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileSlide
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileSlide expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3720 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3721 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3723 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3724 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3725 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3726 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3727 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3727 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3728 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3730 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(m_fFlyTime );
Jump(STATE_CURRENT, 0x01f50016, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f50016_ProjectileSlide_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50016
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3734 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3736 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3738 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) 
#line 3739 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3742 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3743 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 3744 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3745 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3747 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_prtType  == PRT_FLAME  
#line 3748 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& IsDerivedFromClass  ((CEntity  *) & * (epass  . penOther ) , & CEnemyBase_DLLClass )){
#line 3749 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3750 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3759 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50017, FALSE, EInternal());return TRUE;
#line 3760 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3761 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3762 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&etouch= (ETouch&)__eeInput;

#line 3765 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fIgnoreTime  = 0.0f;
#line 3767 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3768 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = ! (etouch  . penOther  -> GetRenderType  () & RT_BRUSH );
#line 3769 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_prtType  == PRT_FLAME  && ! bHit  && ! m_bLeftFlame )
#line 3770 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
{
#line 3771 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ESpawnFlame  eFlame ;
#line 3772 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . eidLauncher  = m_penLauncher ;
#line 3773 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . eidAttach  = etouch  . penOther ;
#line 3774 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eFlame  . vPos  = GetPlacement  () . pl_PositionVector ;
#line 3775 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eFlame  , TRUE );
#line 3776 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_bLeftFlame  = TRUE ;
#line 3777 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3778 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(! bHit ){BounceSound  ();}
#line 3780 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (etouch  . penOther  , & CProjectile_DLLClass ) 
#line 3781 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
&& ((CProjectile  *) & * etouch  . penOther ) -> m_prtType  == m_prtType ));
#line 3782 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3783 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 3784 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (etouch  . penOther );
#line 3785 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3786 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50017, FALSE, EInternal());return TRUE;
#line 3787 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3789 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(en_vCurrentTranslationAbsolute  . Length  () < 0.25f * en_vDesiredTranslationRelative  . Length  ()){
#line 3790 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 3791 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3792 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3793 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50017, FALSE, EInternal());return TRUE;
#line 3794 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3795 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3796 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&e= (EDeath&)__eeInput;

#line 3798 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed ){
#line 3799 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 3800 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3801 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3802 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50017, FALSE, EInternal());return TRUE;
#line 3803 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3804 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3805 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;

#line 3807 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 3808 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3809 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3810 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f50017, FALSE, EInternal());return TRUE;
#line 3811 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ESpawnFlame):{const ESpawnFlame&eFlame= (ESpawnFlame&)__eeInput;

#line 3813 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penLauncher  = (CEntity  *) eFlame  . eidLauncher ;
#line 3814 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penAttach  = (CEntity  *) eFlame  . eidAttach ;
#line 3815 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if((penLauncher  == NULL ) || (penAttach  == NULL )){return TRUE;}
#line 3816 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SpawnFlame  (penLauncher  , penAttach  , eFlame  . vPos );
#line 3817 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3818 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3820 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f50017_ProjectileSlide_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50017

#line 3822 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3823 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3824 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3826 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3826 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3830 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileFlyRebounding(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_ProjectileFlyRebounding
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CProjectile::ProjectileFlyRebounding expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 3832 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penObstacle ;
#line 3833 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(CheckForCollisionNow  (0 , & penObstacle )){
#line 3835 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (penObstacle );
#line 3836 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3837 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3838 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3839 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3839 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3840 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3842 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(m_fFlyTime );
Jump(STATE_CURRENT, 0x01f50019, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f50019_ProjectileFlyRebounding_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f50019
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;
return TRUE;}ASSERT(FALSE);break;case(EVENTCODE_EPass):{const EPass&epass= (EPass&)__eeInput;

#line 3845 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3847 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = epass  . penOther  != m_penLauncher  || _pTimer  -> CurrentTick  () > m_fIgnoreTime ;
#line 3849 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  &= ! ((! m_bCanHitHimself  && IsOfClass  (epass  . penOther  , & CProjectile_DLLClass ) && 
#line 3850 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
((CProjectile  *) & * epass  . penOther ) -> m_prtType  == m_prtType ));
#line 3853 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3854 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (epass  . penOther );
#line 3855 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5001a, FALSE, EInternal());return TRUE;
#line 3856 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3857 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3858 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETouch):{const ETouch&etouch= (ETouch&)__eeInput;

#line 3861 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fIgnoreTime  = 0.0f;
#line 3863 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
BOOL bHit ;
#line 3866 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = (etouch  . penOther  -> GetRenderType  () == RT_BRUSH );
#line 3868 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit  && m_iRebounds  > 0){
#line 3870 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ReflectDirectionVectorByPlane  (etouch  . plCollision  , en_vCurrentTranslationAbsolute );
#line 3871 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ReflectRotationMatrixByPlane_cols  (etouch  . plCollision  , en_mRotation );
#line 3872 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_iRebounds  --;
#line 3873 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else {
#line 3875 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
bHit  = ! ((! m_bCanHitHimself  && IsOfClass  (etouch  . penOther  , & CProjectile_DLLClass ) && 
#line 3876 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
((CProjectile  *) & * etouch  . penOther ) -> m_prtType  == m_prtType ));
#line 3878 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(bHit ){
#line 3879 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileTouch  (etouch  . penOther );
#line 3880 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5001a, FALSE, EInternal());return TRUE;
#line 3881 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3882 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3883 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3884 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EDeath):{const EDeath&e= (EDeath&)__eeInput;

#line 3886 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bCanBeDestroyed ){
#line 3887 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3888 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5001a, FALSE, EInternal());return TRUE;
#line 3889 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3890 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3891 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ETimer):{const ETimer&e= (ETimer&)__eeInput;

#line 3893 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ProjectileHit  ();
#line 3894 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5001a, FALSE, EInternal());return TRUE;
#line 3895 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 3896 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f5001a_ProjectileFlyRebounding_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001a

#line 3897 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
EExplode  eexpl ;
#line 3898 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
eexpl  . vPosition  = en_plPlacement  . pl_PositionVector ;
#line 3899 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SendEvent  (eexpl  , TRUE );
#line 3900 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3900 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};BOOL CProjectile::
#line 3904 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CProjectile_Main
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_ELaunchProjectile, "CProjectile::Main expects 'ELaunchProjectile' as input!");  const ELaunchProjectile &eLaunch = (const ELaunchProjectile &)__eeInput;
#line 3906 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_penLauncher  = eLaunch  . eidLauncher ;
#line 3907 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_penLauncher  == NULL ){
#line 3908 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
en_RenderType  = RT_NONE ;
#line 3909 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Destroy  (FALSE );
#line 3910 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 3910 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 3911 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 3912 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ASSERT  (((CEntity  *) eLaunch  . eidLauncher ) != NULL );
#line 3913 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_iLauncherID  = m_penLauncher  -> en_ulID ;
#line 3914 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_prtType  = eLaunch  . prtType ;
#line 3915 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fSpeed  = eLaunch  . fSpeed ;
#line 3916 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fStretch  = eLaunch  . fStretch ;
#line 3919 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fIgnoreTime  = _pTimer  -> CurrentTick  () + 1.0f;
#line 3920 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_penLastDamaged  = NULL ;
#line 3922 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetFlagOn  (ENF_CLIENTHANDLING );
#line 4008 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bLightSource ){SetupLightSource  (TRUE );}
#line 4011 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
m_fStartTime  = _pTimer  -> CurrentTick  ();
#line 4013 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAt(THINKTIME_NEVER);
Jump(STATE_CURRENT, 0x01f5001b, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f5001b_Main_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001b
switch(__eeInput.ee_slEvent){case(EVENTCODE_EBegin):{const EBegin&e= (EBegin&)__eeInput;

#line 4015 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(_pNetwork  -> IsServer  ()){
#line 4016 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_pmtMove  == PMT_GUIDED ){
#line 4017 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileGuidedFly, TRUE, EVoid());return TRUE;
#line 4018 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(m_pmtMove  == PMT_GUIDED_FAST ){
#line 4019 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileGuidedFastFly, TRUE, EVoid());return TRUE;
#line 4020 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(m_pmtMove  == PMT_FLYING ){
#line 4021 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileFly, TRUE, EVoid());return TRUE;
#line 4022 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(m_pmtMove  == PMT_SLIDING ){
#line 4023 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileSlide, TRUE, EVoid());return TRUE;
#line 4024 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(m_pmtMove  == PMT_FLYING_REBOUNDING ){
#line 4025 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileFlyRebounding, TRUE, EVoid());return TRUE;
#line 4026 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else if(m_pmtMove  == PMT_GUIDED_SLIDING ){
#line 4027 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Call(STATE_CURRENT, STATE_CProjectile_ProjectileGuidedSlide, TRUE, EVoid());return TRUE;
#line 4028 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 4029 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}else {
#line 4030 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 4031 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}
#line 4032 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_EExplode):{const EExplode&eexpl= (EExplode&)__eeInput;

#line 4034 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CPlacement3D plPlacement ;
#line 4035 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
plPlacement  . pl_OrientationAngle  = ANGLE3D (0.0f , 0.0f , 0.0f);
#line 4036 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
plPlacement  . pl_PositionVector  = eexpl  . vPosition ;
#line 4037 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetPlacement  (plPlacement );
#line 4038 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
UnsetTimer();Jump(STATE_CURRENT,0x01f5001c, FALSE, EInternal());return TRUE;
#line 4039 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;case(EVENTCODE_ESpawnFlame):{const ESpawnFlame&eFlame= (ESpawnFlame&)__eeInput;

#line 4041 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penLauncher  = (CEntity  *) eFlame  . eidLauncher ;
#line 4042 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
CEntity  * penAttach  = (CEntity  *) eFlame  . eidAttach ;
#line 4043 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if((penLauncher  == NULL ) || (penAttach  == NULL )){return TRUE;}
#line 4044 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SpawnFlame  ((CEntity  *) eFlame  . eidLauncher  , (CEntity  *) eFlame  . eidAttach  , eFlame  . vPos );
#line 4045 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE;
#line 4046 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}ASSERT(FALSE);break;default: return FALSE; break;
#line 4047 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
}return TRUE;}BOOL CProjectile::H0x01f5001c_Main_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001c

#line 4077 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(!(m_fWaitAfterDeath  > 0.0f)){ Jump(STATE_CURRENT,0x01f5001f, FALSE, EInternal());return TRUE;}
#line 4078 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SwitchToEditorModel  ();
#line 4079 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
ForceFullStop  ();
#line 4080 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetCollisionFlags  (ECF_IMMATERIAL );
#line 4082 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
if(m_bLightSource ){SetupLightSource  (FALSE );}
#line 4083 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
SetTimerAfter(m_fWaitAfterDeath );
Jump(STATE_CURRENT, 0x01f5001d, FALSE, EBegin());return TRUE;}BOOL CProjectile::H0x01f5001d_Main_03(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001d
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x01f5001e, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CProjectile::H0x01f5001e_Main_04(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001e
;Jump(STATE_CURRENT,0x01f5001f, FALSE, EInternal());return TRUE;}BOOL CProjectile::H0x01f5001f_Main_05(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x01f5001f

#line 4086 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Destroy  (FALSE );
#line 4088 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
Return(STATE_CURRENT,EVoid());
#line 4088 "E:/질산/Korea/Client_USA/EntitiesMP/Projectile.es"
return TRUE; ASSERT(FALSE); return TRUE;};