/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 2 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"

#include "StdH.h"
#include "EntitiesMP/BackgroundViewer.h"
#include "EntitiesMP/WorldSettingsController.h"
// for error checking:
#include "EntitiesMP/SoundHolder.h"
#include "EntitiesMP/PlayerMarker.h"
//#include "EntitiesMP/KeyItem.h"
#include "EntitiesMP/DoorController.h"
#include "EntitiesMP/Counter.h"
#include "EntitiesMP/ModelHolder.h"
#include "EntitiesMP/MusicHolder.h"
#include "EntitiesMP\GravityMarker.h"
#include "EntitiesMP\GravityRouter.h"

#include <WorldBase.h>
#include <WorldBase_tables.h>
#line 23 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"


//안태훈 수정 시작	//(Modify Worldbase Overbright to NonOver)(0.1)
extern COLOR g_colNewGameShadeColor = C_WHITE | CT_OPAQUE;
//안태훈 수정 끝	//(Modify Worldbase Overbright to NonOver)(0.1)


inline void Clear(EntityStats &es) {es.es_strName.Clear();};
static CDynamicArray<EntityStats> _aes;
static CAnimObject _aoLightningColor;

EntityStats *FindStats(const CTString &strName)
{
	{FOREACHINDYNAMICARRAY(_aes, EntityStats, ites) {
		EntityStats &es = *ites;
		if (es.es_strName==strName) {
			return &es;
		}
	}}
	return NULL;
}

static void MakeWorldStatistics(void)
{
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("No current world.\n");
		return;
	}

	// for each entity in the world
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, iten) {
		// get its stats
		EntityStats esCurrent;
		BOOL bHasStats = iten->FillEntityStatistics(&esCurrent);
		// if no stats
		if (!bHasStats) {
			// skip it
			continue;
		}

		// find existing stats with same name
		EntityStats *pesOld = FindStats(esCurrent.es_strName);
		// if such stats exists
		if (pesOld!=NULL) {
			// update the existing stats
			pesOld->es_ctCount    += esCurrent.es_ctCount;
			pesOld->es_ctAmmount  += esCurrent.es_ctAmmount*esCurrent.es_ctCount;
			pesOld->es_fValue     += esCurrent.es_fValue*esCurrent.es_ctCount;
//			pesOld->es_iScore     += esCurrent.es_iScore*esCurrent.es_ctCount;
		// if this a new name
		} else {
			// create new stats
			EntityStats &esNew = *_aes.New();
			esNew.es_strName    = esCurrent.es_strName;
			esNew.es_ctCount    = esCurrent.es_ctCount;
			esNew.es_ctAmmount  = esCurrent.es_ctAmmount*esCurrent.es_ctCount;
			esNew.es_fValue     = esCurrent.es_fValue*esCurrent.es_ctCount;
//			esNew.es_iScore     = esCurrent.es_iScore*esCurrent.es_ctCount;
		}
	}}

	// dump all stats
	try {
		CTFileStream strm;
		CTFileName fnm = CTString("Temp\\Statistics.txt");
		strm.Create_t(fnm);
		CTString strLine;
		strLine.PrintF("%-40s: %8s %8s %10s %10s", 
			"name", "count", "ammount", "health", "score");
		strm.PutLine_t(strLine);
		{FOREACHINDYNAMICARRAY(_aes, EntityStats, ites) {
			EntityStats &es = *ites;
			CTString strLine;
			strLine.PrintF("%-40s: %8d %8d %10g", 
				es.es_strName, es.es_ctCount, es.es_ctAmmount, es.es_fValue);
			strm.PutLine_t(strLine);
		}}
		CPrintF("Dumped to '%s'\n", CTString(fnm));
	} catch (char *strError) {
		CPrintF("Error: %s\n", strError);
	}

	_aes.Clear();
}

static void ReoptimizeAllBrushes(void)
{
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("No current world.\n");
		return;
	}

	// for each brush in the world
	FOREACHINDYNAMICARRAY(pwo->wo_baBrushes.ba_abrBrushes, CBrush3D, itbr) {
		CBrush3D &br=*itbr;
		// for each mip in the brush
		FOREACHINLIST(CBrushMip, bm_lnInBrush, itbr->br_lhBrushMips, itbm) {
			// reoptimize it
			itbm->Reoptimize();
		}
	}
	CPrintF("All brushes reoptimized.\n");
}

static void DoLevelSafetyChecks()
{
	
	BOOL bWorldSettingsControllerExists = FALSE;
	
	CPrintF("\n****  BEGIN Level safety checking  ****\n\n");
	
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("Error - no current world.\n");
		return;
	}
	
	CPrintF("STEP 1 - Checking model holders...\n");
	// for model holder in the world;
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, iten) {  
		if( IsOfClass( iten, &CModelHolder_DLLClass)) {
			CModelHolder2 *mh = (CModelHolder2*)&*iten;
			FLOAT3D vPos = mh->GetPlacement().pl_PositionVector;
			if (mh->m_penDestruction == NULL) {
				CPrintF("  ModelHolder2 '%s' at (%2.2f, %2.2f, %2.2f) has no destruction\n", mh->m_strName, vPos(1), vPos(2), vPos(3));
			}
		}
		if( IsOfClass( iten, &CModelHolder3_DLLClass)) {
			CModelHolder3 *mh = (CModelHolder3*)&*iten;
			FLOAT3D vPos = mh->GetPlacement().pl_PositionVector;
			if (mh->m_penDestruction == NULL) {
				CPrintF("  ModelHolder3 '%s' at (%2.2f, %2.2f, %2.2f) has no destruction\n", mh->m_strName, vPos(1), vPos(2), vPos(3));
			}
		}
	}}

	CPrintF("STEP 2 - Checking sound holders...\n");
	// for each sound holder in the world
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, iten) {
		if( IsOfClass( iten, &CSoundHolder_DLLClass)) {
			CSoundHolder *sh = (CSoundHolder *)&*iten;
			FLOAT3D vPos = sh->GetPlacement().pl_PositionVector;
			if (sh->m_fnSound == CTFILENAME("Data\\Sounds\\Default.wav")) {
				CPrintF("  sound holder '%s' at (%2.2f, %2.2f, %2.2f) has default sound!\n", sh->m_strName, vPos(1), vPos(2), vPos(3));
			}
		}
	}}
	

	CPrintF("STEP 3 - Checking other important entities...\n");
	CWorldSettingsController *pwsc = NULL;
	class CBackgroundViewer *penBcgViewer = (CBackgroundViewer *) pwo->GetBackgroundViewer();
	if( penBcgViewer != NULL) {
		// obtain world settings controller 
		pwsc = (CWorldSettingsController *) &*penBcgViewer->m_penWorldSettingsController;
	}
	
	if (pwsc!=NULL) {
		CPrintF("  OK! World settings controller exists!\n");
	} else {
		CPrintF("  ERROR! World settings controller does not exist (or isn't connected to the background viewer)!\n");
	}

	CPrintF("STEP 4 - Enumerating music holders...\n");
	// for each music holder in the world
	INDEX ctMusicHolders = 0;
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, iten) {
		if( IsOfClass( iten, &CMusicHolder_DLLClass)) {
			ctMusicHolders++;      
		}
	}}
	if (ctMusicHolders==0) {
		CPrintF("  ERROR! No music holder found in the world!\n");
	} else if (ctMusicHolders>1) {
		CPrintF("  ERROR! %d music holders (only one is allowed!) found in the world!\n", ctMusicHolders);
	} else {
		CPrintF("  OK! One music holder exists in the world!\n");
	}

	CPrintF("\n****  END Level safety checking  ****\n");

}



static void ConversionCheckForMH2(const CTString &fnmSourceModel, INDEX iType)
{
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("Error - no current world.\n");
		return;
	}
	CPrintF("Searching for all models '%s'!\n", fnmSourceModel);
	// for all entities in this world
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenMH2) {
		if( IsOfClass( itenMH2, &CModelHolder2_DLLClass)) {
			CModelHolder2 *penMH2 = (CModelHolder2 *)&*itenMH2;
			INDEX iEntityID = penMH2->en_ulID;
			if (penMH2->m_fnModel==fnmSourceModel) {
				// copy all properties
				FLOAT3D vPos = penMH2->GetPlacement().pl_PositionVector;
				CPrintF("<ID:%d> found matching model at <%2.2f, %2.2f, %2.2f>\n",
								 iEntityID, vPos(1), vPos(2), vPos(3));
				
				// inspect all pointer values of all entities in the world that point to old model
				{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenOther){
					// get the DLL class of this entity
					CDLLEntityClass *pdecDLLClass = itenOther->en_pecClass->ec_pdecDLLClass;
					
					// for all classes in hierarchy of this entity
					for(;
					pdecDLLClass!=NULL;
					pdecDLLClass = pdecDLLClass->dec_pdecBase) {
						// for all properties
						for(INDEX iProperty=0; iProperty<pdecDLLClass->dec_ctProperties; iProperty++) {
							CEntityProperty &epProperty = pdecDLLClass->dec_aepProperties[iProperty];              
							// if the property type is entity pointer
							if (epProperty.ep_eptType == CEntityProperty::EPT_ENTITYPTR) {
								// get the pointer
								CEntityPointer &penPointed = ENTITYPROPERTY(&*itenOther, epProperty.ep_slOffset, CEntityPointer);
								// if it points to the entity to be untargeted
								if (penPointed == penMH2) {
									// if entity is AnimationChanger
									if( IsOfClass( itenOther, &CAnimationChanger_DLLClass)) {
										CPrintF("<ID:%d> WARNING! Animation Changer '%s' (ID:%d) points to inspected model\n",
											iEntityID, itenOther->GetName(), itenOther->en_ulID);
									} else if (iType>0) {
										CPrintF("<ID:%d> Entity '%s' (ID:%d) points to inspected model\n", 
											iEntityID, itenOther->GetName(), itenOther->en_ulID);
									}
								}
							}
						}
					}
				}}//FOREACHINDYNAMICCONTAINER
				
			}
		}
	}}//FOREACHINDYNAMICCONTAINER
}


static void ConvertSingleMH2ToMH3(const CTString &fnmSourceModel)
{
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("Error - no current world.\n");
		return;
	}
	// create the ModelHolder3 entity just to test if it works
	CEntity *penNewClass = NULL;
	CPlacement3D pl = CPlacement3D(FLOAT3D(0.0f, 0.0f, 0.0f),
																 ANGLE3D(0.0f, 0.0f, 0.0f));
	
	_pShell->Execute("WED_DeselectAll();");
	
	CPrintF("\nSearching for all '%s' models!\n----------\n", fnmSourceModel);
	// for all entities in this world
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenMH2) {
		if( IsOfClass( itenMH2, &CModelHolder2_DLLClass)) {
			CModelHolder2 *penMH2 = (CModelHolder2 *)&*itenMH2;
			INDEX iEntityID = penMH2->en_ulID;
			if (penMH2->m_fnModel==fnmSourceModel) {
				CTFileName fnmTargetModel = CTFileName(fnmSourceModel).NoExt() + CTString(".smc");      
				if (FileExists(fnmTargetModel)) {
					FLOAT3D vPos = penMH2->GetPlacement().pl_PositionVector;
					CPrintF("<ID:%d> at <%2.2f, %2.2f, %2.2f> to '%s'\n",
						iEntityID, vPos(1), vPos(2), vPos(3), fnmTargetModel);
					CEntity *penNewClass;
					// create new ModelHolder3
					try {
						CModelInstance *pmi = NULL;
						pmi = ObtainModelInstance_t(fnmTargetModel);
						DeleteModelInstance(pmi);
						penNewClass = pwo->CreateEntity_t(pl, CTFILENAME("Classes\\ModelHolder3.ecl"));
					} catch(char *strError) {
						WarningMessage("<%s>:\n%s", (CTString &)fnmTargetModel, strError);            
						CPrintF("<ID:%d> FAILED!\n----------\n", iEntityID); 
						CPrintF("ABORTING further attempts!....\n"); 
						break;
					}
					// copy all properties
					CModelHolder2 *penOld = penMH2;
					CModelHolder3 *penNew = (CModelHolder3 *)penNewClass;
					penNew->m_fnModel = fnmTargetModel;
					penNew->m_fStretchAll = penOld->m_fStretchAll;
					penNew->m_vStretchXYZ(1) = penOld->m_fStretchX;
					penNew->m_vStretchXYZ(2) = penOld->m_fStretchY;
					penNew->m_vStretchXYZ(3) = penOld->m_fStretchZ;
					penNew->m_strName = penOld->m_strName;
					penNew->m_strDescription = penOld->m_strDescription;
					penNew->m_bColliding = penOld->m_bColliding;
					penNew->m_strModelAnimation = "";
					penNew->m_stClusterShadows = penOld->m_stClusterShadows;
					penNew->m_bBackground = penOld->m_bBackground;
					penNew->m_bTargetable = penOld->m_bTargetable;
					penNew->m_cstCustomShading = penOld->m_cstCustomShading;
					penNew->m_aShadingDirection = penOld->m_aShadingDirection;
					penNew->m_colLight   = penOld->m_colLight  ;
					penNew->m_colAmbient = penOld->m_colAmbient;
					penNew->m_bActive = penOld->m_bActive;
					penNew->m_rMipFadeDistMetric = MipFactor_LogToMetric(penOld->m_fMipFadeDist);
					penNew->m_fMipFadeLenMetric  = MipFactor_LogToMetric(penOld->m_fMipFadeLen + penOld->m_fMipFadeDist) 
																															 - penNew->m_rMipFadeDistMetric;
					penNew->m_bRandomStretch = FALSE;
					penNew->m_fStretchRndXYZ(1) = penOld->m_fStretchRndX;
					penNew->m_fStretchRndXYZ(2) = penOld->m_fStretchRndY;
					penNew->m_fStretchRndXYZ(3) = penOld->m_fStretchRndZ;
					penNew->m_fStretchRndAll = penOld->m_fStretchRndAll; 
					penNew->m_fStretchRandom = penOld->m_fStretchRandom; 
					penNew->m_penDestruction = penOld->m_penDestruction;
					penNew->m_vDamage = penOld->m_vDamage;
					penNew->m_tmLastDamage = penOld->m_tmLastDamage;
					penNew->m_penDestroyTarget = penOld->m_penDestroyTarget;
					penNew->m_penLastDamager   = penOld->m_penLastDamager;
					penNew->m_tmSpraySpawned    = penOld->m_tmSpraySpawned;
					penNew->m_fSprayDamage      = penOld->m_fSprayDamage;  
					penNew->m_penSpray          = penOld->m_penSpray;    
					penNew->m_fMaxDamageAmmount = penOld->m_fMaxDamageAmmount;
					penNew->m_fClassificationStretch = penOld->m_fClassificationStretch;
					penNew->m_colBurning             = penOld->m_colBurning           ; 
					penNew->m_dmtLastDamageType      = penOld->m_dmtLastDamageType    ; 
					penNew->m_fChainSawCutDamage     = penOld->m_fChainSawCutDamage   ; 
					penNew->m_fMaxTessellationLevel  = penOld->m_fMaxTessellationLevel; 
					penNew->SetParent(penOld->GetParent());
					penNew->SetSpawnFlags(penOld->GetSpawnFlags());
					penNew->SetFlags(penOld->GetFlags());
					penNewClass->Initialize();
					// now teleport the new to the new position (needed before setting of the parents)
					penNew->Teleport(penOld->GetPlacement(), FALSE);
					// remap all pointer values of all entities in the world that point to old model
					{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenOther){
						// get the DLL class of this entity
						CDLLEntityClass *pdecDLLClass = itenOther->en_pecClass->ec_pdecDLLClass;
						// if its parent is the entity, change it to new
						if (itenOther->GetParent()==penOld) {
							itenOther->SetParent(penNew);
						}
						// for all classes in hierarchy of this entity
						for(;
						pdecDLLClass!=NULL;
						pdecDLLClass = pdecDLLClass->dec_pdecBase) {
							// for all properties
							for(INDEX iProperty=0; iProperty<pdecDLLClass->dec_ctProperties; iProperty++) {
								CEntityProperty &epProperty = pdecDLLClass->dec_aepProperties[iProperty];                              
								// if the property type is entity pointer
								if (epProperty.ep_eptType == CEntityProperty::EPT_ENTITYPTR) {
									// get the pointer
									CEntityPointer &penPointed = ENTITYPROPERTY(&*itenOther, epProperty.ep_slOffset, CEntityPointer);
									// if it points to the entity to be untargeted
									if (penPointed == penOld) {
										// if entity is AnimationChanger
										if( IsOfClass( itenOther, &CAnimationChanger_DLLClass)) {
											CPrintF("<ID:%d> WARNING! Animation Changer pointing to <%d> is no longer valid!\n", iEntityID, iEntityID);
										}
										penPointed = penNew;                  
									}                  
								}
							}
						}
					}} // end remapping
					// delete the old model
					penOld->Destroy();
					CPrintF("<ID:%d> SUCCESS! new -> (ID:%d)\n----------\n", iEntityID, penNew->en_ulID);          
				}
			}
		}
	}}

/*for (each ModelHolder2 in world = SOURCE)
	{
		// 1st pass
		make ModelHolder3 name = MH3NAME
		if (exists MH3NAME) {
			try creating a mh3 entity = MODEL3
			if (can't) <FAIL>
		} else {
			continue;
		}
		// 2nd pass - convert properties
		copy all possible properties from SOURCE to MODEL3
		// 3rd pass - remap entity pointers from old to new model
		for (ALL entities in world = ENTITY)
		{
			if (ENTITY has a pointer property that points to SOURCE)
			{
				if (ENTITY is AnimationChanger)
				{
					inform user that animations are not valid any more        
				}
				remap pointer to new
			}
		}
	}*/
}

static void ConvertAllMH2ToMH3( void )
{
	// get the world pointer
	CWorld *pwo = (CWorld *)_pShell->GetINDEX("pwoCurrentWorld");
	// if there is no current world
	if (pwo==NULL) {
		CPrintF("Error - no current world.\n");
		return;
	}
	// create the ModelHolder3 entity just to test if it works
	CEntity *penNewClass = NULL;
	CPlacement3D pl = CPlacement3D(FLOAT3D(0.0f, 0.0f, 0.0f),
																 ANGLE3D(0.0f, 0.0f, 0.0f));
	
	_pShell->Execute("WED_DeselectAll();");
	
	CPrintF("\nSearching for ModelHolder2 entities\n----------\n");
	// for all entities in this world
	{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenMH2) {
		if( IsOfClass( itenMH2, &CModelHolder2_DLLClass)) {
			CModelHolder2 *penMH2 = (CModelHolder2*)&*itenMH2;
			INDEX iEntityID = penMH2->en_ulID;
			CTFileName fnmSourceModel = penMH2->m_fnModel;
			CTFileName fnmTargetModel = CTFileName(fnmSourceModel).NoExt() + CTString(".smc");      
			if (FileExists(fnmTargetModel)) {
				FLOAT3D vPos = penMH2->GetPlacement().pl_PositionVector;
				CPrintF("<ID:%d> at <%2.2f, %2.2f, %2.2f>...\n", iEntityID, vPos(1), vPos(2), vPos(3));
				CPrintF("<ID:%d> ...possible substitution '%s'\n", iEntityID, fnmTargetModel);
				CEntity *penNewClass;
				// create new ModelHolder3
				try {
					CModelInstance *pmi = NULL;
					pmi = ObtainModelInstance_t(fnmTargetModel);
					DeleteModelInstance(pmi);
					penNewClass = pwo->CreateEntity_t(pl, CTFILENAME("Classes\\ModelHolder3.ecl"));
				} catch(char *strError) {
					WarningMessage("<%s>:\n%s", (CTString &)fnmTargetModel, strError);            
					CPrintF("<ID:%d> FAILED!\n----------\n", iEntityID); 
					continue;
				}
				// copy all properties
				CModelHolder2 *penOld = penMH2;
				CModelHolder3 *penNew = (CModelHolder3 *)penNewClass;
				penNew->m_fnModel = fnmTargetModel;
				penNew->m_fStretchAll = penOld->m_fStretchAll;
				penNew->m_vStretchXYZ(1) = penOld->m_fStretchX;
				penNew->m_vStretchXYZ(2) = penOld->m_fStretchY;
				penNew->m_vStretchXYZ(3) = penOld->m_fStretchZ;
				penNew->m_strName = penOld->m_strName;
				penNew->m_strDescription = penOld->m_strDescription;
				penNew->m_bColliding = penOld->m_bColliding;
				penNew->m_strModelAnimation = "";
				penNew->m_stClusterShadows = penOld->m_stClusterShadows;
				penNew->m_bBackground = penOld->m_bBackground;
				penNew->m_bTargetable = penOld->m_bTargetable;
				penNew->m_cstCustomShading = penOld->m_cstCustomShading;
				penNew->m_aShadingDirection = penOld->m_aShadingDirection;
				penNew->m_colLight   = penOld->m_colLight  ;
				penNew->m_colAmbient = penOld->m_colAmbient;
				penNew->m_bActive = penOld->m_bActive;
				penNew->m_rMipFadeDistMetric = MipFactor_LogToMetric(penOld->m_fMipFadeDist);
				penNew->m_fMipFadeLenMetric  = MipFactor_LogToMetric(penOld->m_fMipFadeLen + penOld->m_fMipFadeDist) 
					- penNew->m_rMipFadeDistMetric;
				penNew->m_bRandomStretch = FALSE;
				penNew->m_fStretchRndXYZ(1) = penOld->m_fStretchRndX;
				penNew->m_fStretchRndXYZ(2) = penOld->m_fStretchRndY;
				penNew->m_fStretchRndXYZ(3) = penOld->m_fStretchRndZ;
				penNew->m_fStretchRndAll = penOld->m_fStretchRndAll; 
				penNew->m_fStretchRandom = penOld->m_fStretchRandom; 
				penNew->m_penDestruction = penOld->m_penDestruction;
				penNew->m_vDamage = penOld->m_vDamage;
				penNew->m_tmLastDamage = penOld->m_tmLastDamage;
				penNew->m_penDestroyTarget = penOld->m_penDestroyTarget;
				penNew->m_penLastDamager   = penOld->m_penLastDamager;
				penNew->m_tmSpraySpawned    = penOld->m_tmSpraySpawned;
				penNew->m_fSprayDamage      = penOld->m_fSprayDamage;  
				penNew->m_penSpray          = penOld->m_penSpray;    
				penNew->m_fMaxDamageAmmount = penOld->m_fMaxDamageAmmount;
				penNew->m_fClassificationStretch = penOld->m_fClassificationStretch;
				penNew->m_colBurning             = penOld->m_colBurning           ; 
				penNew->m_dmtLastDamageType      = penOld->m_dmtLastDamageType    ; 
				penNew->m_fChainSawCutDamage     = penOld->m_fChainSawCutDamage   ; 
				penNew->m_fMaxTessellationLevel  = penOld->m_fMaxTessellationLevel; 
				penNew->SetParent(penOld->GetParent());
				penNew->SetSpawnFlags(penOld->GetSpawnFlags());
				penNew->SetFlags(penOld->GetFlags());
				penNewClass->Initialize();
				// now teleport the new to the new position (needed before setting of the parents)
				penNew->Teleport(penOld->GetPlacement(), FALSE);
				// remap all pointer values of all entities in the world that point to old model
				{FOREACHINDYNAMICCONTAINER(pwo->wo_cenEntities, CEntity, itenOther){
					// get the DLL class of this entity
					CDLLEntityClass *pdecDLLClass = itenOther->en_pecClass->ec_pdecDLLClass;
					// if its parent is the entity, change it to new
					if (itenOther->GetParent()==penOld) {
						itenOther->SetParent(penNew);
					}
					// for all classes in hierarchy of this entity
					for(;
					pdecDLLClass!=NULL;
					pdecDLLClass = pdecDLLClass->dec_pdecBase) {
						// for all properties
						for(INDEX iProperty=0; iProperty<pdecDLLClass->dec_ctProperties; iProperty++) {
							CEntityProperty &epProperty = pdecDLLClass->dec_aepProperties[iProperty];                            
							// if the property type is entity pointer
							if (epProperty.ep_eptType == CEntityProperty::EPT_ENTITYPTR) {
								// get the pointer
								CEntityPointer &penPointed = ENTITYPROPERTY(&*itenOther, epProperty.ep_slOffset, CEntityPointer);
								// if it points to the entity to be untargeted
								if (penPointed == penOld) {
									// if entity is AnimationChanger
									if( IsOfClass( itenOther, &CAnimationChanger_DLLClass)) {
										CPrintF("<ID:%d> WARNING! Animation Changer pointing to <%d> is no longer valid!\n", iEntityID, iEntityID);
									}
									penPointed = penNew;                  
								}                
							}
						}
					}
				}} // end remapping        
				// delete the old model
				penOld->Destroy();
				CPrintF("<ID:%d> SUCCESS! new (ID:%d)\n----------\n", iEntityID, penNew->en_ulID);          
			}      
		}
	}}
}



void SetPyramidPlateActivateAlpha(CWorld *pwo, INDEX iBlending,
																	TIME tmActivated, TIME tmDeactivated, BOOL bPulsate)
{
	TIME tmNow = _pTimer->CurrentTick();
	TIME tmStop = 2.0f;
	FLOAT fRatio;

	// get alpha
	if( tmNow>tmDeactivated)
	{
		// if plate is deactivated
		if( tmNow>tmDeactivated+tmStop)
		{
			fRatio = 0;
		}
		// if fading out
		else
		{
			fRatio = CalculateRatio(tmNow, tmDeactivated, tmDeactivated+tmStop, 0.0f, 1.0f);
		}
	}
	else if( tmNow>tmActivated)
	{
		// if full visible
		if( tmNow>tmActivated+tmStop)
		{
			fRatio = 1;
		}
		else
		{
			// fade in
			fRatio = CalculateRatio(tmNow, tmActivated, tmActivated+tmStop, 1.0f, 0.0f);
		}
	}
	// not yet activated
	else
	{
		fRatio = 0;
	}
	FLOAT fSinFactor = 1.0f;
	if( bPulsate)
	{
		fSinFactor = Sin((tmNow-tmActivated) * 720.0f)*0.5f+0.5f;
	}
	
	UBYTE ub = UBYTE( fRatio*fSinFactor*255.0f);
	// apply blend or add
	if( pwo->wo_atbTextureBlendings[iBlending].tb_ubBlendingType == STXF_BLEND_ALPHA)
	{
		pwo->wo_atbTextureBlendings[iBlending].tb_colMultiply = C_WHITE|ub;
	}
	else if( pwo->wo_atbTextureBlendings[iBlending].tb_ubBlendingType == STXF_BLEND_ADD)
	{
		pwo->wo_atbTextureBlendings[iBlending].tb_colMultiply = RGBAToColor(ub,ub,ub,255);
	}
}

void SetPyramidMorphRoomAlpha(CWorld *pwo, INDEX iBlending, TIME tmActivated)
{
	TIME tmNow = _pTimer->CurrentTick();
	TIME tmDelta = tmNow-tmActivated;
	FLOAT fRatio;
	FLOAT tmAppear=10.0f;

	if( tmNow<=tmActivated) { return;}
	
	// get alpha
	if( tmNow>=tmActivated+tmAppear)
	{
		fRatio = 1;
	}
	else
	{
		fRatio = CalculateRatio(tmNow, tmActivated, tmActivated+tmAppear, 1.0f, 0.0f);
	}

	FLOAT fSinFactor = Sin(-90+tmDelta*90*(1.0f+tmDelta/tmAppear*4))*0.5f+0.5f;
	//FLOAT fSinFactor = Sin(-90+90*tmDelta)*0.5f+0.5f;
	//UBYTE ub = fSinFactor*255.0f;
	UBYTE ub = UBYTE((fRatio+(1.0f-fRatio)*fSinFactor)*255.0f);

	// apply blend or add
	if( pwo->wo_atbTextureBlendings[iBlending].tb_ubBlendingType == STXF_BLEND_ALPHA)
	{
		pwo->wo_atbTextureBlendings[iBlending].tb_colMultiply = C_WHITE|ub;
	}
	else if( pwo->wo_atbTextureBlendings[iBlending].tb_ubBlendingType == STXF_BLEND_ADD)
	{
		pwo->wo_atbTextureBlendings[iBlending].tb_colMultiply = RGBAToColor(ub,ub,ub,255);
	}
}
		
void CWorldBase_OnWorldInit(CWorld *pwo)
{
	pwo->wo_attTextureTransformations[0].tt_strName = "None";
	pwo->wo_attTextureTransformations[1].tt_strName = "R Extremly Slow";
	pwo->wo_attTextureTransformations[2].tt_strName = "R Very Slow";
	pwo->wo_attTextureTransformations[3].tt_strName = "R Slow";
	pwo->wo_attTextureTransformations[4].tt_strName = "R Medium";
	pwo->wo_attTextureTransformations[5].tt_strName = "R Fast";
	pwo->wo_attTextureTransformations[6].tt_strName = "R Very Fast";
	pwo->wo_attTextureTransformations[7].tt_strName = "R Extremly Fast";

	pwo->wo_attTextureTransformations[8].tt_strName = "Dummy 1";
	pwo->wo_attTextureTransformations[9].tt_strName = "Dummy 2";
	pwo->wo_attTextureTransformations[10].tt_strName = "Dummy 3";

	pwo->wo_attTextureTransformations[11].tt_strName = "Water movement extremly slow";
	pwo->wo_attTextureTransformations[12].tt_strName = "Water movement very slow";
	pwo->wo_attTextureTransformations[13].tt_strName = "Water movement slow";
	pwo->wo_attTextureTransformations[14].tt_strName = "Water movement normal";
	pwo->wo_attTextureTransformations[15].tt_strName = "Water movement fast";
	
	pwo->wo_attTextureTransformations[16].tt_strName = "Stormy sky appearing";

	pwo->wo_attTextureTransformations[17].tt_strName = "Rotation Left 1";
	pwo->wo_attTextureTransformations[18].tt_strName = "Rotation Left 2";
	pwo->wo_attTextureTransformations[19].tt_strName = "Rotation Left 3";
	pwo->wo_attTextureTransformations[20].tt_strName = "Rotation Left 4";
	pwo->wo_attTextureTransformations[21].tt_strName = "Rotation Left 5";
	pwo->wo_attTextureTransformations[22].tt_strName = "Rotation Left 6";
	pwo->wo_attTextureTransformations[23].tt_strName = "Rotation Left 7";
	pwo->wo_attTextureTransformations[24].tt_strName = "Rotation Left 8";
	pwo->wo_attTextureTransformations[25].tt_strName = "Rotation Left 9";
	pwo->wo_attTextureTransformations[26].tt_strName = "Rotation Left 10";

	pwo->wo_attTextureTransformations[27].tt_strName = "Rotation Right 1";
	pwo->wo_attTextureTransformations[28].tt_strName = "Rotation Right 2";
	pwo->wo_attTextureTransformations[29].tt_strName = "Rotation Right 3";
	pwo->wo_attTextureTransformations[30].tt_strName = "Rotation Right 4";
	pwo->wo_attTextureTransformations[31].tt_strName = "Rotation Right 5";
	pwo->wo_attTextureTransformations[32].tt_strName = "Rotation Right 6";
	pwo->wo_attTextureTransformations[33].tt_strName = "Rotation Right 7";
	pwo->wo_attTextureTransformations[34].tt_strName = "Rotation Right 8";
	pwo->wo_attTextureTransformations[35].tt_strName = "Rotation Right 9";
	pwo->wo_attTextureTransformations[36].tt_strName = "Rotation Right 10";

	pwo->wo_attTextureTransformations[37].tt_strName = "D Extremly Slow";
	pwo->wo_attTextureTransformations[38].tt_strName = "D Very Slow";
	pwo->wo_attTextureTransformations[39].tt_strName = "D Slow";
	pwo->wo_attTextureTransformations[40].tt_strName = "D Medium";
	pwo->wo_attTextureTransformations[41].tt_strName = "D Fast";
	pwo->wo_attTextureTransformations[42].tt_strName = "D Very Fast";
	pwo->wo_attTextureTransformations[43].tt_strName = "D Extremly Fast";
	pwo->wo_attTextureTransformations[44].tt_strName = "D Super Fast";
	pwo->wo_attTextureTransformations[45].tt_strName = "D Abnormaly Fast";

// static
	pwo->wo_atbTextureBlendings[0].tb_strName         = "Opaque";
	pwo->wo_atbTextureBlendings[0].tb_ubBlendingType  = STXF_BLEND_OPAQUE;

	pwo->wo_atbTextureBlendings[1].tb_strName         = "Shade";
	pwo->wo_atbTextureBlendings[1].tb_ubBlendingType  = STXF_BLEND_SHADE;

	pwo->wo_atbTextureBlendings[2].tb_strName         = "Blend";
	pwo->wo_atbTextureBlendings[2].tb_ubBlendingType  = STXF_BLEND_ALPHA;

	pwo->wo_atbTextureBlendings[3].tb_strName         = "Add";
	pwo->wo_atbTextureBlendings[3].tb_ubBlendingType  = STXF_BLEND_ADD;
// pulsating
	pwo->wo_atbTextureBlendings[4].tb_strName         = "Shade pulsating";
	pwo->wo_atbTextureBlendings[4].tb_ubBlendingType  = STXF_BLEND_SHADE;
	pwo->wo_atbTextureBlendings[4].tb_colMultiply     = 0x808080FF;

	pwo->wo_atbTextureBlendings[5].tb_strName         = "Blend pulsating full";
	pwo->wo_atbTextureBlendings[5].tb_ubBlendingType  = STXF_BLEND_ALPHA;
	pwo->wo_atbTextureBlendings[5].tb_colMultiply     = C_WHITE|0x80;

	pwo->wo_atbTextureBlendings[6].tb_strName         = "Add pulsating";
	pwo->wo_atbTextureBlendings[6].tb_ubBlendingType  = STXF_BLEND_ADD;
	pwo->wo_atbTextureBlendings[6].tb_colMultiply     = 0x808080FF;

	pwo->wo_atbTextureBlendings[7].tb_strName         = "Blend pulsating half";
	pwo->wo_atbTextureBlendings[7].tb_ubBlendingType  = STXF_BLEND_ALPHA;
	pwo->wo_atbTextureBlendings[7].tb_colMultiply     = C_WHITE|0xC0;

	pwo->wo_atbTextureBlendings[8].tb_strName         = "Wsc blend";
	pwo->wo_atbTextureBlendings[8].tb_ubBlendingType  = STXF_BLEND_ALPHA;
	pwo->wo_atbTextureBlendings[8].tb_colMultiply     = C_WHITE|0x00;

	pwo->wo_atbTextureBlendings[9].tb_strName         = "Wsc shade";
	pwo->wo_atbTextureBlendings[9].tb_ubBlendingType  = STXF_BLEND_SHADE;
	pwo->wo_atbTextureBlendings[9].tb_colMultiply     = C_WHITE|0xFF;

	pwo->wo_atbTextureBlendings[10].tb_strName         = "Pyramid plate appearing";
	pwo->wo_atbTextureBlendings[10].tb_ubBlendingType  = STXF_BLEND_ALPHA;
	pwo->wo_atbTextureBlendings[10].tb_colMultiply     = C_WHITE|0x00;

	pwo->wo_atbTextureBlendings[11].tb_strName         = "Activated plate 1";
	pwo->wo_atbTextureBlendings[11].tb_ubBlendingType  = STXF_BLEND_ADD;
	pwo->wo_atbTextureBlendings[11].tb_colMultiply     = C_BLACK|CT_OPAQUE;

	pwo->wo_atbTextureBlendings[12].tb_strName         = "Activated plate 2";
	pwo->wo_atbTextureBlendings[12].tb_ubBlendingType  = STXF_BLEND_ADD;
	pwo->wo_atbTextureBlendings[12].tb_colMultiply     = C_BLACK|CT_OPAQUE;

	pwo->wo_atbTextureBlendings[13].tb_strName         = "Activated plate 3";
	pwo->wo_atbTextureBlendings[13].tb_ubBlendingType  = STXF_BLEND_ADD;
	pwo->wo_atbTextureBlendings[13].tb_colMultiply     = C_BLACK|CT_OPAQUE;

	pwo->wo_atbTextureBlendings[14].tb_strName         = "Activated plate 4";
	pwo->wo_atbTextureBlendings[14].tb_ubBlendingType  = STXF_BLEND_ADD;
	pwo->wo_atbTextureBlendings[14].tb_colMultiply     = C_BLACK|CT_OPAQUE;

	pwo->wo_atbTextureBlendings[15].tb_strName         = "Activate pyramid morph room";
	pwo->wo_atbTextureBlendings[15].tb_ubBlendingType  = STXF_BLEND_ALPHA;
	pwo->wo_atbTextureBlendings[15].tb_colMultiply     = C_WHITE|0x00;
	
//안태훈 수정 시작	//(Modify Worldbase Overbright to NonOver)(0.1)
	pwo->wo_atbTextureBlendings[16].tb_strName         = "Cloud Shade";
	pwo->wo_atbTextureBlendings[16].tb_ubBlendingType  = STXF_BLEND_MODIFIED_SHADE;
	pwo->wo_atbTextureBlendings[16].tb_colMultiply     = g_colNewGameShadeColor;
//안태훈 수정 끝	//(Modify Worldbase Overbright to NonOver)(0.1)

	pwo->wo_aitIlluminationTypes[0].it_strName = "None";
	pwo->wo_aitIlluminationTypes[1].it_strName = "Vitraj 1";
	pwo->wo_aitIlluminationTypes[2].it_strName = "Vitraj 2";
	pwo->wo_aitIlluminationTypes[3].it_strName = "Vitraj 3";
	pwo->wo_aitIlluminationTypes[4].it_strName = "Lava 1";
	pwo->wo_aitIlluminationTypes[5].it_strName = "Lava 2";
	pwo->wo_aitIlluminationTypes[6].it_strName = "Lava 3";
	pwo->wo_aitIlluminationTypes[7].it_strName = "Misc 1";
	pwo->wo_aitIlluminationTypes[8].it_strName = "Misc 2";
	pwo->wo_aitIlluminationTypes[9].it_strName = "Misc 3";

	// surfaces
	pwo->wo_astSurfaceTypes[0].st_strName = "Marble(indoor)";
	pwo->wo_astSurfaceTypes[0].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[0].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[0].st_fJumpSlopeCos = Cos(45.0f);//0331 원래 45도
	pwo->wo_astSurfaceTypes[0].st_fClimbSlopeCos = Cos(45.0f);//45.0f

	pwo->wo_astSurfaceTypes[1].st_strName = "Block(outdoor)";
	pwo->wo_astSurfaceTypes[1].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[1].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[1].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[1].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[2].st_strName = "Wood(outdoor)";
	pwo->wo_astSurfaceTypes[2].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[2].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[2].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[2].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[3].st_strName = "Sand(indoor)";
	pwo->wo_astSurfaceTypes[3].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[3].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[3].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[3].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[4].st_strName = "Water_shallow(indoor)";
	pwo->wo_astSurfaceTypes[4].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[4].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[4].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[4].st_fClimbSlopeCos = Cos(45.0f);

// 강동민 수정 시작		// 싱글 던젼 용
	pwo->wo_astSurfaceTypes[5].st_strName = "Personal Dungeon(indoor)";
	pwo->wo_astSurfaceTypes[5].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[5].st_fStairsHeight = 0.6f;
	pwo->wo_astSurfaceTypes[5].st_fJumpSlopeCos = Cos(90.0f);
	pwo->wo_astSurfaceTypes[5].st_fClimbSlopeCos = Cos(90.0f);
// 강동민 수정 끝		// 싱글 던젼 용

	/*
	pwo->wo_astSurfaceTypes[0].st_strName = "Standard";
	pwo->wo_astSurfaceTypes[0].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[0].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[0].st_fJumpSlopeCos = Cos(70.0f);//0331 원래 45도
	pwo->wo_astSurfaceTypes[0].st_fClimbSlopeCos = Cos(70.0f);//45.0f

	pwo->wo_astSurfaceTypes[1].st_strName = "Ice";
	pwo->wo_astSurfaceTypes[1].st_fFriction = 0.045f;
	pwo->wo_astSurfaceTypes[1].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[1].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[1].st_fClimbSlopeCos = Cos(5.0f);

	pwo->wo_astSurfaceTypes[2].st_strName = "Standard - no step";
	pwo->wo_astSurfaceTypes[2].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[2].st_fStairsHeight = -0.2f;
	pwo->wo_astSurfaceTypes[2].st_fJumpSlopeCos = Cos(10.0f);
	pwo->wo_astSurfaceTypes[2].st_fClimbSlopeCos = Cos(10.0f);

	pwo->wo_astSurfaceTypes[3].st_strName = "Standard - high stairs";
	pwo->wo_astSurfaceTypes[3].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[3].st_fStairsHeight = 2.0f;
	pwo->wo_astSurfaceTypes[3].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[3].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[4].st_strName = "Ice climbable slope";
	pwo->wo_astSurfaceTypes[4].st_fFriction = 0.05f;
	pwo->wo_astSurfaceTypes[4].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[4].st_fJumpSlopeCos = Cos(15.0f);
	pwo->wo_astSurfaceTypes[4].st_fClimbSlopeCos = Cos(15.0f);

	pwo->wo_astSurfaceTypes[5].st_strName = "Ice sliding slope";
	pwo->wo_astSurfaceTypes[5].st_fFriction = 0.001f;
	pwo->wo_astSurfaceTypes[5].st_fStairsHeight = 0.0f;
	pwo->wo_astSurfaceTypes[5].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[5].st_fClimbSlopeCos = Cos(5.0f);

	pwo->wo_astSurfaceTypes[6].st_strName = "Ice less sliding";
	pwo->wo_astSurfaceTypes[6].st_fFriction = 0.06f;
	pwo->wo_astSurfaceTypes[6].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[6].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[6].st_fClimbSlopeCos = Cos(5.0f);

	pwo->wo_astSurfaceTypes[7].st_strName = "Roller coaster";
	pwo->wo_astSurfaceTypes[7].st_fFriction = 0.1f;
	pwo->wo_astSurfaceTypes[7].st_fStairsHeight = 0.0f;
	pwo->wo_astSurfaceTypes[7].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[7].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[7].st_ulFlags = STF_SLIDEDOWNSLOPE;

	pwo->wo_astSurfaceTypes[8].st_strName = "Lava";
	pwo->wo_astSurfaceTypes[8].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[8].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[8].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[8].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[8].st_iWalkDamageType = DMT_BURNING;
	pwo->wo_astSurfaceTypes[8].st_fWalkDamageAmount = 2.0f;
	pwo->wo_astSurfaceTypes[8].st_tmWalkDamageFrequency = 0.5f;
	
	ASSERT(9==SURFACE_SAND);
	pwo->wo_astSurfaceTypes[9].st_strName = "Sand";
	pwo->wo_astSurfaceTypes[9].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[9].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[9].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[9].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[10].st_strName = "Clibamble Slope";
	pwo->wo_astSurfaceTypes[10].st_fFriction = 2.0f;
	pwo->wo_astSurfaceTypes[10].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[10].st_fJumpSlopeCos = Cos(60.0f);
	pwo->wo_astSurfaceTypes[10].st_fClimbSlopeCos = Cos(60.0f);

	pwo->wo_astSurfaceTypes[11].st_strName = "Standard - no impact";
	pwo->wo_astSurfaceTypes[11].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[11].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[11].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[11].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[11].st_ulFlags = STF_NOIMPACT;

	ASSERT(12==SURFACE_WATER);
	pwo->wo_astSurfaceTypes[12].st_strName = "Water";
	pwo->wo_astSurfaceTypes[12].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[12].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[12].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[12].st_fClimbSlopeCos = Cos(45.0f);

	ASSERT(13==SURFACE_RED_SAND);
	pwo->wo_astSurfaceTypes[13].st_strName = "Red sand";
	pwo->wo_astSurfaceTypes[13].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[13].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[13].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[13].st_fClimbSlopeCos = Cos(45.0f);

	pwo->wo_astSurfaceTypes[14].st_strName = "Ice sliding slope no impact";
	pwo->wo_astSurfaceTypes[14].st_fFriction = 0.001f;
	pwo->wo_astSurfaceTypes[14].st_fStairsHeight = 0.0f;
	pwo->wo_astSurfaceTypes[14].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[14].st_fClimbSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[14].st_ulFlags = STF_NOIMPACT;

	pwo->wo_astSurfaceTypes[15].st_strName = "Roller coaster no impact";
	pwo->wo_astSurfaceTypes[15].st_fFriction = 0.1f;
	pwo->wo_astSurfaceTypes[15].st_fStairsHeight = 0.0f;
	pwo->wo_astSurfaceTypes[15].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[15].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[15].st_ulFlags = STF_SLIDEDOWNSLOPE | STF_NOIMPACT;

	pwo->wo_astSurfaceTypes[16].st_strName = "Standard - high stairs no impact";
	pwo->wo_astSurfaceTypes[16].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[16].st_fStairsHeight = 2.0f;
	pwo->wo_astSurfaceTypes[16].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[16].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[16].st_ulFlags = STF_NOIMPACT;

	ASSERT(17==SURFACE_GRASS);
	pwo->wo_astSurfaceTypes[17].st_strName = "Grass";
	pwo->wo_astSurfaceTypes[17].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[17].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[17].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[17].st_fClimbSlopeCos = Cos(45.0f);

	ASSERT(18==SURFACE_WOOD);
	pwo->wo_astSurfaceTypes[18].st_strName = "Wood";
	pwo->wo_astSurfaceTypes[18].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[18].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[18].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[18].st_fClimbSlopeCos = Cos(45.0f);

	ASSERT(19==SURFACE_GRASS_SLIDING);
	pwo->wo_astSurfaceTypes[19].st_strName = "Grass sliding";
	pwo->wo_astSurfaceTypes[19].st_fFriction = 0.1f;
	pwo->wo_astSurfaceTypes[19].st_fStairsHeight = 0.0f;
	pwo->wo_astSurfaceTypes[19].st_fJumpSlopeCos = Cos(5.0f);
	pwo->wo_astSurfaceTypes[19].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[19].st_ulFlags = STF_SLIDEDOWNSLOPE;

 
	ASSERT(20==SURFACE_GRASS_NOIMPACT);
	pwo->wo_astSurfaceTypes[20].st_strName = "Grass no impact";
	pwo->wo_astSurfaceTypes[20].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[20].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[20].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[20].st_fClimbSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[20].st_ulFlags = STF_NOIMPACT;

	ASSERT(21==SURFACE_SNOW);
	pwo->wo_astSurfaceTypes[21].st_strName = "Snow";
	pwo->wo_astSurfaceTypes[21].st_fFriction = 1.0f;
	pwo->wo_astSurfaceTypes[21].st_fStairsHeight = 1.0f;
	pwo->wo_astSurfaceTypes[21].st_fJumpSlopeCos = Cos(45.0f);
	pwo->wo_astSurfaceTypes[21].st_fClimbSlopeCos = Cos(45.0f);
	*/
	
	// contents
	pwo->wo_actContentTypes[0].ct_strName = "Air";
	pwo->wo_actContentTypes[0].ct_fDensity = 0.0f;
	pwo->wo_actContentTypes[0].ct_fFluidFriction     = 0.0f;
	pwo->wo_actContentTypes[0].ct_fControlMultiplier = 1.0f;
	pwo->wo_actContentTypes[0].ct_fSpeedMultiplier = 1.0f;
	pwo->wo_actContentTypes[0].ct_fDrowningDamageAmount = 10.0f;
	pwo->wo_actContentTypes[0].ct_tmDrowningDamageDelay = 1.0f;
	pwo->wo_actContentTypes[0].ct_ulFlags = CTF_FLYABLE|CTF_BREATHABLE_LUNGS;

	pwo->wo_actContentTypes[1].ct_strName = "Water";
	pwo->wo_actContentTypes[1].ct_fDensity = 1000.0f;
	pwo->wo_actContentTypes[1].ct_fFluidFriction     = 0.0f;
	pwo->wo_actContentTypes[1].ct_fControlMultiplier = 2.0f;
	pwo->wo_actContentTypes[1].ct_fSpeedMultiplier = 0.75f;
	pwo->wo_actContentTypes[1].ct_fDrowningDamageAmount = 10.0f;
	pwo->wo_actContentTypes[1].ct_tmDrowningDamageDelay = 1.0f;
	pwo->wo_actContentTypes[1].ct_ulFlags = CTF_BREATHABLE_GILLS|CTF_SWIMABLE|CTF_FADESPINNING;

	pwo->wo_actContentTypes[2].ct_strName = "Lava";
	pwo->wo_actContentTypes[2].ct_fDensity = 800.0f;
	pwo->wo_actContentTypes[2].ct_fFluidFriction     = 1.0f;
	pwo->wo_actContentTypes[2].ct_fControlMultiplier = 2.0f;
	pwo->wo_actContentTypes[2].ct_fSpeedMultiplier = 0.5f;
	pwo->wo_actContentTypes[2].ct_fDrowningDamageAmount = 0.0f;
	pwo->wo_actContentTypes[2].ct_tmDrowningDamageDelay = 1.0f;
	pwo->wo_actContentTypes[2].ct_iSwimDamageType = DMT_BURNING;
	pwo->wo_actContentTypes[2].ct_fSwimDamageAmount = 50.0f;
	pwo->wo_actContentTypes[2].ct_tmSwimDamageFrequency = 0.25f;
	pwo->wo_actContentTypes[2].ct_ulFlags = CTF_FADESPINNING;

	pwo->wo_actContentTypes[3].ct_strName = "Cold Water";
	pwo->wo_actContentTypes[3].ct_fDensity = 1000.0f;
	pwo->wo_actContentTypes[3].ct_fFluidFriction     = 0.0f;
	pwo->wo_actContentTypes[3].ct_fControlMultiplier = 2.0f;
	pwo->wo_actContentTypes[3].ct_fSpeedMultiplier = 0.75f;
	pwo->wo_actContentTypes[3].ct_fDrowningDamageAmount = 10.0f;
	pwo->wo_actContentTypes[3].ct_tmDrowningDamageDelay = 1.0f;
	pwo->wo_actContentTypes[3].ct_iSwimDamageType = DMT_FREEZING;
	pwo->wo_actContentTypes[3].ct_fSwimDamageAmount = 1.0f;
	pwo->wo_actContentTypes[3].ct_tmSwimDamageDelay = 5.0f;
	pwo->wo_actContentTypes[3].ct_tmSwimDamageFrequency = 1.0f;
	pwo->wo_actContentTypes[3].ct_ulFlags = CTF_BREATHABLE_GILLS|CTF_SWIMABLE|CTF_FADESPINNING;

	pwo->wo_actContentTypes[4].ct_strName = "Spikes";
	pwo->wo_actContentTypes[4].ct_fDensity = 500.0f;
	pwo->wo_actContentTypes[4].ct_fFluidFriction     = 0.5f;
	pwo->wo_actContentTypes[4].ct_fControlMultiplier = 1.0f;
	pwo->wo_actContentTypes[4].ct_fSpeedMultiplier = 0.75f;
	pwo->wo_actContentTypes[4].ct_iKillDamageType = DMT_SPIKESTAB;
	pwo->wo_actContentTypes[4].ct_fKillImmersion = 0.5f;
	pwo->wo_actContentTypes[4].ct_ulFlags = CTF_BREATHABLE_LUNGS|CTF_FADESPINNING;

	pwo->wo_actContentTypes[5].ct_strName = "Desert heat";
	pwo->wo_actContentTypes[5].ct_fDensity = 0.0f;
	pwo->wo_actContentTypes[5].ct_fFluidFriction     = 0.0f;
	pwo->wo_actContentTypes[5].ct_fControlMultiplier = 1.0f;
	pwo->wo_actContentTypes[5].ct_fSpeedMultiplier = 1.0f;
	pwo->wo_actContentTypes[5].ct_iSwimDamageType = DMT_HEAT;
	pwo->wo_actContentTypes[5].ct_fSwimDamageAmount = 10.0f;
	pwo->wo_actContentTypes[5].ct_tmSwimDamageDelay = 10.0f;
	pwo->wo_actContentTypes[5].ct_tmSwimDamageFrequency = 2.0f;
	pwo->wo_actContentTypes[5].ct_ulFlags = CTF_FLYABLE|CTF_BREATHABLE_LUNGS;

	pwo->wo_actContentTypes[6].ct_strName = "Lava (-10HP/SEC)";
	pwo->wo_actContentTypes[6].ct_fDensity = 1000.0f;
	pwo->wo_actContentTypes[6].ct_fFluidFriction     = 0.0f;
	pwo->wo_actContentTypes[6].ct_fControlMultiplier = 2.0f;
	pwo->wo_actContentTypes[6].ct_fSpeedMultiplier = 0.75f;
	pwo->wo_actContentTypes[6].ct_fDrowningDamageAmount = 0.0f;
	pwo->wo_actContentTypes[6].ct_tmDrowningDamageDelay = 1.0f;
	pwo->wo_actContentTypes[6].ct_iSwimDamageType = DMT_BURNING;
	pwo->wo_actContentTypes[6].ct_fSwimDamageAmount = 5.0f;
	pwo->wo_actContentTypes[6].ct_tmSwimDamageFrequency = 0.5f;
	pwo->wo_actContentTypes[6].ct_ulFlags = CTF_SWIMABLE|CTF_FADESPINNING;

	// sound environments FX
	pwo->wo_aetEnvironmentTypes[ 0].et_strName = "Normal";
	pwo->wo_aetEnvironmentTypes[ 0].et_iType = SEFX_NORMAL;

	pwo->wo_aetEnvironmentTypes[ 1].et_strName = "Generic";
	pwo->wo_aetEnvironmentTypes[ 1].et_iType = SEFX_GENERIC;

	pwo->wo_aetEnvironmentTypes[ 2].et_strName = "Small room";
	pwo->wo_aetEnvironmentTypes[ 2].et_iType = SEFX_LIVINGROOM;

	pwo->wo_aetEnvironmentTypes[ 3].et_strName = "Medium room";
	pwo->wo_aetEnvironmentTypes[ 3].et_iType = SEFX_STONEROOM;

	pwo->wo_aetEnvironmentTypes[ 4].et_strName = "Big room";
	pwo->wo_aetEnvironmentTypes[ 4].et_iType = SEFX_AUDITORIUM;

	pwo->wo_aetEnvironmentTypes[ 5].et_strName = "Corridor";
	pwo->wo_aetEnvironmentTypes[ 5].et_iType = SEFX_HALLWAY;

	pwo->wo_aetEnvironmentTypes[ 6].et_strName = "Arena";
	pwo->wo_aetEnvironmentTypes[ 6].et_iType = SEFX_ARENA;

	pwo->wo_aetEnvironmentTypes[ 7].et_strName = "Long corridor";
	pwo->wo_aetEnvironmentTypes[ 7].et_iType = SEFX_STONEHALL;

	pwo->wo_aetEnvironmentTypes[ 8].et_strName = "Small canyon";
	pwo->wo_aetEnvironmentTypes[ 8].et_iType = SEFX_QUARRY;

	pwo->wo_aetEnvironmentTypes[ 9].et_strName = "Big canyon";
	pwo->wo_aetEnvironmentTypes[ 9].et_iType = SEFX_MOUNTAINS;

	pwo->wo_aetEnvironmentTypes[10].et_strName = "Open space";
	pwo->wo_aetEnvironmentTypes[10].et_iType = SEFX_PLAIN;
																
	pwo->wo_aetEnvironmentTypes[11].et_strName = "Cave";
	pwo->wo_aetEnvironmentTypes[11].et_iType = SEFX_CAVE;
																
	pwo->wo_aetEnvironmentTypes[12].et_strName = "Sewers";
	pwo->wo_aetEnvironmentTypes[12].et_iType = SEFX_SEWERPIPE;

	pwo->wo_aetEnvironmentTypes[13].et_strName = "Hangar";
	pwo->wo_aetEnvironmentTypes[13].et_iType = SEFX_HANGAR;

	pwo->wo_aetEnvironmentTypes[14].et_strName = "Forest";
	pwo->wo_aetEnvironmentTypes[14].et_iType = SEFX_FOREST;

	pwo->wo_aetEnvironmentTypes[15].et_strName = "Concert Hall";
	pwo->wo_aetEnvironmentTypes[15].et_iType = SEFX_CONCERTHALL;

	pwo->wo_aetEnvironmentTypes[16].et_strName = "Underwater";
	pwo->wo_aetEnvironmentTypes[16].et_iType = SEFX_UNDERWATER;

	// declare console variables
	_pShell->DeclareSymbol("user void MakeWorldStatistics(void);",  &MakeWorldStatistics);
	_pShell->DeclareSymbol("user void ReoptimizeAllBrushes(void);", &ReoptimizeAllBrushes);
	_pShell->DeclareSymbol("user void DoLevelSafetyChecks(void);", &DoLevelSafetyChecks);
	_pShell->DeclareSymbol("user void ConvertSingleMH2ToMH3(CTString);", &ConvertSingleMH2ToMH3);  
	_pShell->DeclareSymbol("user void ConvertAllMH2ToMH3(void);", &ConvertAllMH2ToMH3);    
	_pShell->DeclareSymbol("user void ConversionCheckForMH2(CTString, INDEX);", &ConversionCheckForMH2);  

}

void CWorldBase_OnWorldRender(CWorld *pwo)
{
	// get current tick
	TIME tmNow = _pTimer->GetLerpedCurrentTick();
	// wrap time to prevent texture coordinates to get unprecise
	tmNow = fmod(tmNow, 600.0f); // (wrap every 10 minutes)

// transformations
//안태훈 수정 시작	//(Add & Modify SSSE Effect)(0.1)
	// right
	pwo->wo_attTextureTransformations[1].tt_mdTransformation.md_fUOffset= 128/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[2].tt_mdTransformation.md_fUOffset= 256/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[3].tt_mdTransformation.md_fUOffset= 512/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[4].tt_mdTransformation.md_fUOffset=1024/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[5].tt_mdTransformation.md_fUOffset=2048/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[6].tt_mdTransformation.md_fUOffset=4096/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[7].tt_mdTransformation.md_fUOffset=8192/1024.0f*tmNow * 0.010f;
	
	// down
	pwo->wo_attTextureTransformations[37].tt_mdTransformation.md_fVOffset= 128/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[38].tt_mdTransformation.md_fVOffset= 256/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[39].tt_mdTransformation.md_fVOffset= 512/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[40].tt_mdTransformation.md_fVOffset=1024/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[41].tt_mdTransformation.md_fVOffset=2048/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[42].tt_mdTransformation.md_fVOffset=4096/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[43].tt_mdTransformation.md_fVOffset=8192/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[44].tt_mdTransformation.md_fVOffset=8192*2/1024.0f*tmNow * 0.010f;
	pwo->wo_attTextureTransformations[45].tt_mdTransformation.md_fVOffset=8192*4/1024.0f*tmNow * 0.010f;
//안태훈 수정 끝	//(Add & Modify SSSE Effect)(0.1)

//안태훈 수정 시작	//(Modify Worldbase Overbright to NonOver)(0.1)
	pwo->wo_atbTextureBlendings[16].tb_colMultiply     = g_colNewGameShadeColor;
//안태훈 수정 끝	//(Modify Worldbase Overbright to NonOver)(0.1)

	CMappingDefinitionUI mdui;
	mdui.mdui_fUStretch = 1.0f;
	mdui.mdui_fVStretch = 1.0f;
	mdui.mdui_fUOffset = 0.0f;
	mdui.mdui_fVOffset = 0.0f;
	// rotations left
	mdui.mdui_aURotation = 8192*1/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*1/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[17].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*2/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*2/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[18].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*4/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*4/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[19].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*8/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*8/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[20].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*16/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*16/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[21].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*32/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*32/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[22].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*64/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*64/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[23].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*128/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*128/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[24].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = 8192*256/1024.0f*tmNow;
	mdui.mdui_aVRotation = 8192*256/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[25].tt_mdTransformation.FromUI(mdui);
	// rotations right
	mdui.mdui_aURotation = -8192*1/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*1/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[27].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*2/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*2/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[28].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*4/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*4/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[29].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*8/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*8/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[30].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*16/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*16/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[31].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*32/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*32/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[32].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*64/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*64/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[33].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*128/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*128/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[34].tt_mdTransformation.FromUI(mdui);
	mdui.mdui_aURotation = -8192*256/1024.0f*tmNow;
	mdui.mdui_aVRotation = -8192*256/1024.0f*tmNow;
	pwo->wo_attTextureTransformations[35].tt_mdTransformation.FromUI(mdui);
// blendings
	FLOAT f = Abs(Sin(tmNow*AngleDeg(180.0f)));
	pwo->wo_atbTextureBlendings[4].tb_colMultiply = RGBAToColor(f*255, f*255, f*255, 255);
	pwo->wo_atbTextureBlendings[5].tb_colMultiply = C_WHITE|UBYTE(255*f);
	pwo->wo_atbTextureBlendings[6].tb_colMultiply = RGBAToColor(f*255, f*255, f*255, 255);
	pwo->wo_atbTextureBlendings[7].tb_colMultiply = C_WHITE|UBYTE(255*Lerp(0.5f, 1.0f, f));

	pwo->wo_attTextureTransformations[11].tt_mdTransformation.md_fUOffset=Sin( tmNow*22)/30;
	pwo->wo_attTextureTransformations[11].tt_mdTransformation.md_fVOffset=Cos( tmNow*26)/35;

	pwo->wo_attTextureTransformations[12].tt_mdTransformation.md_fUOffset=Sin( tmNow*32)/10;
	pwo->wo_attTextureTransformations[12].tt_mdTransformation.md_fVOffset=Cos( tmNow*22)/15;

	pwo->wo_attTextureTransformations[13].tt_mdTransformation.md_fUOffset=Sin( tmNow*15)/7;
	pwo->wo_attTextureTransformations[13].tt_mdTransformation.md_fVOffset=Cos( tmNow*25)/8;

	pwo->wo_attTextureTransformations[14].tt_mdTransformation.md_fUOffset=Sin( tmNow*32)/3;
	pwo->wo_attTextureTransformations[14].tt_mdTransformation.md_fVOffset=Cos( tmNow*22)/3;

	pwo->wo_attTextureTransformations[15].tt_mdTransformation.md_fUOffset=Sin( tmNow*15);
	pwo->wo_attTextureTransformations[15].tt_mdTransformation.md_fVOffset=Cos( tmNow*25);

	// ----------- Obtain world settings controller
	CWorldSettingsController *pwsc = NULL;
	// obtain bcg viewer
	CBackgroundViewer *penBcgViewer = (CBackgroundViewer *) pwo->GetBackgroundViewer();
	if( penBcgViewer != NULL)
	{
		// obtain world settings controller 
		pwsc = (CWorldSettingsController *) &*penBcgViewer->m_penWorldSettingsController;
	}
	
	// ***** Storm effects
	// if world settings controller is valid
	if( pwsc != NULL)
	{
		FLOAT fStormFactor = pwsc->GetStormFactor();
		COLOR colBlend = LerpColor( pwsc->m_colBlendStart, pwsc->m_colBlendStop, fStormFactor);
		pwo->wo_atbTextureBlendings[8].tb_colMultiply = colBlend;

		// set world polygon shading multiplier
		COLOR colShade = LerpColor( pwsc->m_colShadeStart, pwsc->m_colShadeStop, fStormFactor);

		// apply lightning FX
		if( pwsc->m_tmLightningStart != -1)
		{
			FLOAT tmLightningLife = tmNow-pwsc->m_tmLightningStart;
			_aoLightningColor.ao_tmAnimStart = pwsc->m_tmLightningStart;
			COLOR colLightning = _aoLightningColor.GetFrame();
			// calculate lightning power factor
			UBYTE ub = UBYTE( pwsc->m_fLightningPower*255);
			COLOR colFactor = RGBToColor( ub, ub, ub) | CT_OPAQUE;
			colLightning = MulColors( colLightning, colFactor);
			colShade = AddColors( colShade, colLightning);
		}
		pwo->wo_atbTextureBlendings[9].tb_colMultiply = colShade;
	}

	// ***** Pyramid blending effects
	// if world settings controller is valid
	if( pwsc != NULL)
	{
		// set alpha values for switch-controlled pyramid plate activating
		SetPyramidPlateActivateAlpha(pwo, 10, pwsc->m_tmPyramidPlatesStart, 1e6, FALSE);
		SetPyramidPlateActivateAlpha(pwo, 11, pwsc->m_tmActivatedPlate1, pwsc->m_tmDeactivatedPlate1, TRUE);
		SetPyramidPlateActivateAlpha(pwo, 12, pwsc->m_tmActivatedPlate2, pwsc->m_tmDeactivatedPlate2, TRUE);
		SetPyramidPlateActivateAlpha(pwo, 13, pwsc->m_tmActivatedPlate3, pwsc->m_tmDeactivatedPlate3, TRUE);
		SetPyramidPlateActivateAlpha(pwo, 14, pwsc->m_tmActivatedPlate4, pwsc->m_tmDeactivatedPlate4, TRUE);
		// pyramid morph room
		SetPyramidMorphRoomAlpha(pwo, 15, pwsc->m_tmPyramidMorphRoomActivated);
	}
};

void CWorldBase_OnInitClass(void)
{
	// init particle effects
	InitParticles();
	try
	{
		// setup simple model shadow texture
		_toSimpleModelShadow.SetData_t( CTFILENAME("Data\\Textures\\Effects\\Shadow\\SimpleModelShadow.tex"));
		_aoLightningColor.SetData_t( CTFILENAME("Data\\etc\\Lightning.ani"));
		// we will use first animation in .ani file for lightning
		_aoLightningColor.PlayAnim(0, AOF_NORESTART);
	}
	catch(char *strError)
	{
		FatalError(TRANS("Cannot load shadow texture: \n%s"), strError);
	}
}

void CWorldBase_OnEndClass(void)
{
	_aoLightningColor.SetData(NULL);
	_toSimpleModelShadow.SetData_t(CTFileName(""));
	// close particle effects
	CloseParticles();
}

class CFixedForce {
public:
	CTString ff_strName;
	class CForceStrength ff_fsGravity;
	class CForceStrength ff_fsField;
	
	inline CFixedForce(CTString strName,
		FLOAT3D vDirection,
		FLOAT fAcceleration,
		FLOAT fVelocity)
	{
		ff_strName = strName;
		ff_fsGravity.fs_vDirection     =vDirection;
		ff_fsGravity.fs_fAcceleration  =fAcceleration;
		ff_fsGravity.fs_fVelocity      =fVelocity;
	}

};

static CFixedForce affFixedForces[] = 
{
	CFixedForce ("Normal D", FLOAT3D( 0,-1, 0), 30, 70),
	CFixedForce ("Normal U", FLOAT3D( 0,+1, 0), 30, 70),
	CFixedForce ("Normal N", FLOAT3D( 0, 0,-1), 30, 70),
	CFixedForce ("Normal S", FLOAT3D( 0, 0,+1), 30, 70),
	CFixedForce ("Normal E", FLOAT3D(-1, 0, 0), 30, 70),
	CFixedForce ("Normal W", FLOAT3D(+1, 0, 0), 30, 70),
	CFixedForce ("ZeroG",    FLOAT3D(+1, 0, 0), 0, 0),
	CFixedForce ("Unused",   FLOAT3D(+1, 0, 0), 0, 0),
	CFixedForce ("Unused",   FLOAT3D(+1, 0, 0), 0, 0),
	CFixedForce ("Unused",   FLOAT3D(+1, 0, 0), 0, 0),
};
static INDEX ctFixedForces = ARRAYCOUNT(affFixedForces);
extern void GetDefaultForce(INDEX iForce, const FLOAT3D &vPoint, 
		CForceStrength &fsGravity, CForceStrength &fsField)
{
	if (iForce<ctFixedForces) {
		fsGravity = affFixedForces[iForce].ff_fsGravity;
	}
}

void CWorldBase::SetDefaultProperties(void) {
	m_strName = "World Base";
	m_bRaidObject = FALSE ;
	m_RaidEventType = 0;
	m_strDescription = "";
	m_bZoning = FALSE ;
	m_bBackground = FALSE ;
	m_bAnchored = FALSE ;
	m_bCollision = TRUE ;
	m_penGravity0 = NULL;
	m_penGravity1 = NULL;
	m_penGravity2 = NULL;
	m_penGravity3 = NULL;
	m_penGravity4 = NULL;
	m_penGravity5 = NULL;
	m_penGravity6 = NULL;
	m_penGravity7 = NULL;
	m_penGravity8 = NULL;
	m_penGravity9 = NULL;
	m_penFog0 = NULL;
	m_penFog1 = NULL;
	m_penFog2 = NULL;
	m_penFog3 = NULL;
	m_penFog4 = NULL;
	m_penFog5 = NULL;
	m_penFog6 = NULL;
	m_penFog7 = NULL;
	m_penFog8 = NULL;
	m_penFog9 = NULL;
	m_penHaze0 = NULL;
	m_penHaze1 = NULL;
	m_penHaze2 = NULL;
	m_penHaze3 = NULL;
	m_penHaze4 = NULL;
	m_penMirror0 = NULL;
	m_penMirror1 = NULL;
	m_penMirror2 = NULL;
	m_penMirror3 = NULL;
	m_penMirror4 = NULL;
	m_penGradient0 = NULL;
	m_penGradient1 = NULL;
	m_penGradient2 = NULL;
	m_penGradient3 = NULL;
	m_penGradient4 = NULL;
	m_penGradient5 = NULL;
	m_penGradient6 = NULL;
	m_penGradient7 = NULL;
	m_penGradient8 = NULL;
	m_penGradient9 = NULL;
	m_penGradient10 = NULL;
	m_penGradient11 = NULL;
	m_penGradient12 = NULL;
	m_penGradient13 = NULL;
	m_penGradient14 = NULL;
	m_penGradient15 = NULL;
	m_penGradient16 = NULL;
	m_penGradient17 = NULL;
	m_penGradient18 = NULL;
	m_penGradient19 = NULL;
	m_cbClassificationBits = 0;
	m_vbVisibilityBits = 0;
	m_fOpacity = 1.0f;
	m_bRenderReflection = FALSE ;
	CEntity::SetDefaultProperties();
}

#line 1442 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ULONG CWorldBase::GetVisTweaks(void) 
#line 1443 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1444 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return m_cbClassificationBits  | m_vbVisibilityBits ;
#line 1445 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1448 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::IsTargetValid(SLONG slPropertyOffset,CEntity * penTarget) 
#line 1449 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1450 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(penTarget  == NULL )
#line 1451 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1452 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1453 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1455 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ULONG  ulFirst  , ulLast ;
#line 1458 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulFirst  = offsetof  (CWorldBase  , m_penGradient0 );
#line 1459 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulLast  = offsetof  (CWorldBase  , m_penGradient19 );
#line 1460 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(slPropertyOffset  >= ulFirst  && slPropertyOffset  <= ulLast ){
#line 1461 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return IsDerivedFromClass  (penTarget  , & CGradientMarker_DLLClass );
#line 1462 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1465 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulFirst  = offsetof  (CWorldBase  , m_penGravity0 );
#line 1466 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulLast  = offsetof  (CWorldBase  , m_penGravity9 );
#line 1467 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(slPropertyOffset  >= ulFirst  && slPropertyOffset  <= ulLast ){
#line 1468 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return IsDerivedFromClass  (penTarget  , & CGravityMarker_DLLClass ) 
#line 1469 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
|| IsDerivedFromClass  (penTarget  , & CGravityRouter_DLLClass );
#line 1470 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1473 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulFirst  = offsetof  (CWorldBase  , m_penMirror0 );
#line 1474 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulLast  = offsetof  (CWorldBase  , m_penMirror4 );
#line 1475 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(slPropertyOffset  >= ulFirst  && slPropertyOffset  <= ulLast ){
#line 1476 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return IsDerivedFromClass  (penTarget  , & CMirrorMarker_DLLClass );
#line 1477 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1480 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulFirst  = offsetof  (CWorldBase  , m_penFog0 );
#line 1481 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulLast  = offsetof  (CWorldBase  , m_penFog9 );
#line 1482 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(slPropertyOffset  >= ulFirst  && slPropertyOffset  <= ulLast ){
#line 1483 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return IsDerivedFromClass  (penTarget  , & CFogMarker_DLLClass );
#line 1484 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1487 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulFirst  = offsetof  (CWorldBase  , m_penHaze0 );
#line 1488 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
ulLast  = offsetof  (CWorldBase  , m_penHaze4 );
#line 1489 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(slPropertyOffset  >= ulFirst  && slPropertyOffset  <= ulLast ){
#line 1490 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return IsDerivedFromClass  (penTarget  , & CHazeMarker_DLLClass );
#line 1491 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1493 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return CEntity  :: IsTargetValid  (slPropertyOffset  , penTarget );
#line 1494 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1497 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
const CTString & CWorldBase::GetForceName(INDEX iForce) 
#line 1498 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1499 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strDummyName  ("");
#line 1500 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 1501 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGravityMarkers  = & m_penGravity9  - & m_penGravity0  + 1;
#line 1503 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  < ctFixedForces ){
#line 1504 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return affFixedForces  [ iForce  ] . ff_strName ;
#line 1505 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1506 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  - ctFixedForces  <= ctGravityMarkers ){
#line 1507 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CEntity  * pen  = & * (& m_penGravity0 ) [ iForce  - ctFixedForces  ];
#line 1508 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pen  != NULL ){
#line 1509 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pen  -> GetForceName  (0);
#line 1510 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1511 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strMarkerUnused ;
#line 1512 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1514 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1515 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1516 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1517 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1519 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
void CWorldBase::GetForce(INDEX iForce,const FLOAT3D & vPoint,
#line 1520 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CForceStrength & fsGravity,CForceStrength & fsField) 
#line 1521 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1522 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGravityMarkers  = & m_penGravity9  - & m_penGravity0  + 1;
#line 1523 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  < ctFixedForces ){
#line 1524 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsGravity  = affFixedForces  [ iForce  ] . ff_fsGravity ;
#line 1525 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1526 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  - ctFixedForces  < ctGravityMarkers ){
#line 1527 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CEntity  * pen  = & * (& m_penGravity0 ) [ iForce  - ctFixedForces  ];
#line 1528 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pen  != NULL ){
#line 1529 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
pen  -> GetForce  (0 , vPoint  , fsGravity  , fsField );
#line 1530 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return ;
#line 1531 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1532 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1533 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsGravity  . fs_fAcceleration  = 30;
#line 1534 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsGravity  . fs_fVelocity  = 70;
#line 1535 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsGravity  . fs_vDirection  = FLOAT3D (1 , 0 , 0);
#line 1536 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1537 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsField  . fs_fAcceleration  = 0;
#line 1538 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
fsField  . fs_fVelocity  = 0;
#line 1539 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1542 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CEntity * CWorldBase::GetForceController(INDEX iForce) 
#line 1543 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1544 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGravityMarkers  = & m_penGravity9  - & m_penGravity0  + 1;
#line 1545 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  < ctFixedForces ){
#line 1546 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return NULL ;
#line 1547 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1548 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iForce  - ctFixedForces  < ctGravityMarkers ){
#line 1549 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CEntity  * pen  = & * (& m_penGravity0 ) [ iForce  - ctFixedForces  ];
#line 1550 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pen  != NULL ){
#line 1551 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pen  -> GetForceController  (0);
#line 1552 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1553 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1554 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1555 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return NULL ;
#line 1556 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1558 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
const CTString & CWorldBase::GetFogName(INDEX iFog) 
#line 1559 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1560 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctFogMarkers  = & m_penFog9  - & m_penFog0  + 1;
#line 1561 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strDummyName  ("");
#line 1562 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 1563 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iFog  < ctFogMarkers ){
#line 1564 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CFogMarker  * pfm  = (CFogMarker  *) & * (& m_penFog0 ) [ iFog  ];
#line 1565 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pfm  != NULL ){
#line 1566 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pfm  -> GetFogName  ();
#line 1567 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1568 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strMarkerUnused ;
#line 1569 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1570 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1571 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1572 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1574 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::GetFog(INDEX iFog,class CFogParameters & fpFog) 
#line 1575 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1576 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctFogMarkers  = & m_penFog8  - & m_penFog0  + 1;
#line 1577 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iFog  < ctFogMarkers ){
#line 1578 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CFogMarker  * pfm  = (CFogMarker  *) & * (& m_penFog0 ) [ iFog  ];
#line 1579 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pfm  != NULL ){
#line 1580 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
pfm  -> GetFog  (fpFog );
#line 1581 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE ;
#line 1582 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1583 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1584 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1585 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1588 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
const CTString & CWorldBase::GetHazeName(INDEX iHaze) 
#line 1589 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1590 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctHazeMarkers  = & m_penHaze4  - & m_penHaze0  + 1;
#line 1591 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strDummyName  ("");
#line 1592 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 1593 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iHaze  < ctHazeMarkers ){
#line 1594 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CHazeMarker  * pfm  = (CHazeMarker  *) & * (& m_penHaze0 ) [ iHaze  ];
#line 1595 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pfm  != NULL ){
#line 1596 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pfm  -> GetHazeName  ();
#line 1597 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1598 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strMarkerUnused ;
#line 1599 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1600 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1601 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1602 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1605 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::GetHaze(INDEX iHaze,class CHazeParameters & hpHaze,FLOAT3D & vViewDir) 
#line 1606 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1607 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctHazeMarkers  = & m_penHaze4  - & m_penHaze0  + 1;
#line 1608 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iHaze  < ctHazeMarkers ){
#line 1609 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CHazeMarker  * phm  = (CHazeMarker  *) & * (& m_penHaze0 ) [ iHaze  ];
#line 1610 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(phm  != NULL ){
#line 1611 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
phm  -> GetHaze  (hpHaze  , vViewDir );
#line 1612 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE ;
#line 1613 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1614 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1615 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1616 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1619 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
const CTString & CWorldBase::GetMirrorName(INDEX iMirror) 
#line 1620 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1621 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strDummyName  ("");
#line 1622 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 1623 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iMirror  == 0){
#line 1624 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1625 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1627 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
switch(iMirror ){
#line 1628 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 1: {static const CTString str  ("std mirror 1");return str ;};break ;
#line 1629 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 2: {static const CTString str  ("std mirror 2");return str ;};break ;
#line 1630 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 3: {static const CTString str  ("std mirror 3");return str ;};break ;
#line 1631 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 4: {static const CTString str  ("std mirror 4");return str ;};break ;
#line 1632 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 5: {static const CTString str  ("std mirror 5");return str ;};break ;
#line 1633 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 6: {static const CTString str  ("std mirror 6");return str ;};break ;
#line 1634 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 7: {static const CTString str  ("std mirror 7");return str ;};break ;
#line 1635 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
case 8: {static const CTString str  ("std mirror 8");return str ;};break ;
#line 1636 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
default  :{
#line 1637 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
iMirror  -= 9;
#line 1638 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctMirrorMarkers  = & m_penMirror4  - & m_penMirror0  + 1;
#line 1639 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iMirror  < ctMirrorMarkers ){
#line 1640 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CMirrorMarker  * pfm  = (CMirrorMarker  *) & * (& m_penMirror0 ) [ iMirror  ];
#line 1641 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pfm  != NULL ){
#line 1642 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pfm  -> GetMirrorName  ();
#line 1643 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1644 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strMarkerUnused ;
#line 1645 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1646 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1647 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1648 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1649 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1650 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1653 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::GetMirror(INDEX iMirror,class CMirrorParameters & mpMirror) 
#line 1654 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1655 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iMirror  == 0){
#line 1656 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1657 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1658 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iMirror  >= 1 && iMirror  <= 8){
#line 1659 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
mpMirror  . mp_ulFlags  = 0;
#line 1660 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE ;
#line 1661 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1662 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
iMirror  -= 9;
#line 1663 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctMirrorMarkers  = & m_penMirror4  - & m_penMirror0  + 1;
#line 1664 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iMirror  < ctMirrorMarkers ){
#line 1665 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CMirrorMarker  * pmm  = (CMirrorMarker  *) & * (& m_penMirror0 ) [ iMirror  ];
#line 1666 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pmm  != NULL ){
#line 1667 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
pmm  -> GetMirror  (mpMirror );
#line 1668 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE ;
#line 1669 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1670 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1671 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1672 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1675 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
const CTString & CWorldBase::GetGradientName(INDEX iGradient) 
#line 1676 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1677 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGradientMarkers  = & m_penGradient19  - & m_penGradient0  + 1;
#line 1678 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strDummyName  ("");
#line 1679 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
static const CTString strMarkerUnused  ("Marker not set");
#line 1680 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(iGradient  < ctGradientMarkers ){
#line 1681 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CGradientMarker  * pgm  = (CGradientMarker  *) & * (& m_penGradient0 ) [ iGradient  ];
#line 1682 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pgm  != NULL ){
#line 1683 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pgm  -> GetGradientName  ();
#line 1684 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1685 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strMarkerUnused ;
#line 1686 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1687 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1688 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return strDummyName ;
#line 1689 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1691 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
void CWorldBase::UncacheShadowsForGradient(class CGradientMarker * penDiscard) 
#line 1692 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1693 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGradientMarkers  = & m_penGradient19  - & m_penGradient0  + 1;
#line 1694 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
for(INDEX iGradient  = 0;iGradient  < ctGradientMarkers ;iGradient  ++)
#line 1695 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1696 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CGradientMarker  * pgm  = (CGradientMarker  *) & * (& m_penGradient0 ) [ iGradient  ];
#line 1697 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pgm  == penDiscard )
#line 1698 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1699 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CEntity  :: UncacheShadowsForGradient  (iGradient  + 1);
#line 1700 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1701 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1702 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1705 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::GetGradient(INDEX iGradient,class CGradientParameters & fpGradient) 
#line 1706 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1707 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
INDEX ctGradientMarkers  = & m_penGradient19  - & m_penGradient0  + 1;
#line 1708 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if((iGradient  < ctGradientMarkers ) && (iGradient  > 0)){
#line 1709 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
CGradientMarker  * pgm  = (CGradientMarker  *) & * (& m_penGradient0 ) [ iGradient  - 1 ];
#line 1710 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(pgm  != NULL ){
#line 1711 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return pgm  -> GetGradient  (0 , fpGradient );
#line 1712 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1713 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1714 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1715 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1718 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
BOOL CWorldBase::HandleEvent(const CEntityEvent & ee) 
#line 1719 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1721 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(ee  . ee_slEvent  == EVENTCODE_EFirstWorldBase ){
#line 1722 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () | ENF_ZONING );
#line 1723 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_bZoning  = TRUE ;
#line 1724 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () | ENF_ANCHORED );
#line 1725 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_bAnchored  = TRUE ;
#line 1726 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE ;
#line 1727 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1728 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return FALSE ;
#line 1729 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1733 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SLONG CWorldBase::GetUsedMemory(void) 
#line 1734 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1736 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SLONG  slUsedMemory  = sizeof  (CWorldBase ) - sizeof  (CEntity ) + CEntity  :: GetUsedMemory  ();
#line 1738 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
slUsedMemory  += m_strName  . Length  ();
#line 1739 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
slUsedMemory  += m_strDescription  . Length  ();
#line 1740 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return slUsedMemory ;
#line 1741 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}

#line 1745 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
FLOAT CWorldBase::GetOpacity(void) 
#line 1746 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1747 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return m_fOpacity ;
#line 1748 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
BOOL CWorldBase::
#line 1755 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
Main(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CWorldBase_Main
	ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CWorldBase::Main expects 'EVoid' as input!");	const EVoid &evoid = (const EVoid &)__eeInput;
#line 1757 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlagOn  (ENF_MARKDESTROY );
#line 1758 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlagOn  (ENF_NONETCONNECT );
#line 1759 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlagOff  (ENF_PROPSCHANGED );
#line 1761 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlagOff  (ENF_RENDERREFLECTION );
#line 1765 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
InitAsBrush  ();
#line 1768 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(m_bRenderReflection )
#line 1769 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1770 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlagOn  (ENF_RENDERREFLECTION );
#line 1771 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1773 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetPhysicsFlags  (EPF_BRUSH_FIXED );
#line 1775 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(m_bCollision )
#line 1776 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1777 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetCollisionFlags  (ECF_BRUSH );
#line 1778 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1779 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
else 
#line 1780 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
{
#line 1781 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetCollisionFlags  (ECF_MODEL_NO_COLLISION );
#line 1782 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1786 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(m_bZoning ){
#line 1787 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_strDescription  = "zoning";
#line 1788 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () | ENF_ZONING );
#line 1789 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1790 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_strDescription  = "non zoning";
#line 1791 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () & ~ ENF_ZONING );
#line 1792 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1795 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(m_bBackground ){
#line 1796 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_strDescription  += " background";
#line 1797 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () | ENF_BACKGROUND );
#line 1798 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1799 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () & ~ ENF_BACKGROUND );
#line 1800 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1803 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
if(m_bAnchored ){
#line 1804 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
m_strDescription  += " anchored";
#line 1805 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () | ENF_ANCHORED );
#line 1806 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}else {
#line 1807 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
SetFlags  (GetFlags  () & ~ ENF_ANCHORED );
#line 1808 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
}
#line 1810 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
Return(STATE_CURRENT,EVoid());
#line 1810 "C:/Users/pwesty/Desktop/SD-Source/nov-source/Reco_Csrc/EntitiesMP/WorldBase.es"
return TRUE; ASSERT(FALSE); return TRUE;};