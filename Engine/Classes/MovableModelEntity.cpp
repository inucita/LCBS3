/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 6 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"

#include "StdH.h"
#include <Engine/Entities/InternalClasses.h>
#include <Engine/Base/CRC.h>
#include <Engine/Base/Stream.h>
#include <Engine/Base/Console.h>
#include <Engine/Models/ModelObject.h>
#include <Engine/Ska/ModelInstance.h>

#include <Engine/Classes/MovableModelEntity.h>
#include <Engine/Classes/MovableModelEntity_tables.h>
void CMovableModelEntity::SetDefaultProperties(void) {
  en_iCollisionBox = 0;
  en_iWantedCollisionBox = 0;
  CMovableEntity::SetDefaultProperties();
}
  void CMovableModelEntity::PreMoving(void) 
#line 31 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 33 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(en_iCollisionBox  != en_iWantedCollisionBox ){
#line 35 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
ChangeCollisionBoxIndexNow  (en_iWantedCollisionBox );
#line 36 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 38 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: PreMoving  ();
#line 39 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::DoMoving(void) 
#line 41 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 42 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: DoMoving  ();
#line 43 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  INDEX CMovableModelEntity::GetCollisionBoxIndex(void) 
#line 47 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 48 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return en_iCollisionBox ;
#line 49 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::CheckForCollisionNow(INDEX iNewCollisionBox,CEntity * * ppenObstacle) 
#line 53 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 55 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
extern  BOOL CanEntityChangeCollisionBox  (CEntity  * pen  , INDEX iNewCollisionBox  , CEntity  * * ppenObstacle );
#line 56 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return ! CanEntityChangeCollisionBox  (this  , en_iCollisionBox  , ppenObstacle );
#line 57 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::ChangeCollisionBoxIndexNow(INDEX iNewCollisionBox,CEntity * * ppenObstacle) 
#line 61 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 63 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(iNewCollisionBox  == en_iCollisionBox ){
#line 65 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return TRUE ;
#line 66 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 70 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
extern  BOOL CanEntityChangeCollisionBox  (CEntity  * pen  , INDEX iNewCollisionBox  , CEntity  * * ppenObstacle );
#line 71 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
BOOL bCanChange  = CanEntityChangeCollisionBox  (this  , iNewCollisionBox  , ppenObstacle );
#line 74 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(! bCanChange ){
#line 77 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return FALSE ;
#line 78 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 81 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(en_RenderType  == CEntity  :: RT_SKAMODEL  || en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ){
#line 82 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(GetModelInstance  () != NULL ){
#line 84 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
GetModelInstance  () -> SetCurrentColisionBoxIndex  (iNewCollisionBox );
#line 85 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 86 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 88 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
en_iCollisionBox  = iNewCollisionBox ;
#line 89 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 92 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
ModelChangeNotify  ();
#line 95 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return TRUE ;
#line 96 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::ChangeCollisionBoxIndexNow(INDEX iNewCollisionBox) 
#line 100 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 101 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
CEntity  * penDummy ;
#line 102 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return ChangeCollisionBoxIndexNow  (iNewCollisionBox  , & penDummy );
#line 103 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::ForceCollisionBoxIndexChange(INDEX iNewCollisionBox) 
#line 107 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 109 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(en_RenderType  == CEntity  :: RT_SKAMODEL  || en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ){
#line 110 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(GetModelInstance  () != NULL ){
#line 112 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
GetModelInstance  () -> SetCurrentColisionBoxIndex  (iNewCollisionBox );
#line 113 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 114 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
#line 116 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
en_iCollisionBox  = iNewCollisionBox ;
#line 117 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 120 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
ModelChangeNotify  ();
#line 121 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::ChangeCollisionBoxIndexWhenPossible(INDEX iNewCollisionBox) 
#line 125 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 126 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 127 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::Read_t(CTStream * istr,BOOL bNetwork) 
#line 137 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 138 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: Read_t  (istr  , bNetwork );
#line 139 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::Write_t(CTStream * ostr,BOOL bNetwork) 
#line 142 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 143 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: Write_t  (ostr  , bNetwork );
#line 144 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  
#line 147 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
SLONG CMovableModelEntity::GetUsedMemory(void) 
#line 148 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
{
#line 149 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return (sizeof  (CMovableModelEntity ) - sizeof  (CMovableEntity ) + CMovableEntity  :: GetUsedMemory  ());
#line 150 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::DeathNow() {}
BOOL CMovableModelEntity::
#line 158 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
Dummy(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovableModelEntity_Dummy
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovableModelEntity::Dummy expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput; ASSERT(FALSE); return TRUE;};BOOL CMovableModelEntity::
#line 161 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
WaitUntilScheduledAnimStarts(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovableModelEntity_WaitUntilScheduledAnimStarts
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovableModelEntity::WaitUntilScheduledAnimStarts expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 163 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
ASSERT  (en_RenderType  == CEntity  :: RT_MODEL  || en_RenderType  == CEntity  :: RT_EDITORMODEL );
#line 164 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
FLOAT fToWait  = GetModelObject  () -> ao_tmAnimStart  - _pTimer  -> CurrentTick  ();
#line 165 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
if(!(fToWait  > 0)){ Jump(STATE_CURRENT,0x00020004, FALSE, EInternal());return TRUE;}
#line 167 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
SetTimerAfter(fToWait  + _pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x00020002, FALSE, EBegin());return TRUE;}BOOL CMovableModelEntity::H0x00020002_WaitUntilScheduledAnimStarts_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020002
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x00020003, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CMovableModelEntity::H0x00020003_WaitUntilScheduledAnimStarts_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020003
;Jump(STATE_CURRENT,0x00020004, FALSE, EInternal());return TRUE;}BOOL CMovableModelEntity::H0x00020004_WaitUntilScheduledAnimStarts_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020004

#line 169 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
Return(STATE_CURRENT,EReturn  ());
#line 169 "E:/질산/Korea/Client_USA/Engine/Classes/MovableModelEntity.es"
return TRUE; ASSERT(FALSE); return TRUE;};