/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 5 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"

#include "StdH.h"
#include <Engine/Entities/InternalClasses.h>
#include <Engine/Math/Geometry.inl>
#include <Engine/Math/Float.h>
#include <Engine/Base/Stream.h>
#include <Engine/World/World.h>
#include <Engine/Network/CNetwork.h>
#include <Engine/Network/Server.h>
#include <Engine/Network/EntityHashing.h>
#include <Engine/Entities/EntityCollision.h>
#include <Engine/Entities/EntityClass.h>
#include <Engine/Templates/StaticArray.cpp>
#include <Engine/Templates/BSP.h>
#include <Engine/Base/ListIterator.inl>
#include <Engine/World/WorldSettings.h>
#include <Engine/World/WorldCollision.h>
#include <Engine/Math/Clipping.inl>
#include <Engine/Light/LightSource.h>
#include <Engine/Entities/LastPositions.h>
#include <Engine/Templates/StaticStackArray.cpp>
#include <Engine/Templates/DynamicArray.cpp>
#include <Engine/Base/Console.h>
#include <Engine/Base/CRC.h>
#include <Engine/Network/SessionState.h>
#include <Engine/Terrain/Terrain.h>
#define CLEARMEM(var) memset(&var, 0, sizeof(var))


#include <Engine/Classes/MovableEntity.h>
#include <Engine/Classes/MovableEntity_tables.h>
#line 36 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"


#define ANYEXCEPTION  ...
template CStaticStackArray<CBrushPolygon*>;

#define MAXCOLLISIONRETRIES 4*4
extern FLOAT phy_fCollisionCacheAhead;
extern FLOAT phy_fCollisionCacheAround;

//0211
#define AN_LOOPING              (1UL<<0) // looping animation
#define AN_NORESTART            (1UL<<1) // dont restart anim
#define AN_PAUSED				(1UL<<2)
#define AN_CLEAR                (1UL<<3) // do new clear state before adding animation

// force breakpoint (debug)
extern INDEX dbg_bBreak;
// must be in separate function to disable stupid optimizer
extern void Breakpoint(void); 

// add acceleration to velocity
static inline void AddAcceleration(
	FLOAT3D &vCurrentVelocity, const FLOAT3D &vDesiredVelocity, 
	FLOAT fAcceleration, FLOAT fDecceleration)
{
	// if desired velocity is smaller than current velocity
	if (vDesiredVelocity.Length()<vCurrentVelocity.Length()) {
		fAcceleration=fDecceleration;
	}
	// find difference between current and desired velocities
	FLOAT3D vDelta = vDesiredVelocity-vCurrentVelocity;
	// accelerate in the direction of the difference with given maximum acceleration
	FLOAT fDelta = vDelta.Length();
	if (fDelta>fAcceleration) {
		vCurrentVelocity += vDelta*(fAcceleration/fDelta);
	} else {
		vCurrentVelocity = vDesiredVelocity;
	}
}

// add gravity acceleration to velocity along an axis
static inline void AddGAcceleration(
	FLOAT3D &vCurrentVelocity, const FLOAT3D &vGDir, 
	FLOAT fGA, FLOAT fGV)
{
	// disassemble speed
	FLOAT3D vCurrentParallel, vCurrentOrthogonal;
	GetParallelAndNormalComponents(vCurrentVelocity, vGDir, vCurrentOrthogonal, vCurrentParallel);

	// if not already going down at max speed
	if (! (vCurrentOrthogonal%vGDir>=fGV)) {
		// add accelleration to parallel speed
		vCurrentOrthogonal+=vGDir*fGA;

		// if going down at max speed
		if (vCurrentOrthogonal%vGDir>=fGV) {
			// clamp
			vCurrentOrthogonal = vGDir*fGV;
		}
	}

	// assemble speed back
	vCurrentVelocity = vCurrentParallel+vCurrentOrthogonal;
}

// NOTE:
// this is pulled out into a separate function because, otherwise, VC6 generates
// invalid code when optimizing this. no clue why is that so.

#pragma inline_depth(0)
static void CheckAndAddGAcceleration(CMovableEntity *pen, FLOAT3D &vTranslationAbsolute, FLOAT fTickQuantum)
{
	// if there is forcefield involved
	if (pen->en_fForceA>0.01f) {
		// add force acceleration
		FLOAT fGV=pen->en_fForceV*fTickQuantum;
		FLOAT fGA=pen->en_fForceA*fTickQuantum*fTickQuantum;
		AddGAcceleration(vTranslationAbsolute, pen->en_vForceDir, fGA, fGV);
	}
}
#pragma inline_depth()  // see important note above


// add acceleration to velocity, but only along a plane
static inline void AddAccelerationOnPlane(
	FLOAT3D &vCurrentVelocity, const FLOAT3D &vDesiredVelocity, 
	FLOAT fAcceleration, FLOAT fDecceleration,
	const FLOAT3D &vPlaneNormal)
{
	FLOAT3D vCurrentParallel, vCurrentOrthogonal;
	GetParallelAndNormalComponents(vCurrentVelocity, vPlaneNormal, vCurrentOrthogonal, vCurrentParallel);
	FLOAT3D vDesiredParallel;
	GetNormalComponent(vDesiredVelocity, vPlaneNormal, vDesiredParallel);
	AddAcceleration(vCurrentParallel, vDesiredParallel, fAcceleration, fDecceleration);
	vCurrentVelocity = vCurrentParallel+vCurrentOrthogonal;
}

// add acceleration to velocity, for roller-coaster slope -- slow!
static inline void AddAccelerationOnPlane2(
	FLOAT3D &vCurrentVelocity, const FLOAT3D &vDesiredVelocity, 
	FLOAT fAcceleration, FLOAT fDecceleration,
	const FLOAT3D &vPlaneNormal, const FLOAT3D &vGravity)
{
	// get down and horizontal direction
	FLOAT3D vDn;
	GetNormalComponent(vGravity, vPlaneNormal, vDn);
	vDn.Normalize();
	FLOAT3D vRt = vPlaneNormal*vDn;
	vRt.Normalize();

	// add only horizontal acceleration
	FLOAT3D vCurrentParallel, vCurrentOrthogonal;
	GetParallelAndNormalComponents(vCurrentVelocity, vRt, vCurrentParallel, vCurrentOrthogonal);
	FLOAT3D vDesiredParallel;
	GetParallelComponent(vDesiredVelocity, vRt, vDesiredParallel);
	AddAcceleration(vCurrentParallel, vDesiredParallel, fAcceleration, fDecceleration);
	vCurrentVelocity = vCurrentParallel+vCurrentOrthogonal;
}

// max number of retries during movement
static INDEX _ctTryToMoveCheckCounter;
static INDEX _ctSliding;
static FLOAT3D _vSlideOffDir;   // move away direction for sliding
static FLOAT3D _vSlideDir;
static void InitTryToMove(void)
{
	_ctTryToMoveCheckCounter = MAXCOLLISIONRETRIES;
	_ctSliding = 0;
	_vSlideOffDir = FLOAT3D(0,0,0);
	_vSlideDir = FLOAT3D(0,0,0);
}

// array of forces for current entity
class CEntityForce {
public:
	CEntityPointer ef_penEntity;
	INDEX ef_iForceType;
	FLOAT ef_fRatio;    // how much of entity this force gets [0-1]
	inline void Clear(void) {
		ef_penEntity = NULL;
	};
	~CEntityForce(void) {
		Clear();
	};
};                                                            
static CStaticStackArray<CEntityForce> _aefForces;

void ClearMovableEntityCaches(void)
{
	_aefForces.Clear();
}


void CMovableEntity::SetDefaultProperties(void) {
  en_vDesiredTranslationRelative = FLOAT3D(0.0f , 0.0f , 0.0f);
  en_aDesiredRotationRelative = ANGLE3D(0 , 0 , 0);
  en_vCurrentTranslationAbsolute = FLOAT3D(0.0f , 0.0f , 0.0f);
  en_aCurrentRotationAbsolute = ANGLE3D(0 , 0 , 0);
  en_penReference = NULL;
  en_vReferencePlane = FLOAT3D(0.0f , 0.0f , 0.0f);
  en_iReferenceSurface = 0;
  en_penLastValidReference = NULL;
  en_penLastValidReferenceTmp = NULL;
  en_tmLastSignificantVerticalMovement = 0.0f;
  en_tmLastBreathed = 0;
  en_tmMaxHoldBreath = 5.0f;
  en_fDensity = 5000.0f;
  en_tmLastSwimDamage = 0;
  en_iUpContent = 0;
  en_iDnContent = 0;
  en_fImmersionFactor = 1.0f;
  en_vGravityDir = FLOAT3D(0 , - 1 , 0);
  en_fGravityA = 0.0f;
  en_fGravityV = 0.0f;
  en_vForceDir = FLOAT3D(1 , 0 , 0);
  en_fForceA = 0.0f;
  en_fForceV = 0.0f;
  en_tmJumped = -1.0f;
  en_tmMaxJumpControl = 0.5f;
  en_fJumpControlMultiplier = 0.5f;
  en_fAcceleration = 200.0f;
  en_fDeceleration = 40.0f;
  en_fStepUpHeight = 1.0f;
  en_fStepDnHeight = -1.0f;
  en_fBounceDampParallel = 0.5f;
  en_fBounceDampNormal = 0.5f;
  en_fCollisionSpeedLimit = 20.0f;
  en_fCollisionDamageFactor = 20.0f;
  en_boxMovingEstimate = FLOATaabbox3D(FLOAT3D (0 , 0 , 0) , 0.01f);
  en_boxNearCached = FLOATaabbox3D(FLOAT3D (0 , 0 , 0) , 0.01f);
  en_vIntendedTranslation = FLOAT3D(0 , 0 , 0);
  en_mIntendedRotation = FLOATmatrix3D(0);
  en_tmEntityTime = 0.0f;
  m_bReferenceMovingInY = FALSE ;
  m_bReferenceRotatingNonY = FALSE ;
  m_iPlayerRefCounter = 0;
  en_vDesiredTranslationFinal = FLOAT3D(0.0f , 0.0f , 0.0f);
  m_tmMoveStart = 0;
  m_tickMoveStart = 0.0f;
  m_bForceStop = FALSE ;
  m_bBlockDown = FALSE ;
  m_bBlockUp = FALSE ;
  m_bStair = FALSE ;
  m_bFallDownToFloor = FALSE ;
  CRationalEntity::SetDefaultProperties();
}
  
#line 299 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME CMovableEntity::GetLerpedEntityTime() {
#line 300 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return en_tmEntityTime  + _pTimer  -> GetLerpFactor  () * _pTimer  -> TickQuantum ;
#line 301 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  BOOL CMovableEntity::IsActionApplied() {
#line 305 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 306 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::SetActionApplied() {}
  void CMovableEntity::ClearActionApplied() {}
  BOOL CMovableEntity::IsReapplyingActions() {
#line 312 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 313 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::SetReapplyingActions() {}
  void CMovableEntity::ClearReapplyingActions() {}
  void CMovableEntity::StopPlayer() {}
  
#line 319 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::ApplyDeadReckoning() 
#line 320 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 322 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((IsPlayer  () && (_pNetwork  -> IsPlayerLocal  (this ) || _pNetwork  -> IsPlayingDemo  ())) || _pNetwork  -> IsGameFinished  ()){
#line 323 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 324 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
};
#line 326 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D deltaPos  = (en_vDesiredTranslationFinal  - en_plPlacement  . pl_PositionVector );
#line 327 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(deltaPos  . Length  () < 0.5){
#line 328 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vDesiredTranslationFinal  = en_plPlacement  . pl_PositionVector ;
#line 329 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 330 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aCurrentRotationAbsolute  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 331 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsAnimationPlaying  (53)){
#line 332 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 333 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 334 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
NewClearState  (0.4f);
#line 338 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 339 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 341 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  TIME  _tmLocalTick ;
#line 342 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME  tmLerpTime ;
#line 344 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_pNetwork  -> IsPlayingDemo  ()){
#line 345 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
tmLerpTime  = _pNetwork  -> ga_tmNextDemoTick  - _pTimer  -> TickQuantum ;
#line 346 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 349 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
tmLerpTime  = _pTimer  -> CurrentTick  ();
#line 350 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 352 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plSpeed ;
#line 353 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fLerpFactor  = (tmLerpTime  - en_tmLastPlacementTime ) / _pTimer  -> TickQuantum ;
#line 354 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plSpeed  . pl_PositionVector  = en_vCurrentTranslationAbsolute  * _pTimer  -> TickQuantum ;
#line 355 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plSpeed  . pl_OrientationAngle  = en_aCurrentRotationAbsolute  * _pTimer  -> TickQuantum ;
#line 357 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plLerped ;
#line 358 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plLerped  . Extrapolate  (en_plLastPlacementReceived  , plSpeed  , fLerpFactor );
#line 359 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(int  i  = 1;i  <= 3;i  ++){
#line 360 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plLerped  . pl_OrientationAngle  (i ) = WrapAngle  (plLerped  . pl_OrientationAngle  (i ));
#line 361 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plPlacement  . pl_OrientationAngle  (i ) = WrapAngle  (en_plPlacement  . pl_OrientationAngle  (i ));
#line 362 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 364 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D delta  = (plLerped  . pl_OrientationAngle  - en_plPlacement  . pl_OrientationAngle ) + (plLerped  . pl_PositionVector  - en_plPlacement  . pl_PositionVector );
#line 365 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(delta  . Length  () > 0.01){
#line 366 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_plpLastPositions  != NULL ){
#line 367 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plpLastPositions  -> AddPosition  (en_plPlacement  . pl_PositionVector );
#line 368 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 369 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SetPlacement  (plLerped );
#line 370 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 373 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plLerped2 ;
#line 374 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plLerped2  . Extrapolate  (en_plLastPlacementReceived  , plSpeed  , fLerpFactor  - 1);
#line 375 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacement  = plLerped2 ;
#line 377 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector ;
#line 378 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D mRotation ;
#line 379 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
MakeRotationMatrix  (mRotation  , en_plPlacement  . pl_OrientationAngle );
#line 380 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = mRotation ;
#line 382 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClientCacheNearPolygons  ();
#line 384 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 387 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::AdjustDeadReckoning(CPlacement3D plPlacement,CPlacement3D plSpeed,TIME tmNewTime) 
#line 388 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 390 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = plSpeed  . pl_PositionVector ;
#line 391 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aCurrentRotationAbsolute  = plSpeed  . pl_OrientationAngle ;
#line 392 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacementReceived  = plPlacement ;
#line 393 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastPlacementTime  = tmNewTime ;
#line 395 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ApplyDeadReckoning  ();
#line 397 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 400 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::AdjustDeadReckoningNew(CPlacement3D plPlacement,CPlacement3D plSpeed,TIME tmNewTime,FLOAT3D plPlacementFinal) 
#line 401 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 403 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = plSpeed  . pl_PositionVector ;
#line 404 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aCurrentRotationAbsolute  = plSpeed  . pl_OrientationAngle ;
#line 405 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacementReceived  = plPlacement ;
#line 406 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastPlacementTime  = tmNewTime ;
#line 408 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vDesiredTranslationFinal  = plPlacementFinal ;
#line 409 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ApplyDeadReckoning  ();
#line 411 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
   CMovableEntity::CMovableEntity(void) 
#line 416 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 417 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 418 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_apbpoNearPolygons  . SetAllocationStep  (5);
#line 419 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
   CMovableEntity:: ~ CMovableEntity(void) 
#line 422 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 423 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::OnInitialize(const CEntityEvent & eeInput) 
#line 427 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 428 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CRationalEntity  :: OnInitialize  (eeInput );
#line 429 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearTemporaryData  ();
#line 430 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vIntendedTranslation  = FLOAT3D (0 , 0 , 0);
#line 431 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mIntendedRotation  . Diagonal  (1.0f);
#line 432 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxNearCached  = FLOATaabbox3D ();
#line 433 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  = FLOATaabbox3D ();
#line 434 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 437 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> wo_ehEntityHashContainer  . AddEntity  (this );
#line 439 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::OnEnd(void) 
#line 443 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 445 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_lnInMovers  . IsLinked  ()){
#line 446 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_lnInMovers  . Remove  ();
#line 447 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 448 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearTemporaryData  ();
#line 449 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxNearCached  = FLOATaabbox3D ();
#line 450 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  = FLOATaabbox3D ();
#line 451 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CRationalEntity  :: OnEnd  ();
#line 452 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::Copy(CEntity & enOther,ULONG ulFlags) 
#line 455 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 456 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CRationalEntity  :: Copy  (enOther  , ulFlags );
#line 457 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * pmenOther  = (CMovableEntity  *) (& enOther );
#line 459 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearTemporaryData  ();
#line 460 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxNearCached  = FLOATaabbox3D ();
#line 461 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  = FLOATaabbox3D ();
#line 462 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 464 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacement  = pmenOther  -> en_plLastPlacement ;
#line 465 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pmenOther  -> en_lnInMovers  . IsLinked  ()){
#line 466 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 467 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 468 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 470 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::ClearTemporaryData(void) 
#line 471 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 472 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacement  = en_plPlacement ;
#line 474 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector ;
#line 475 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = en_mRotation ;
#line 478 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  = FLOAT3D (0 , 0 , 0);
#line 479 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mAppliedRotation  . Diagonal  (1.0f);
#line 485 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::Read_t(CTStream * istr,BOOL bNetwork) 
#line 489 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 490 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CRationalEntity  :: Read_t  (istr  , bNetwork );
#line 492 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearTemporaryData  ();
#line 495 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(istr  -> PeekID_t  () == CChunkID  ("MENT")){
#line 496 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
istr  -> ExpectID_t  ("MENT");
#line 498 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ibpo ;
#line 499 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* istr ) >> ibpo ;
#line 500 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = GetWorldPolygonPointer  (ibpo );
#line 502 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bAnyNULLs  = FALSE ;
#line 503 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ctbpoNear ;
#line 504 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* istr ) >> ctbpoNear ;
#line 505 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(ctbpoNear  > 0){
#line 506 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_apbpoNearPolygons  . PopAll  ();
#line 507 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_apbpoNearPolygons  . Push  (ctbpoNear );
#line 508 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(INDEX i  = 0;i  < ctbpoNear ;i  ++){
#line 509 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ibpo ;
#line 510 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* istr ) >> ibpo ;
#line 511 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_apbpoNearPolygons  [ i  ] = GetWorldPolygonPointer  (ibpo );
#line 512 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_apbpoNearPolygons  [ i  ] == NULL ){
#line 513 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bAnyNULLs  = TRUE ;
#line 514 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 515 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 516 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bAnyNULLs ){
#line 517 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPrintF  ("NULL saved for near polygon!\n");
#line 518 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_apbpoNearPolygons  . PopAll  ();
#line 519 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 520 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 521 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 524 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bWasMoving ;
#line 525 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* istr ) >> bWasMoving ;
#line 526 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bWasMoving ){
#line 528 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 529 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 532 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> wo_ehEntityHashContainer  . AddEntity  (this );
#line 535 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::Write_t(CTStream * ostr,BOOL bNetwork) 
#line 538 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 539 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CRationalEntity  :: Write_t  (ostr  , bNetwork );
#line 541 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ostr  -> WriteID_t  ("MENT");
#line 543 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ibpo ;
#line 544 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ibpo  = GetWorldPolygonIndex  (en_pbpoStandOn );
#line 545 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* ostr ) << ibpo ;
#line 547 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ctbpoNear  = en_apbpoNearPolygons  . Count  ();
#line 548 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* ostr ) << ctbpoNear ;
#line 549 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(INDEX i  = 0;i  < ctbpoNear ;i  ++){
#line 550 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX ibpo ;
#line 551 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ibpo  = GetWorldPolygonIndex  (en_apbpoNearPolygons  [ i  ]);
#line 552 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* ostr ) << ibpo ;
#line 553 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 557 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(* ostr ) << en_lnInMovers  . IsLinked  ();
#line 558 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  CPlacement3D CMovableEntity::GetLerpedPlacement(void)const 
#line 563 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 565 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fLerpFactor ;
#line 566 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plLerped ;
#line 567 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plSpeed ;
#line 569 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fLerpFactor  = _pTimer  -> GetLerpFactor2  ();
#line 571 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plLerped  . Lerp  (en_plLastPlacement  , en_plPlacement  , fLerpFactor );
#line 573 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return plLerped ;
#line 574 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::AddToMovers(void) 
#line 578 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 579 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! en_lnInMovers  . IsLinked  ()){
#line 580 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> wo_lhMovers  . AddTail  (en_lnInMovers );
#line 584 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsSentOverNet  () && ! IsPlayer  ()){
#line 585 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  CEntityMessage  _emEntityMessage ;
#line 586 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_emEntityMessage  . WritePlacementNotify  (en_ulID  , TRUE );
#line 587 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_pNetwork  -> ga_srvServer  . SendMessage  (_emEntityMessage );
#line 588 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 589 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 590 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::AddToMoversDuringMoving(void) 
#line 593 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 595 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_lnInMovers  . IsLinked  ()){
#line 597 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 598 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 600 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 602 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_FORCEADDED ;
#line 603 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::SetDesiredRotation(const ANGLE3D & aRotation) 
#line 607 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 608 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fRotationDelta ;
#line 609 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fRotationDelta  = fabs  (en_aDesiredRotationRelative  (1) - aRotation  (1)) 
#line 610 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ fabs  (en_aDesiredRotationRelative  (2) - aRotation  (2)) 
#line 611 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ fabs  (en_aDesiredRotationRelative  (3) - aRotation  (3));
#line 613 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  FLOAT ser_fOrientationTreshold ;
#line 614 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_pNetwork  -> IsServer  () && IsSentOverNet  () && ! IsPlayer  () && fRotationDelta  >= ser_fOrientationTreshold ){
#line 615 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  CEntityMessage  _emEntityMessage ;
#line 616 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_emEntityMessage  . WritePlacementNotify  (en_ulID  , TRUE );
#line 617 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_pNetwork  -> ga_srvServer  . SendMessage  (_emEntityMessage );
#line 618 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 620 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = aRotation ;
#line 621 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 622 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  const ANGLE3D & CMovableEntity::GetDesiredRotation(void)const {return en_aDesiredRotationRelative ;}
  void CMovableEntity::SetDesiredTranslation(const FLOAT3D & vTranslation) 
#line 627 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 628 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fTranslationDelta ;
#line 629 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fTranslationDelta  = fabs  (en_vDesiredTranslationRelative  (1) - vTranslation  (1)) 
#line 630 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ fabs  (en_vDesiredTranslationRelative  (2) - vTranslation  (2)) 
#line 631 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ fabs  (en_vDesiredTranslationRelative  (3) - vTranslation  (3));
#line 633 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  FLOAT ser_fPositionTreshold ;
#line 634 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_pNetwork  -> IsServer  () && IsSentOverNet  () && ! IsPlayer  () && fTranslationDelta  >= ser_fPositionTreshold ){
#line 635 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  CEntityMessage  _emEntityMessage ;
#line 636 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_emEntityMessage  . WritePlacementNotify  (en_ulID  , TRUE );
#line 637 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_pNetwork  -> ga_srvServer  . SendMessage  (_emEntityMessage );
#line 638 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 640 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vDesiredTranslationRelative  = vTranslation ;
#line 641 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 642 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  const FLOAT3D & CMovableEntity::GetDesiredTranslation(void)const {return en_vDesiredTranslationRelative ;}
  void CMovableEntity::GiveImpulseTranslationRelative(const FLOAT3D & vImpulseSpeedRelative) 
#line 647 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 648 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plImpulseSpeedAbsolute  (vImpulseSpeedRelative  , ANGLE3D (0 , 0 , 0));
#line 649 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plImpulseSpeedAbsolute  . RelativeToAbsolute  (
#line 650 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D (FLOAT3D (0.0f , 0.0f , 0.0f) , en_plPlacement  . pl_OrientationAngle ));
#line 651 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  += plImpulseSpeedAbsolute  . pl_PositionVector ;
#line 652 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 653 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::GiveImpulseTranslationAbsolute(const FLOAT3D & vImpulseSpeed) 
#line 655 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 656 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  += vImpulseSpeed ;
#line 657 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 658 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::LaunchAsPropelledProjectile(const FLOAT3D & vImpulseSpeedRelative,
#line 661 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity * penLauncher) 
#line 662 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 663 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vDesiredTranslationRelative  = vImpulseSpeedRelative ;
#line 664 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  += vImpulseSpeedRelative  * en_mRotation ;
#line 666 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 667 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::LaunchAsFreeProjectile(const FLOAT3D & vImpulseSpeedRelative,
#line 669 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity * penLauncher) 
#line 670 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 671 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  += vImpulseSpeedRelative  * en_mRotation ;
#line 674 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 675 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::ForceStopTranslation(void) {
#line 679 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vDesiredTranslationRelative  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 680 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 681 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 682 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::ForceStopRotation(void) {
#line 686 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = ANGLE3D (0 , 0 , 0);
#line 687 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aCurrentRotationAbsolute  = ANGLE3D (0 , 0 , 0);
#line 688 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mAppliedRotation  . Diagonal  (1.0f);
#line 689 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::ForceFullStop(void) {
#line 699 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ForceStopTranslation  ();
#line 700 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ForceStopRotation  ();
#line 701 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::FakeJump(const FLOAT3D & vOrgSpeed,const FLOAT3D & vDirection,FLOAT fStrength,
#line 705 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fParallelMultiplier,FLOAT fNormalMultiplier,FLOAT fMaxExitSpeed,TIME tmControl) 
#line 706 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 708 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmJumped  = en_tmEntityTime  - en_tmMaxJumpControl  + tmControl ;
#line 711 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vCurrentNormal ;
#line 712 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vCurrentParallel ;
#line 713 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetParallelAndNormalComponents  (vOrgSpeed  , vDirection  , vCurrentParallel  , vCurrentNormal );
#line 722 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = 
#line 723 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vCurrentParallel  * fParallelMultiplier  + 
#line 724 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vCurrentNormal  * fNormalMultiplier  + 
#line 725 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDirection  * fStrength ;
#line 728 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fLength  = en_vCurrentTranslationAbsolute  . Length  ();
#line 729 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fLength  > fMaxExitSpeed )
#line 730 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 731 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = 
#line 732 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  / fLength  * fMaxExitSpeed ;
#line 733 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 741 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penReference  = NULL ;
#line 742 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 743 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 744 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_iReferenceSurface  = 0;
#line 747 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddToMovers  ();
#line 748 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  ANGLE CMovableEntity::GetRelativeHeading(const FLOAT3D & vDirection) {
#line 754 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fFront  = 
#line 755 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (1) * en_mRotation  (1 , 3) 
#line 756 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (2) * en_mRotation  (2 , 3) 
#line 757 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (3) * en_mRotation  (3 , 3);
#line 759 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fLeft  = 
#line 760 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (1) * en_mRotation  (1 , 1) 
#line 761 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (2) * en_mRotation  (2 , 1) 
#line 762 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (3) * en_mRotation  (3 , 1);
#line 764 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ATan2  (fLeft  , fFront );
#line 765 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  ANGLE CMovableEntity::GetRelativePitch(const FLOAT3D & vDirection) {
#line 767 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (Abs  (vDirection  . Length  () - 1) < 0.001f);
#line 769 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fFront  = 
#line 770 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (1) * en_mRotation  (1 , 3) 
#line 771 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (2) * en_mRotation  (2 , 3) 
#line 772 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- vDirection  (3) * en_mRotation  (3 , 3);
#line 774 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fUp  = 
#line 775 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ vDirection  (1) * en_mRotation  (1 , 2) 
#line 776 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ vDirection  (2) * en_mRotation  (2 , 2) 
#line 777 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
+ vDirection  (3) * en_mRotation  (3 , 2);
#line 779 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ATan2  (fUp  , fFront );
#line 780 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::GetReferenceHeadingDirection(const FLOAT3D & vReference,ANGLE aH,FLOAT3D & vDirection) {
#line 784 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (Abs  (vReference  . Length  () - 1) < 0.001f);
#line 785 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vY  (en_mRotation  (1 , 2) , en_mRotation  (2 , 2) , en_mRotation  (3 , 2));
#line 786 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vX  = (vY  * vReference ) . Normalize  ();
#line 787 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vMZ  = vY  * vX ;
#line 788 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDirection  = - vX  * Sin  (aH ) + vMZ  * Cos  (aH );
#line 789 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::GetHeadingDirection(ANGLE aH,FLOAT3D & vDirection) {
#line 793 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vX  (en_mRotation  (1 , 1) , en_mRotation  (2 , 1) , en_mRotation  (3 , 1));
#line 794 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vZ  (en_mRotation  (1 , 3) , en_mRotation  (2 , 3) , en_mRotation  (3 , 3));
#line 795 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDirection  = - vX  * Sin  (aH ) - vZ  * Cos  (aH );
#line 796 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::GetPitchDirection(ANGLE aH,FLOAT3D & vDirection) {
#line 800 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vY  (en_mRotation  (1 , 2) , en_mRotation  (2 , 2) , en_mRotation  (3 , 2));
#line 801 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vZ  (en_mRotation  (1 , 3) , en_mRotation  (2 , 3) , en_mRotation  (3 , 3));
#line 802 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDirection  = - vZ  * Cos  (aH ) + vY  * Sin  (aH );
#line 803 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 806 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CEntity * CMovableEntity::MiscDamageInflictor(void) 
#line 807 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 810 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penLastValidReference  != NULL ){
#line 811 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return en_penLastValidReference ;
#line 812 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 813 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushSector  * pbsc  = GetFirstSector  ();
#line 814 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pbsc  == NULL ){
#line 815 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return this ;
#line 816 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 817 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return pbsc  -> bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity ;
#line 818 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 819 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 820 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 823 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::UpdateOneSectorForce(CBrushSector & bsc,FLOAT fRatio) 
#line 824 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 826 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fRatio  < 0.01f){
#line 828 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 829 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 830 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iForceType  = bsc  . GetForceType  ();
#line 831 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CEntity  * penEntity  = bsc  . bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity ;
#line 851 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CEntityForce  * pef  = NULL ;
#line 852 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(INDEX iForce  = 0;iForce  < _aefForces  . Count  ();iForce  ++){
#line 853 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penEntity  == _aefForces  [ iForce  ] . ef_penEntity  
#line 854 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& iForceType  == _aefForces  [ iForce  ] . ef_iForceType ){
#line 855 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  = & _aefForces  [ iForce  ];
#line 856 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
break ;
#line 857 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 858 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 861 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pef  == NULL ){
#line 863 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  = _aefForces  . Push  (1);
#line 864 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  -> ef_penEntity  = penEntity ;
#line 865 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  -> ef_iForceType  = iForceType ;
#line 866 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  -> ef_fRatio  = 0.0f;
#line 867 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 868 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pef  -> ef_fRatio  += fRatio ;
#line 869 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 872 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::TestFields(INDEX & iUpContent,INDEX & iDnContent,FLOAT & fImmersionFactor) 
#line 873 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 875 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (en_RenderType  == RT_MODEL  || en_RenderType  == RT_EDITORMODEL  || en_RenderType  == RT_SKAMODEL  || en_RenderType  == RT_SKAEDITORMODEL );
#line 876 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iUpContent  = 0;
#line 877 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iDnContent  = 0;
#line 878 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fUp  = 0.0f;
#line 879 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fDn  = 0.0f;
#line 881 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D & vOffset  = en_plPlacement  . pl_PositionVector ;
#line 882 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D & mRotation  = en_mRotation ;
#line 884 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vMin  = FLOAT3D (0 , en_pciCollisionInfo  -> ci_fMinHeight  , 0);
#line 885 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vMax  = FLOAT3D (0 , en_pciCollisionInfo  -> ci_fMaxHeight  , 0);
#line 886 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vMin  = vMin  * mRotation  + vOffset ;
#line 887 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vMax  = vMax  * mRotation  + vOffset ;
#line 889 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CStaticArray  < CMovingSphere  > & absSpheres  = en_pciCollisionInfo  -> ci_absSpheres ;
#line 890 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINSTATICARRAY  (absSpheres  , CMovingSphere  , itms ){
#line 891 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
itms  -> ms_vRelativeCenter0  = itms  -> ms_vCenter  * mRotation  + vOffset ;
#line 892 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 895 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_aefForces  . PopAll  ();
#line 897 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{FOREACHSRCOFDST  (en_rdSectors  , CBrushSector  , bsc_rsEntities  , pbsc ) 
#line 898 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushSector  & bsc  = * pbsc ;
#line 900 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! bsc  . bsc_pbmBrushMip  -> IsFirstMip  ()){
#line 902 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
continue ;
#line 903 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 905 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CEntity  * penSector  = bsc  . bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity ;
#line 908 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penSector  -> en_RenderType  != RT_BRUSH ){
#line 910 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
continue ;
#line 911 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 914 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
double  dMin  , dMax ;
#line 915 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bsc  . bsc_bspBSPTree  . FindLineMinMax  (FLOATtoDOUBLE  (vMin ) , FLOATtoDOUBLE  (vMax ) , dMin  , dMax );
#line 918 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iContent  = bsc  . GetContentType  ();
#line 919 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(iContent  != 0){
#line 921 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(dMax  > 0.0f && dMin  < 1.0f){
#line 924 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(dMin  < 0.01f){
#line 926 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iDnContent  = iContent ;
#line 927 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fDn  = Max  (fDn  , FLOAT (dMax ));
#line 928 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 930 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(dMax  > 0.99f){
#line 932 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iUpContent  = iContent ;
#line 933 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fUp  = Max  (fUp  , 1 - FLOAT (dMin ));
#line 934 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 935 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 936 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 939 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
UpdateOneSectorForce  (bsc  , dMax  - dMin );
#line 941 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ENDFOR ;}
#line 945 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(iUpContent  == iDnContent ){
#line 947 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = 1.0f;
#line 949 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 951 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(iUpContent  == 0){
#line 952 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = fDn ;
#line 953 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(iDnContent  == 0){
#line 954 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = 1 - fUp ;
#line 955 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 956 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = Max  (fDn  , 1 - fUp );
#line 957 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 959 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fImmersionFactor  < 0.01f){
#line 960 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = 1.0f;
#line 961 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iDnContent  = iUpContent ;
#line 962 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(fImmersionFactor  > 0.99f){
#line 963 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fImmersionFactor  = 1.0f;
#line 964 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iUpContent  = iDnContent ;
#line 965 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 966 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 969 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vGravityA  (0 , 0 , 0);
#line 970 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vGravityV  (0 , 0 , 0);
#line 971 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vForceA  (0 , 0 , 0);
#line 972 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vForceV  (0 , 0 , 0);
#line 973 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fRatioSum  = 0.0f;
#line 975 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{for(INDEX iForce  = 0;iForce  < _aefForces  . Count  ();iForce  ++){
#line 976 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CForceStrength  fsGravity ;
#line 977 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CForceStrength  fsField ;
#line 978 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_aefForces  [ iForce  ] . ef_penEntity  -> GetForce  (
#line 979 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_aefForces  [ iForce  ] . ef_iForceType  , en_plPlacement  . pl_PositionVector  , 
#line 980 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fsGravity  , fsField );
#line 981 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fRatio  = _aefForces  [ iForce  ] . ef_fRatio ;
#line 982 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fRatioSum  += fRatio ;
#line 983 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vGravityA  += fsGravity  . fs_vDirection  * fsGravity  . fs_fAcceleration  * fRatio ;
#line 984 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vGravityV  += fsGravity  . fs_vDirection  * fsGravity  . fs_fVelocity  * fRatio ;
#line 985 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fsField  . fs_fAcceleration  > 0){
#line 986 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vForceA  += fsField  . fs_vDirection  * fsField  . fs_fAcceleration  * fRatio ;
#line 987 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vForceV  += fsField  . fs_vDirection  * fsField  . fs_fVelocity  * fRatio ;
#line 988 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 989 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_aefForces  [ iForce  ] . Clear  ();
#line 990 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}}
#line 991 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fRatioSum  > 0){
#line 992 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vGravityA  /= fRatioSum ;
#line 993 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vGravityV  /= fRatioSum ;
#line 994 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vForceA  /= fRatioSum ;
#line 995 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vForceV  /= fRatioSum ;
#line 996 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 997 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fGravityA  = vGravityA  . Length  ();
#line 998 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_fGravityA  < 0.01f){
#line 999 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fGravityA  = 0;
#line 1000 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1001 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fGravityV  = vGravityV  . Length  ();
#line 1002 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vGravityDir  = vGravityA  / en_fGravityA ;
#line 1003 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1004 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fForceA  = vForceA  . Length  ();
#line 1005 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_fForceA  < 0.01f){
#line 1006 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fForceA  = 0;
#line 1007 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1008 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fForceV  = vForceV  . Length  ();
#line 1009 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vForceDir  = vForceA  / en_fForceA ;
#line 1010 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1011 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_aefForces  . PopAll  ();
#line 1013 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  INDEX sys_iCPUMisc ;
#line 1014 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! sys_iCPUMisc ){
#line 1016 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_pTimer  -> CurrentTick  () > 60.0f && 
#line 1017 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
Abs  (_pTimer  -> CurrentTick  () - floor  (_pTimer  -> CurrentTick  ())) < 0.05f){
#line 1018 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vGravityDir  = - en_vGravityDir ;
#line 1019 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1020 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1021 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1024 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::TestBreathing(CContentType & ctUp) 
#line 1025 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1027 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! (en_ulPhysicsFlags  & (EPF_HASLUNGS  | EPF_HASGILLS ))){
#line 1029 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 1030 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1032 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bCanBreathe  = 
#line 1033 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(ctUp  . ct_ulFlags  & CTF_BREATHABLE_LUNGS ) && (en_ulPhysicsFlags  & EPF_HASLUNGS ) || 
#line 1034 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(ctUp  . ct_ulFlags  & CTF_BREATHABLE_GILLS ) && (en_ulPhysicsFlags  & EPF_HASGILLS );
#line 1035 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME  tmNow  = en_tmEntityTime ;
#line 1036 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME  tmBreathDelay  = tmNow  - en_tmLastBreathed ;
#line 1038 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bCanBreathe ){
#line 1040 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastBreathed  = tmNow ;
#line 1042 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmBreathDelay  > _pTimer  -> TickQuantum  * 2){
#line 1044 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ETakingBreath  eTakingBreath ;
#line 1045 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
eTakingBreath  . fBreathDelay  = tmBreathDelay  / en_tmMaxHoldBreath ;
#line 1046 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendEvent  (eTakingBreath );
#line 1047 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1049 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1051 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmBreathDelay  > en_tmMaxHoldBreath ){
#line 1053 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InflictDirectDamage  (this  , MiscDamageInflictor  () , DMT_DROWNING  , ctUp  . ct_fDrowningDamageAmount  , 
#line 1054 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plPlacement  . pl_PositionVector  , - en_vGravityDir );
#line 1056 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastBreathed  = tmNow  - en_tmMaxHoldBreath  + ctUp  . ct_tmDrowningDamageDelay ;
#line 1057 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1058 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1059 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1060 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::TestContentDamage(CContentType & ctDn,FLOAT fImmersion) 
#line 1061 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1063 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(ctDn  . ct_fSwimDamageAmount  > 0){
#line 1064 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME  tmNow  = _pTimer  -> CurrentTick  ();
#line 1066 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(ctDn  . ct_tmSwimDamageDelay  > 0){
#line 1068 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmNow  - en_tmLastSwimDamage  > ctDn  . ct_tmSwimDamageDelay  + _pTimer  -> TickQuantum ){
#line 1070 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastSwimDamage  = tmNow  + ctDn  . ct_tmSwimDamageDelay ;
#line 1071 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 1072 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1073 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1075 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmNow  - en_tmLastSwimDamage  > ctDn  . ct_tmSwimDamageFrequency ){
#line 1077 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InflictDirectDamage  (this  , MiscDamageInflictor  () , 
#line 1078 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(DamageType ) ctDn  . ct_iSwimDamageType  , ctDn  . ct_fSwimDamageAmount  * fImmersion  , 
#line 1079 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plPlacement  . pl_PositionVector  , - en_vGravityDir );
#line 1080 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastSwimDamage  = tmNow ;
#line 1081 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1082 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1084 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(ctDn  . ct_fKillImmersion  > 0 && fImmersion  >= ctDn  . ct_fKillImmersion  
#line 1085 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& (en_ulFlags  & ENF_ALIVE )){
#line 1087 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InflictDirectDamage  (this  , MiscDamageInflictor  () , 
#line 1088 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(DamageType ) ctDn  . ct_iKillDamageType  , GetHealth  () * 10.0f , 
#line 1089 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plPlacement  . pl_PositionVector  , - en_vGravityDir );
#line 1090 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1091 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1093 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::TestSurfaceDamage(CSurfaceType & stDn) 
#line 1094 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1096 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(stDn  . st_fWalkDamageAmount  > 0){
#line 1097 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TIME  tmNow  = _pTimer  -> CurrentTick  ();
#line 1099 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(stDn  . st_tmWalkDamageDelay  > 0){
#line 1101 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmNow  - en_tmLastSwimDamage  > stDn  . st_tmWalkDamageDelay  + _pTimer  -> TickQuantum ){
#line 1103 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastSwimDamage  = tmNow  + stDn  . st_tmWalkDamageDelay ;
#line 1104 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 1105 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1106 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1108 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(tmNow  - en_tmLastSwimDamage  > stDn  . st_tmWalkDamageFrequency ){
#line 1110 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InflictDirectDamage  (this  , MiscDamageInflictor  () , 
#line 1111 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(DamageType ) stDn  . st_iWalkDamageType  , stDn  . st_fWalkDamageAmount  , 
#line 1112 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plPlacement  . pl_PositionVector  , - en_vGravityDir );
#line 1113 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastSwimDamage  = tmNow ;
#line 1114 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1115 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1116 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1119 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::SendTouchEvent(const CClipMove & cmMove) 
#line 1120 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1121 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ETouch  etouchThis ;
#line 1122 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ETouch  etouchOther ;
#line 1123 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchThis  . penOther  = cmMove  . cm_penHit ;
#line 1124 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchThis  . bThisMoved  = FALSE ;
#line 1125 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchThis  . plCollision  = cmMove  . cm_plClippedPlane ;
#line 1126 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchOther  . penOther  = this ;
#line 1127 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchOther  . bThisMoved  = TRUE ;
#line 1128 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
etouchOther  . plCollision  = cmMove  . cm_plClippedPlane ;
#line 1129 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendEvent  (etouchThis );
#line 1130 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmMove  . cm_penHit  -> SendEvent  (etouchOther );
#line 1131 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1134 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::SendBlockEvent(CClipMove & cmMove) 
#line 1135 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1136 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
EBlock  eBlock ;
#line 1137 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
eBlock  . penOther  = cmMove  . cm_penHit ;
#line 1138 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
eBlock  . plCollision  = cmMove  . cm_plClippedPlane ;
#line 1139 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendEvent  (eBlock );
#line 1140 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsSentOverNet  () && ! IsPlayer  ()){
#line 1141 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  CEntityMessage  _emEntityMessage ;
#line 1142 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_emEntityMessage  . WritePlacementNotify  (en_ulID  , TRUE );
#line 1143 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_pNetwork  -> ga_srvServer  . SendMessage  (_emEntityMessage );
#line 1144 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1145 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1147 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::IsStandingOnPolygon(CBrushPolygon * pbpo) 
#line 1148 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1150 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  == NULL  
#line 1151 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| ! (en_pciCollisionInfo  -> ci_ulFlags  & CIF_CANSTANDONHANDLE )){
#line 1153 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1154 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1157 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pbpoStandOn  -> bpo_pbscSector  -> bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity  -> en_ulCollisionFlags  == 0){
#line 1159 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1160 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1162 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOATplane3D & plPolygon  = pbpo  -> bpo_pbplPlane  -> bpl_plAbsolute ;
#line 1164 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vHandle  = en_plPlacement  . pl_PositionVector ;
#line 1165 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vHandle  (1) += en_pciCollisionInfo  -> ci_fHandleY  * en_mRotation  (1 , 2);
#line 1166 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vHandle  (2) += en_pciCollisionInfo  -> ci_fHandleY  * en_mRotation  (2 , 2);
#line 1167 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vHandle  (3) += en_pciCollisionInfo  -> ci_fHandleY  * en_mRotation  (3 , 2);
#line 1168 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vHandle  -= ((FLOAT3D &) plPolygon ) * en_pciCollisionInfo  -> ci_fHandleR ;
#line 1171 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(plPolygon  . PointDistance  (vHandle ) > 0.01f){
#line 1173 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1174 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1177 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iMajorAxis1  , iMajorAxis2 ;
#line 1178 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetMajorAxesForPlane  (plPolygon  , iMajorAxis1  , iMajorAxis2 );
#line 1181 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CIntersector  isIntersector  (vHandle  (iMajorAxis1 ) , vHandle  (iMajorAxis2 ));
#line 1183 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINSTATICARRAY  (pbpo  -> bpo_abpePolygonEdges  , CBrushPolygonEdge  , itbpePolygonEdge ){
#line 1185 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vVertex0  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex0  -> bvx_vAbsolute ;
#line 1186 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vVertex1  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex1  -> bvx_vAbsolute ;
#line 1188 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
isIntersector  . AddEdge  (
#line 1189 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vVertex0  (iMajorAxis1 ) , vVertex0  (iMajorAxis2 ) , 
#line 1190 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vVertex1  (iMajorAxis1 ) , vVertex1  (iMajorAxis2 ));
#line 1191 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1194 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(isIntersector  . IsIntersecting  ()){
#line 1196 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1198 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1200 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1201 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1202 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1205 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::IsPolygonBelowPoint(CBrushPolygon * pbpo,const FLOAT3D & vPoint,FLOAT fMaxDist) 
#line 1206 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1208 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((pbpo  -> bpo_ulFlags  & BPOF_PASSABLE ) 
#line 1209 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| ! AllowForGroundPolygon  (pbpo )){
#line 1211 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1212 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1215 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOATplane3D & plPolygon  = pbpo  -> bpo_pbplPlane  -> bpl_plAbsolute ;
#line 1218 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fCos  = ((const FLOAT3D &) plPolygon ) % en_vGravityDir ;
#line 1220 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fCos  > - 0.01f){
#line 1222 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1223 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1226 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CSurfaceType  & stReference  = en_pwoWorld  -> wo_astSurfaceTypes  [ pbpo  -> bpo_bppProperties  . bpp_ubSurfaceType  ];
#line 1227 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fCos  >= - stReference  . st_fClimbSlopeCos  && fCos  < 0 
#line 1228 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| stReference  . st_ulFlags  & STF_SLIDEDOWNSLOPE ){
#line 1230 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1231 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1234 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fD  = plPolygon  . PointDistance  (vPoint );
#line 1236 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fD  < - 0.01f){
#line 1238 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1239 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1242 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fDistance  = - fD  / fCos ;
#line 1253 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vProjected  = vPoint  + en_vGravityDir  * fDistance ;
#line 1256 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iMajorAxis1  , iMajorAxis2 ;
#line 1257 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetMajorAxesForPlane  (plPolygon  , iMajorAxis1  , iMajorAxis2 );
#line 1260 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CIntersector  isIntersector  (vProjected  (iMajorAxis1 ) , vProjected  (iMajorAxis2 ));
#line 1262 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINSTATICARRAY  (pbpo  -> bpo_abpePolygonEdges  , CBrushPolygonEdge  , itbpePolygonEdge ){
#line 1264 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vVertex0  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex0  -> bvx_vAbsolute ;
#line 1265 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vVertex1  = itbpePolygonEdge  -> bpe_pbedEdge  -> bed_pbvxVertex1  -> bvx_vAbsolute ;
#line 1267 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
isIntersector  . AddEdge  (
#line 1268 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vVertex0  (iMajorAxis1 ) , vVertex0  (iMajorAxis2 ) , 
#line 1269 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vVertex1  (iMajorAxis1 ) , vVertex1  (iMajorAxis2 ));
#line 1270 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1273 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(isIntersector  . IsIntersecting  ()){
#line 1275 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1277 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1279 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1280 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1281 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  BOOL CMovableEntity::AllowForGroundPolygon(CBrushPolygon * pbpo) 
#line 1285 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1286 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1287 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1290 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::IsSomeNearPolygonBelowPoint(const FLOAT3D & vPoint,FLOAT fMaxDist) 
#line 1291 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1293 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1294 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1297 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::IsSomeSectorPolygonBelowPoint(CBrushSector * pbsc,const FLOAT3D & vPoint,FLOAT fMaxDist) 
#line 1298 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1300 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINSTATICARRAY  (pbsc  -> bsc_abpoPolygons  , CBrushPolygon  , itbpo ){
#line 1301 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushPolygon  * pbpo  = itbpo ;
#line 1303 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsPolygonBelowPoint  (pbpo  , vPoint  , fMaxDist )){
#line 1305 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1306 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1307 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1309 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1310 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1313 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::WouldFallInNextPosition(void) 
#line 1314 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1316 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_fStepDnHeight  < 0){
#line 1318 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1319 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1322 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pbpoStandOn  != NULL  && 
#line 1323 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
IsPolygonBelowPoint  (en_pbpoStandOn  , en_vNextPosition  , en_fStepDnHeight )){
#line 1325 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1326 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1329 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CListHead  lhActiveSectors ;
#line 1331 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CStaticStackArray  < CBrushPolygon  * > & apbpo  = en_apbpoNearPolygons ;
#line 1333 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(INDEX iPolygon  = 0;iPolygon  < apbpo  . Count  ();iPolygon  ++){
#line 1334 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushPolygon  * pbpo  = apbpo  [ iPolygon  ];
#line 1336 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsPolygonBelowPoint  (pbpo  , en_vNextPosition  , en_fStepDnHeight )){
#line 1338 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . RemAll  ();
#line 1339 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1340 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1342 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! pbpo  -> bpo_pbscSector  -> bsc_lnInActiveSectors  . IsLinked  ()){
#line 1344 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . AddTail  (pbpo  -> bpo_pbscSector  -> bsc_lnInActiveSectors );
#line 1345 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1346 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1351 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL  && en_penReference  -> en_RenderType  == RT_BRUSH  
#line 1352 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& ! (en_penReference  -> en_ulFlags  & ENF_ZONING ) 
#line 1353 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& en_penReference  -> en_pbrBrush  != NULL ){
#line 1355 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushMip  * pbmMip  = en_penReference  -> en_pbrBrush  -> GetFirstMip  ();
#line 1357 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINDYNAMICARRAY  (pbmMip  -> bm_abscSectors  , CBrushSector  , itbsc ){
#line 1359 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! itbsc  -> bsc_lnInActiveSectors  . IsLinked  ()){
#line 1361 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . AddTail  (itbsc  -> bsc_lnInActiveSectors );
#line 1362 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1363 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1364 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1367 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{FOREACHSRCOFDST  (en_rdSectors  , CBrushSector  , bsc_rsEntities  , pbsc );
#line 1369 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! pbsc  -> bsc_lnInActiveSectors  . IsLinked  ()){
#line 1371 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . AddTail  (pbsc  -> bsc_lnInActiveSectors );
#line 1372 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1373 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ENDFOR ;}
#line 1376 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bSupportFound  = FALSE ;
#line 1377 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINLIST  (CBrushSector  , bsc_lnInActiveSectors  , lhActiveSectors  , itbsc ){
#line 1378 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushSector  * pbsc  = itbsc ;
#line 1380 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pbsc  -> bsc_pbmBrushMip  -> bm_pbrBrush  -> br_penEntity  -> en_ulFlags  & ENF_ZONING ){
#line 1382 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{FOREACHDSTOFSRC  (pbsc  -> bsc_rsEntities  , CEntity  , en_rdSectors  , pen );
#line 1383 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pen  -> en_RenderType  == CEntity  :: RT_TERRAIN ){
#line 1384 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(TR_IsTerrainBelowPoint  (pen  -> en_ptrTerrain  , en_vNextPosition  , en_fStepDnHeight  , en_vGravityDir )){
#line 1385 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bSupportFound  = TRUE ;
#line 1386 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
goto  out ;
#line 1387 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1388 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
continue ;
#line 1389 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1390 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pen  -> en_RenderType  != CEntity  :: RT_BRUSH  && 
#line 1391 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
pen  -> en_RenderType  != CEntity  :: RT_FIELDBRUSH ){
#line 1392 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
break ;
#line 1393 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1395 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CBrushMip  * pbmMip  = pen  -> en_pbrBrush  -> GetFirstMip  ();
#line 1397 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FOREACHINDYNAMICARRAY  (pbmMip  -> bm_abscSectors  , CBrushSector  , itbscInMip ){
#line 1399 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! itbscInMip  -> bsc_lnInActiveSectors  . IsLinked  ()){
#line 1401 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . AddTail  (itbscInMip  -> bsc_lnInActiveSectors );
#line 1402 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1403 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1404 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ENDFOR ;}
#line 1405 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1407 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(IsSomeSectorPolygonBelowPoint  (itbsc  , en_vNextPosition  , en_fStepDnHeight )){
#line 1409 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bSupportFound  = TRUE ;
#line 1410 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
break ;
#line 1411 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1412 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1413 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
out  :;
#line 1416 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
lhActiveSectors  . RemAll  ();
#line 1419 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ! bSupportFound ;
#line 1420 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1423 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::ClearNextPosition(void) 
#line 1424 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1425 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector ;
#line 1426 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = en_mRotation ;
#line 1427 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1429 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::SetPlacementFromNextPosition(void) 
#line 1430 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1431 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plNew ;
#line 1432 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plNew  . pl_PositionVector  = en_vNextPosition ;
#line 1433 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DecomposeRotationMatrixNoSnap  (plNew  . pl_OrientationAngle  , en_mNextRotation );
#line 1434 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D mRotation ;
#line 1435 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
MakeRotationMatrixFast  (mRotation  , plNew  . pl_OrientationAngle );
#line 1437 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SetPlacement_special  (plNew  , mRotation  , SPIF_NEAR  | SPIF_SKIPMOVEABLECHILDREN );
#line 1440 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{FOREACHINLIST  (CEntity  , en_lnInParent  , en_lhChildren  , itenChild ){
#line 1441 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! _pNetwork  -> IsServer  () || ! (itenChild  -> en_ulPhysicsFlags  & EPF_MOVABLE )){
#line 1442 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
continue ;
#line 1443 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1444 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * penChild  = (CMovableEntity  *) (CEntity  *) itenChild ;
#line 1445 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plNew  = penChild  -> en_plRelativeToParent ;
#line 1446 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
plNew  . RelativeToAbsoluteSmooth  (en_plPlacement );
#line 1447 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
MakeRotationMatrixFast  (penChild  -> en_mNextRotation  , plNew  . pl_OrientationAngle );
#line 1448 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penChild  -> en_vNextPosition  = plNew  . pl_PositionVector ;
#line 1451 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cmMove  (penChild );
#line 1452 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> ClipMove  (cmMove );
#line 1455 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_fMovementFraction  > 1.0f){
#line 1456 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penChild  -> SetPlacement  (plNew );
#line 1457 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1459 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}}
#line 1460 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1462 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::TryToGoUpstairs(const FLOAT3D & vTranslationAbsolute,const CSurfaceType & stHit,
#line 1463 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bHitStairsOrg) 
#line 1464 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1466 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vTranslationHorizontal ;
#line 1467 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetNormalComponent  (vTranslationAbsolute  , en_vGravityDir  , vTranslationHorizontal );
#line 1471 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(vTranslationHorizontal  . Length  () < 0.001f){
#line 1474 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1475 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1476 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vTranslationHorizontalOrg  = vTranslationHorizontal ;
#line 1478 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! bHitStairsOrg ){
#line 1480 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationHorizontal  . Normalize  ();
#line 1481 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationHorizontal  *= 0.5f;
#line 1482 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1485 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPlacement3D plOriginal  = en_plPlacement ;
#line 1488 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fStairsHeight  = 0;
#line 1489 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(stHit  . st_fStairsHeight  > 0){
#line 1490 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fStairsHeight  = Max  (stHit  . st_fStairsHeight  , en_fStepUpHeight );
#line 1491 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(stHit  . st_fStairsHeight  < 0){
#line 1492 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fStairsHeight  = Min  (stHit  . st_fStairsHeight  , en_fStepUpHeight );
#line 1493 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1495 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CContentType  & ctDn  = en_pwoWorld  -> wo_actContentTypes  [ en_iDnContent  ];
#line 1496 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CContentType  & ctUp  = en_pwoWorld  -> wo_actContentTypes  [ en_iUpContent  ];
#line 1499 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bGettingOutOfWater  = FALSE ;
#line 1500 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((ctDn  . ct_ulFlags  & CTF_SWIMABLE ) && ! (ctUp  . ct_ulFlags  & CTF_SWIMABLE ) 
#line 1501 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& en_fImmersionFactor  > 0.3f){
#line 1503 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  != NULL ){
#line 1504 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fStairsHeight  = fStairsHeight  * 2 + en_fImmersionFactor  * 
#line 1505 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(en_pciCollisionInfo  -> ci_fMaxHeight  - en_pciCollisionInfo  -> ci_fMinHeight );
#line 1507 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bGettingOutOfWater  = TRUE ;
#line 1508 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1509 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1512 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D avTranslation  [ 3 ];
#line 1513 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
avTranslation  [ 0 ] = en_vGravityDir  * - fStairsHeight ;
#line 1514 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
avTranslation  [ 1 ] = vTranslationHorizontal ;
#line 1515 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
avTranslation  [ 2 ] = en_vGravityDir  * fStairsHeight ;
#line 1518 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
for(INDEX iStep  = 0;iStep  < 3;iStep  ++){
#line 1519 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bStepOK  = TRUE ;
#line 1521 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector  + avTranslation  [ iStep  ];
#line 1522 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = en_mRotation ;
#line 1524 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cm  (this );
#line 1525 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> ClipMove  (cm );
#line 1528 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cm  . cm_fMovementFraction  < 1.0f){
#line 1530 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iSurfaceHit  = 0;
#line 1531 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bHitStairsNow  = FALSE ;
#line 1532 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cm  . cm_pbpoHit  != NULL ){
#line 1533 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bHitStairsNow  = cm  . cm_pbpoHit  -> bpo_ulFlags  & BPOF_STAIRS ;
#line 1534 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iSurfaceHit  = cm  . cm_pbpoHit  -> bpo_bppProperties  . bpp_ubSurfaceType ;
#line 1535 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1536 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CSurfaceType  & stHit  = en_pwoWorld  -> wo_astSurfaceTypes  [ iSurfaceHit  ];
#line 1540 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vHitPlane  = cm  . cm_plClippedPlane ;
#line 1541 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fPlaneDotG  = vHitPlane  % en_vGravityDir ;
#line 1542 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fPlaneDotGAbs  = Abs  (fPlaneDotG );
#line 1544 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bSlidingAllowed  = (fPlaneDotGAbs  > - 0.01f && fPlaneDotGAbs  < 0.99f) && bHitStairsOrg ;
#line 1546 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bEarlyClipAllowed  = 
#line 1548 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iStep  == 0 || 
#line 1550 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iStep  == 1 && bHitStairsNow  || 
#line 1552 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
iStep  == 2 && 
#line 1553 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(vHitPlane  % en_vGravityDir  < - stHit  . st_fClimbSlopeCos  || 
#line 1554 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bHitStairsNow );
#line 1557 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bEarlyClipAllowed  || bSlidingAllowed ){
#line 1559 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector  + 
#line 1560 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
avTranslation  [ iStep  ] * (cm  . cm_fMovementFraction  * 0.98f);
#line 1561 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bSlidingAllowed  && iStep  != 2){
#line 1562 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vSliding  = cm  . cm_plClippedPlane  . ProjectDirection  (
#line 1563 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
avTranslation  [ iStep  ] * (1.0f - cm  . cm_fMovementFraction )) + 
#line 1564 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vHitPlane  * (ClampUp  (avTranslation  [ iStep  ] . Length  () , 0.5f) / 100.0f);
#line 1565 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  += vSliding ;
#line 1566 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1567 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cm  (this );
#line 1568 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> ClipMove  (cm );
#line 1570 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cm  . cm_fMovementFraction  <= 1.0f){
#line 1572 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bStepOK  = FALSE ;
#line 1573 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1575 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1577 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bStepOK  = FALSE ;
#line 1578 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1579 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1582 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bStepOK ){
#line 1584 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SetPlacementFromNextPosition  ();
#line 1586 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1588 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = plOriginal  . pl_PositionVector ;
#line 1589 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SetPlacementFromNextPosition  ();
#line 1592 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1593 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1595 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1601 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! bGettingOutOfWater ){
#line 1602 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  += vTranslationHorizontalOrg ;
#line 1603 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1606 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1607 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 1610 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL CMovableEntity::TryToMove(CMovableEntity * penPusher,BOOL bTranslate,BOOL bRotate) 
#line 1611 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1614 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penPusher  != NULL ){
#line 1615 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctTryToMoveCheckCounter  --;
#line 1616 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1617 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctTryToMoveCheckCounter  -= 4;
#line 1618 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1620 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_ctTryToMoveCheckCounter  < 0){
#line 1622 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1623 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1625 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bTranslate ){
#line 1626 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector  + en_vMoveTranslation ;
#line 1628 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1629 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vNextPosition  = en_plPlacement  . pl_PositionVector ;
#line 1630 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1631 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bRotate ){
#line 1633 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = en_mMoveRotation  * en_mRotation ;
#line 1634 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1635 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mNextRotation  = en_mRotation ;
#line 1636 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1639 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ULONG  ulCIFlags  = en_pciCollisionInfo  -> ci_ulFlags ;
#line 1640 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bIgnoreRotation  = ! bRotate  || 
#line 1641 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((ulCIFlags  & CIF_IGNOREROTATION ) || 
#line 1642 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((ulCIFlags  & CIF_IGNOREHEADING ) && 
#line 1643 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(en_mMoveRotation  (1 , 2) == 0 && en_mMoveRotation  (2 , 2) == 1 && en_mMoveRotation  (3 , 2) == 0)));
#line 1646 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cmMove  (this );
#line 1648 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! bTranslate  && bIgnoreRotation ){
#line 1649 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmMove  . cm_fMovementFraction  = 2.0f;
#line 1650 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1651 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pwoWorld  -> ClipMove  (cmMove );
#line 1652 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1655 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_fMovementFraction  > 1.0f){
#line 1659 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bTranslate  && en_penReference  != NULL  && 
#line 1660 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(en_ulPhysicsFlags  & EPF_TRANSLATEDBYGRAVITY ) && 
#line 1661 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
! (en_ulPhysicsFlags  & (EPF_ONSTEEPSLOPE  | EPF_ORIENTINGTOGRAVITY  | EPF_FLOATING )) && 
#line 1662 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penPusher  == NULL  && WouldFallInNextPosition  ()){
#line 1664 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendEvent  (EWouldFall  ());
#line 1666 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1667 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1669 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SetPlacementFromNextPosition  ();
#line 1671 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bTranslate ){
#line 1672 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penPusher  == NULL ){
#line 1673 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  += en_vMoveTranslation ;
#line 1674 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(m_iPlayerRefCounter  == 0){
#line 1675 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  += en_vMoveTranslation ;
#line 1676 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1677 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1679 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(m_iPlayerRefCounter  > 0){
#line 1680 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_iPlayerRefCounter  --;
#line 1681 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1683 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bRotate ){
#line 1684 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mAppliedRotation  = en_mMoveRotation  * en_mAppliedRotation ;
#line 1685 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1688 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TRUE ;
#line 1691 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1692 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(m_bFallDownToFloor )
#line 1693 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1694 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bFallDownToFloor  = FALSE ;
#line 1695 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1698 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_ctTryToMoveCheckCounter  <= 0){
#line 1700 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1701 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1704 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_pbpoHit  != NULL ){
#line 1706 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((cmMove  . cm_pbpoHit  -> bpo_ulFlags  & BPOF_STAIRS ) 
#line 1707 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& ((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_CLIMBORSLIDE )){
#line 1710 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmMove  . cm_plClippedPlane  = FLOATplane3D (- en_vGravityDir  , 0);
#line 1711 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1714 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
INDEX iSurface  = cmMove  . cm_pbpoHit  -> bpo_bppProperties  . bpp_ubSurfaceType ;
#line 1715 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pwoWorld  -> wo_astSurfaceTypes  [ iSurface  ] . st_ulFlags  & STF_NOIMPACT ){
#line 1717 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_NOIMPACTTHISTICK ;
#line 1718 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1719 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1723 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_TRANSLATEDBYGRAVITY ) && ! (en_ulPhysicsFlags  & EPF_FLOATING ) 
#line 1724 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& (
#line 1725 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_vGravityDir  % (FLOAT3D &) cmMove  . cm_plClippedPlane ) 
#line 1726 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
< (en_vGravityDir  % en_vReferencePlane )))){
#line 1728 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penReference  = cmMove  . cm_penHit ;
#line 1731 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  = (FLOAT3D &) cmMove  . cm_plClippedPlane ;
#line 1733 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = cmMove  . cm_pbpoHit ;
#line 1735 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_pbpoHit  == NULL ){
#line 1736 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_iReferenceSurface  = 0;
#line 1737 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1738 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_iReferenceSurface  = cmMove  . cm_pbpoHit  -> bpo_bppProperties  . bpp_ubSurfaceType ;
#line 1739 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1740 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1748 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_penHit  -> en_ulPhysicsFlags  & EPF_NOIMPACT ){
#line 1750 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_NOIMPACTTHISTICK ;
#line 1751 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1754 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vBounce ;
#line 1755 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bBounce  = FALSE ;
#line 1756 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_BOUNCE ) && bTranslate ){
#line 1758 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vParallel  , vNormal ;
#line 1759 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetParallelAndNormalComponents  (en_vMoveTranslation  , cmMove  . cm_plClippedPlane  , 
#line 1760 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vNormal  , vParallel );
#line 1761 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vNormal  *= - en_fBounceDampNormal ;
#line 1762 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vParallel  *= + en_fBounceDampParallel ;
#line 1763 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vBounce  = vNormal  + vParallel ;
#line 1765 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(vNormal  . Length  () > 0.1f){
#line 1767 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bBounce  = TRUE ;
#line 1768 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1770 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  *= en_fBounceDampParallel ;
#line 1771 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_aDesiredRotationRelative  . Length  () < 10){
#line 1772 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = ANGLE3D (0 , 0 , 0);
#line 1773 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1774 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1777 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penPusher  != NULL  && (cmMove  . cm_penHit  -> en_ulPhysicsFlags  & EPF_PUSHABLE )){
#line 1778 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableModelEntity  * penBlocking  = ((CMovableModelEntity  *) cmMove  . cm_penHit );
#line 1780 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vRadius  = cmMove  . cm_penHit  -> en_plPlacement  . pl_PositionVector  - 
#line 1781 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penPusher  -> en_plPlacement  . pl_PositionVector ;
#line 1782 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vPush  = (vRadius  * penPusher  -> en_mMoveRotation  - vRadius );
#line 1784 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vPush  += penPusher  -> en_vMoveTranslation ;
#line 1787 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penBlocking  -> en_vMoveTranslation  = vPush ;
#line 1788 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penBlocking  -> en_mMoveRotation  = penPusher  -> en_mMoveRotation ;
#line 1791 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penBlocking  -> AddToMoversDuringMoving  ();
#line 1793 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bUnblocked  = penBlocking  -> TryToMove  (penPusher  , bTranslate  , bRotate );
#line 1795 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bUnblocked ){
#line 1797 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1798 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return TryToMove  (penPusher  , bTranslate  , bRotate );
#line 1799 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1801 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendBlockEvent  (cmMove );
#line 1802 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1803 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1804 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1806 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(
#line 1807 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_SLIDE ) || 
#line 1808 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_BOUNCE ) || 
#line 1809 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_CLIMBORSLIDE ) || 
#line 1810 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_STOPEXACT )){
#line 1813 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bTranslate ){
#line 1816 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vSliding ;
#line 1818 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_ctSliding  == 0){
#line 1820 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideOffDir  = cmMove  . cm_plClippedPlane ;
#line 1822 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vSliding  = cmMove  . cm_plClippedPlane  . ProjectDirection  (
#line 1823 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  * (1.0f - cmMove  . cm_fMovementFraction ));
#line 1825 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctSliding  ++;
#line 1827 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(_ctSliding  == 1){
#line 1829 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideOffDir  += cmMove  . cm_plClippedPlane ;
#line 1831 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideDir  = _vSlideOffDir  * (FLOAT3D &) cmMove  . cm_plClippedPlane ;
#line 1832 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(_vSlideDir  . Length  () > 0.001f){
#line 1833 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideDir  . Normalize  ();
#line 1834 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1835 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctSliding  ++;
#line 1837 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetParallelComponent  (en_vMoveTranslation  * (1.0f - cmMove  . cm_fMovementFraction ) , 
#line 1838 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideDir  , vSliding );
#line 1840 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1842 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideOffDir  += cmMove  . cm_plClippedPlane ;
#line 1844 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideDir  = cmMove  . cm_plClippedPlane  . ProjectDirection  (_vSlideDir );
#line 1845 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctSliding  ++;
#line 1847 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetParallelComponent  (en_vMoveTranslation  * (1.0f - cmMove  . cm_fMovementFraction ) , 
#line 1848 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_vSlideDir  , vSliding );
#line 1849 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1850 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (IsValidFloat  (vSliding  (1)));
#line 1851 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (IsValidFloat  (_vSlideDir  (1)));
#line 1852 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (IsValidFloat  (_vSlideOffDir  (1)));
#line 1855 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(cmMove  . cm_pbpoHit  != NULL ){
#line 1856 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CSurfaceType  & stHit  = en_pwoWorld  -> wo_astSurfaceTypes  [ 
#line 1857 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmMove  . cm_pbpoHit  -> bpo_bppProperties  . bpp_ubSurfaceType  ];
#line 1859 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(penPusher  == NULL  
#line 1860 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& (en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_CLIMBORSLIDE ){
#line 1868 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D & vHitPlane  = (FLOAT3D &) cmMove  . cm_plClippedPlane ;
#line 1869 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bHitStairs  = cmMove  . cm_pbpoHit  -> bpo_ulFlags  & BPOF_STAIRS ;
#line 1874 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((vHitPlane  % en_vGravityDir  > - stHit  . st_fClimbSlopeCos ) 
#line 1875 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| bHitStairs ){
#line 1876 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bStair  = TRUE ;
#line 1879 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fSlidingVertical2  = en_vMoveTranslation  % en_vGravityDir ;
#line 1880 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fSlidingVertical2  *= fSlidingVertical2 ;
#line 1881 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fSliding2  = en_vMoveTranslation  % en_vMoveTranslation ;
#line 1882 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((2 * fSlidingVertical2  <= fSliding2 ) 
#line 1884 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& TryToGoUpstairs  (en_vMoveTranslation  , stHit  , bHitStairs )){
#line 1886 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1887 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1888 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1889 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
else 
#line 1890 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1891 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bStair  = FALSE ;
#line 1892 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1893 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1894 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1897 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_STOPEXACT ){
#line 1899 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vSliding  = FLOAT3D (0 , 0 , 0);
#line 1900 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1902 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (IsValidFloat  (vSliding  (1)));
#line 1905 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vSliding  += _vSlideOffDir  * 
#line 1906 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(ClampUp  (en_vMoveTranslation  . Length  () , 0.5f) / 100.0f);
#line 1909 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_vMoveTranslation  . Length  () > 0.001f && cmMove  . cm_fMovementFraction  > 0.002f){
#line 1911 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vSliding  += en_vMoveTranslation  * (cmMove  . cm_fMovementFraction  * 0.98f);
#line 1912 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1915 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(vSliding  . ManhattanNorm  () < 0.03f){
#line 1916 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1917 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1920 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  = vSliding ;
#line 1921 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1922 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TryToMove  (penPusher  , bTranslate  , bRotate );
#line 1924 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bBounce ){
#line 1926 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  = vBounce ;
#line 1928 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penReference  = NULL ;
#line 1929 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 1930 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_iReferenceSurface  = 0;
#line 1931 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1934 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1937 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(bRotate ){
#line 1939 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_BOUNCE ){
#line 1941 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  *= en_fBounceDampParallel ;
#line 1942 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_aDesiredRotationRelative  . Length  () < 10){
#line 1943 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = ANGLE3D (0 , 0 , 0);
#line 1944 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1946 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1947 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1949 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  = cmMove  . cm_vClippedLine  * - 1.2f;
#line 1951 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1952 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TryToMove  (penPusher  , TRUE  , bRotate );
#line 1954 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1955 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1957 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1960 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 1962 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SendBlockEvent  (cmMove );
#line 1963 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1964 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return FALSE ;
#line 1965 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1966 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 1967 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::ClearMovingTemp(void) 
#line 1972 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1976 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 1977 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CLEARMEM  (en_vMoveTranslation );
#line 1978 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CLEARMEM  (en_mMoveRotation );
#line 1979 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CLEARMEM  (en_vAppliedTranslation );
#line 1980 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CLEARMEM  (en_mAppliedRotation );
#line 1981 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::PreMoving(void) 
#line 1985 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 1996 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  == NULL ){
#line 1997 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 1998 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2005 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacement  = en_plPlacement ;
#line 2010 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{FOREACHINLIST  (CEntity  , en_lnInParent  , en_lhChildren  , itenChild ){
#line 2012 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((itenChild  -> en_ulPhysicsFlags  & EPF_MOVABLE ) 
#line 2013 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& ! ((CMovableEntity  *) & * itenChild ) -> en_lnInMovers  . IsLinked  () || itenChild  -> IsPlayer  ()){
#line 2014 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * penChild  = ((CMovableEntity  *) & * itenChild );
#line 2016 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penChild  -> en_plLastPlacement  = penChild  -> en_plPlacement ;
#line 2017 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2018 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}}
#line 2020 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fTickQuantum  = _pTimer  -> TickQuantum ;
#line 2023 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(dbg_bBreak ){
#line 2024 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
dbg_bBreak  = FALSE ;
#line 2025 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
try {
#line 2026 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
Breakpoint  ();
#line 2027 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}catch  (ANYEXCEPTION ){
#line 2028 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CPrintF  ("Breakpoint!\n");
#line 2029 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
};
#line 2030 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2039 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT fMaxSpeed  = 300.0f;
#line 2040 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  (1) = Clamp  (en_vCurrentTranslationAbsolute  (1) , - fMaxSpeed  , + fMaxSpeed );
#line 2041 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  (2) = Clamp  (en_vCurrentTranslationAbsolute  (2) , - fMaxSpeed  , + fMaxSpeed );
#line 2042 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  (3) = Clamp  (en_vCurrentTranslationAbsolute  (3) , - fMaxSpeed  , + fMaxSpeed );
#line 2045 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_RenderType  == RT_MODEL  || en_RenderType  == RT_EDITORMODEL  || 
#line 2046 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_RenderType  == RT_SKAMODEL  || en_RenderType  == RT_SKAEDITORMODEL ){
#line 2048 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TestFields  (en_iUpContent  , en_iDnContent  , en_fImmersionFactor );
#line 2050 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_STICKYFEET ){
#line 2052 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vPoint ;
#line 2053 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATplane3D plPlane ;
#line 2054 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fDistanceToEdge ;
#line 2055 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(GetNearestPolygon  (vPoint  , plPlane  , fDistanceToEdge )){
#line 2056 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vGravityDir  = - (FLOAT3D &) plPlane ;
#line 2057 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2058 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2059 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2060 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CContentType  & ctDn  = en_pwoWorld  -> wo_actContentTypes  [ en_iDnContent  ];
#line 2061 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CContentType  & ctUp  = en_pwoWorld  -> wo_actContentTypes  [ en_iUpContent  ];
#line 2064 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TestBreathing  (ctUp );
#line 2066 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TestContentDamage  (ctDn  , en_fImmersionFactor );
#line 2068 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL ){
#line 2069 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CSurfaceType  & stReference  = en_pwoWorld  -> wo_astSurfaceTypes  [ en_iReferenceSurface  ];
#line 2070 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TestSurfaceDamage  (stReference );
#line 2071 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2074 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fBouyancy  = (1 - 
#line 2075 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(ctDn  . ct_fDensity  / en_fDensity ) * en_fImmersionFactor  - 
#line 2076 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(ctUp  . ct_fDensity  / en_fDensity ) * (1 - en_fImmersionFactor ));
#line 2077 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fSpeedModifier  = 
#line 2078 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctDn  . ct_fSpeedMultiplier  * en_fImmersionFactor  + 
#line 2079 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctUp  . ct_fSpeedMultiplier  * (1 - en_fImmersionFactor );
#line 2080 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fFluidFriction  = 
#line 2081 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctDn  . ct_fFluidFriction  * en_fImmersionFactor  + 
#line 2082 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctUp  . ct_fFluidFriction  * (1 - en_fImmersionFactor );
#line 2083 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fControlMultiplier  = 
#line 2084 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctDn  . ct_fControlMultiplier  * en_fImmersionFactor  + 
#line 2085 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ctUp  . ct_fControlMultiplier  * (1 - en_fImmersionFactor );
#line 2100 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vDesiredTranslationAbsolute  = en_vDesiredTranslationRelative ;
#line 2102 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! (en_ulPhysicsFlags  & EPF_ABSOLUTETRANSLATE )){
#line 2104 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2107 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  *= fTickQuantum ;
#line 2111 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ANGLE3D aRotationRelative ;
#line 2112 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
aRotationRelative  (1) = en_aDesiredRotationRelative  (1) * fTickQuantum ;
#line 2113 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
aRotationRelative  (2) = en_aDesiredRotationRelative  (2) * fTickQuantum ;
#line 2114 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
aRotationRelative  (3) = en_aDesiredRotationRelative  (3) * fTickQuantum ;
#line 2116 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D mRotationAbsolute ;
#line 2118 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_PUSH ){
#line 2119 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D mNewRotation ;
#line 2120 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
MakeRotationMatrixFast  (mNewRotation  , en_plPlacement  . pl_OrientationAngle  + aRotationRelative );
#line 2121 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mRotationAbsolute  = mNewRotation  * ! en_mRotation ;
#line 2123 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2124 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
MakeRotationMatrixFast  (mRotationAbsolute  , aRotationRelative );
#line 2125 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mRotationAbsolute  = en_mRotation  * (mRotationAbsolute  * ! en_mRotation );
#line 2126 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2129 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  *= fSpeedModifier ;
#line 2132 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fJump  = - en_mRotation  . GetColumn  (2) % vDesiredTranslationAbsolute ;
#line 2134 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bReferenceMovingInY  = FALSE ;
#line 2135 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bReferenceRotatingNonY  = FALSE ;
#line 2137 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL  && (en_penReference  -> en_ulPhysicsFlags  & EPF_MOVABLE ) && 
#line 2138 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((en_penReference  -> en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) != EPF_ONBLOCK_BOUNCE )){
#line 2139 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * penReference  = (CMovableEntity  *) (CEntity  *) en_penReference ;
#line 2141 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOAT3D & vReferenceTranslation  = penReference  -> en_vIntendedTranslation ;
#line 2142 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
const FLOATmatrix3D & mReferenceRotation  = penReference  -> en_mIntendedRotation ;
#line 2144 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vRadius  = en_plPlacement  . pl_PositionVector  
#line 2145 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
- penReference  -> en_plPlacement  . pl_PositionVector ;
#line 2146 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vReferenceDelta  = vReferenceTranslation  + vRadius  * mReferenceRotation  - vRadius ;
#line 2152 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bReferenceMovingInY  = (vReferenceDelta  % en_vGravityDir  != 0.0f);
#line 2153 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bReferenceRotatingNonY  = ((en_vGravityDir  * mReferenceRotation ) % en_vGravityDir ) > 0.01f;
#line 2154 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2156 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vTranslationAbsolute  = en_vCurrentTranslationAbsolute  * fTickQuantum ;
#line 2159 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_ORIENTINGTOGRAVITY ;
#line 2161 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_ORIENTEDBYGRAVITY ){
#line 2163 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vDown ;
#line 2164 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDown  (1) = - en_mRotation  (1 , 2);
#line 2165 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDown  (2) = - en_mRotation  (2 , 2);
#line 2166 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDown  (3) = - en_mRotation  (3 , 2);
#line 2169 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fCos  = vDown  % en_vGravityDir ;
#line 2171 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fCos  < 0.99999f){
#line 2173 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_ORIENTINGTOGRAVITY ;
#line 2176 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ANGLE a  = ACos  (fCos );
#line 2177 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(Abs  (a ) > 20){
#line 2178 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
a  = 20 * Sgn  (a );
#line 2179 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2180 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fRad  = RadAngle  (a );
#line 2183 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vAxis  = vDown  * en_vGravityDir ;
#line 2184 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fLen  = vAxis  . Length  ();
#line 2185 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fLen  < 0.01f){
#line 2186 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vAxis  (1) = en_mRotation  (1 , 3);
#line 2187 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vAxis  (2) = en_mRotation  (2 , 3);
#line 2188 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vAxis  (3) = en_mRotation  (3 , 3);
#line 2191 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(! m_bReferenceRotatingNonY ){
#line 2192 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
fRad  /= fLen ;
#line 2193 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2194 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vAxis  *= fRad ;
#line 2197 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATmatrix3D mGRotation ;
#line 2198 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mGRotation  (1 , 1) = 1;mGRotation  (1 , 2) = - vAxis  (3);mGRotation  (1 , 3) = vAxis  (2);
#line 2199 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mGRotation  (2 , 1) = vAxis  (3);mGRotation  (2 , 2) = 1;mGRotation  (2 , 3) = - vAxis  (1);
#line 2200 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mGRotation  (3 , 1) = - vAxis  (2);mGRotation  (3 , 2) = vAxis  (1);mGRotation  (3 , 3) = 1;
#line 2201 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
OrthonormalizeRotationMatrix  (mGRotation );
#line 2204 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
mRotationAbsolute  = mGRotation  * mRotationAbsolute ;
#line 2205 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2206 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2209 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_FLOATING ;
#line 2212 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! (GetFlags  () & ENF_ALIVE ) || (_pNetwork  -> m_bSingleMode  && IsEnemy  ()))
#line 2213 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2214 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fAcceleration  = 200.0f;
#line 2215 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fDeceleration  = 40.0f;
#line 2217 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2218 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
else 
#line 2219 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2220 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fAcceleration  = 10000.0f;
#line 2221 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_fDeceleration  = 10000.0f;
#line 2222 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2224 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT ACC  = en_fAcceleration  * fTickQuantum  * fTickQuantum ;
#line 2225 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT DEC  = en_fDeceleration  * fTickQuantum  * fTickQuantum ;
#line 2227 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! (en_ulPhysicsFlags  & EPF_TRANSLATEDBYGRAVITY )){
#line 2229 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_NOACCELERATION ){
#line 2230 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  = vDesiredTranslationAbsolute ;
#line 2231 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2232 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAcceleration  (vTranslationAbsolute  , vDesiredTranslationAbsolute  , 
#line 2233 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fControlMultiplier  , 
#line 2234 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fControlMultiplier );
#line 2235 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2237 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if((fBouyancy  * en_fGravityA  < 0.5f && (ctDn  . ct_ulFlags  & (CTF_SWIMABLE  | CTF_FLYABLE )))){
#line 2239 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_FLOATING ;
#line 2241 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_NOACCELERATION ){
#line 2242 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  = vDesiredTranslationAbsolute ;
#line 2243 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2244 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAcceleration  (vTranslationAbsolute  , vDesiredTranslationAbsolute  , 
#line 2245 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fControlMultiplier  , 
#line 2246 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fControlMultiplier );
#line 2247 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2250 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fBouyancy  < - 0.1f){
#line 2251 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGV  = en_fGravityV  * fTickQuantum  * fSpeedModifier ;
#line 2252 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGA  = (en_fGravityA  * - fBouyancy ) * fTickQuantum  * fTickQuantum ;
#line 2253 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAcceleration  (vTranslationAbsolute  , en_vGravityDir  * - fGV  , fGA  , fGA );
#line 2254 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else if(fBouyancy  > + 0.1f){
#line 2255 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGV  = en_fGravityV  * fTickQuantum  * fSpeedModifier ;
#line 2256 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGA  = (en_fGravityA  * fBouyancy ) * fTickQuantum  * fTickQuantum ;
#line 2257 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAcceleration  (vTranslationAbsolute  , en_vGravityDir  * fGV  , fGA  , fGA );
#line 2258 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2261 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2262 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bGravityAlongPolygon  = TRUE ;
#line 2264 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pbpoStandOn  == NULL  || ! IsStandingOnPolygon  (en_pbpoStandOn ) || m_bReferenceMovingInY  
#line 2265 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| (en_ulPhysicsFlags  & EPF_ORIENTINGTOGRAVITY )){
#line 2267 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 2268 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  == NULL  || m_bReferenceMovingInY ){
#line 2269 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bGravityAlongPolygon  = FALSE ;
#line 2270 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2271 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2274 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
bGravityAlongPolygon  = FALSE ;
#line 2277 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! bGravityAlongPolygon ){
#line 2279 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGV  = en_fGravityV  * fTickQuantum  * fSpeedModifier ;
#line 2280 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGA  = (en_fGravityA  * fBouyancy ) * fTickQuantum  * fTickQuantum ;
#line 2287 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddGAcceleration  (vTranslationAbsolute  , en_vGravityDir  , fGA  , fGV );
#line 2289 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2291 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vPolygonDir  = - en_vReferencePlane ;
#line 2293 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vGParallel  , vGNormal ;
#line 2294 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
GetParallelAndNormalComponents  (en_vGravityDir  , vPolygonDir  , vGNormal  , vGParallel );
#line 2296 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fFactor  = vGParallel  . Length  ();
#line 2298 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fFactor  > 0.001f){
#line 2299 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGV  = en_fGravityV  * fTickQuantum  * fSpeedModifier ;
#line 2300 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fGA  = (en_fGravityA  * fBouyancy ) * fTickQuantum  * fTickQuantum ;
#line 2301 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddGAcceleration  (vTranslationAbsolute  , vGParallel  / fFactor  , fGA  * fFactor  , fGV  * fFactor );
#line 2302 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2305 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fPolyGA  = (vPolygonDir  % en_vGravityDir ) * en_fGravityA ;
#line 2306 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fYSpeed  = vPolygonDir  % vTranslationAbsolute ;
#line 2307 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fYSpeed  > 0 && fYSpeed  < fPolyGA ){
#line 2308 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  -= vPolygonDir  * fYSpeed ;
#line 2309 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2312 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_BOUNCE ){
#line 2314 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  *= en_fJumpControlMultiplier ;
#line 2315 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_aDesiredRotationRelative  . Length  () < 10){
#line 2316 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = ANGLE3D (0 , 0 , 0);
#line 2317 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2318 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2319 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2321 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CSurfaceType  & stReference  = en_pwoWorld  -> wo_astSurfaceTypes  [ en_iReferenceSurface  ];
#line 2324 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL ){
#line 2325 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fPlaneY  = (en_vGravityDir  % en_vReferencePlane );
#line 2326 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fPlaneYAbs  = Abs  (fPlaneY );
#line 2327 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fFriction  = stReference  . st_fFriction ;
#line 2403 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fPlaneY  >= - stReference  . st_fClimbSlopeCos  && fPlaneY  < 0 
#line 2404 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| (stReference  . st_ulFlags  & STF_SLIDEDOWNSLOPE ) && fPlaneY  > - 0.99f){
#line 2405 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2407 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(GetFlags  () & ENF_ALIVE  && ! IsEnemy  ())
#line 2408 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2409 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  |= EPF_ONSTEEPSLOPE ;
#line 2412 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAccelerationOnPlane2  (
#line 2413 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  , 
#line 2414 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  , 
#line 2415 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2416 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2417 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  , 
#line 2418 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vGravityDir );
#line 2419 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2420 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
else 
#line 2421 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2422 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_ONSTEEPSLOPE ;
#line 2424 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAccelerationOnPlane  (
#line 2425 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  , 
#line 2426 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  , 
#line 2427 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2428 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2429 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane );
#line 2430 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2442 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2445 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else 
#line 2447 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2448 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vPreTranslationAbs  = vTranslationAbsolute ;
#line 2449 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacementTmp  = en_plLastPlacement ;
#line 2450 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penLastValidReferenceTmp  = en_penReference ;
#line 2451 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bForceStop  = FALSE ;
#line 2452 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_ONSTEEPSLOPE ;
#line 2454 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAccelerationOnPlane  (
#line 2455 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  , 
#line 2456 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  , 
#line 2457 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2458 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fPlaneYAbs  * fPlaneYAbs  * fFriction  * fControlMultiplier  , 
#line 2459 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane );
#line 2461 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(m_bFallDownToFloor )
#line 2462 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2463 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  (1) = 0.0f;
#line 2464 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  (2) = vPreTranslationAbs  (2);
#line 2465 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  (3) = 0.0f;
#line 2466 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2467 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2469 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fJump  < - 0.01f && (fPlaneY  < - stReference  . st_fJumpSlopeCos  
#line 2470 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| en_tmEntityTime  > en_tmLastSignificantVerticalMovement  + 0.25f)){
#line 2472 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  += en_vGravityDir  * fJump ;
#line 2473 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmJumped  = en_tmEntityTime ;
#line 2474 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 2475 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2478 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2480 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
m_bForceStop  = FALSE ;
#line 2482 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_tmEntityTime  - en_tmJumped  < en_tmMaxJumpControl ){
#line 2484 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAccelerationOnPlane  (
#line 2485 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  , 
#line 2486 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vDesiredTranslationAbsolute  , 
#line 2487 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ACC  * fControlMultiplier  * en_fJumpControlMultiplier  , 
#line 2488 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
DEC  * fControlMultiplier  * en_fJumpControlMultiplier  , 
#line 2489 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATplane3D (en_vGravityDir  , 0));
#line 2490 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2493 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fJump  < - 0.01f && 
#line 2494 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmEntityTime  > en_tmLastSignificantVerticalMovement  + 0.25f){
#line 2496 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
vTranslationAbsolute  += en_vGravityDir  * fJump ;
#line 2497 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmJumped  = en_tmEntityTime ;
#line 2498 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pbpoStandOn  = NULL ;
#line 2499 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2500 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2501 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2505 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CheckAndAddGAcceleration  (this  , vTranslationAbsolute  , fTickQuantum );
#line 2508 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(fFluidFriction  > 0.01f){
#line 2510 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
AddAcceleration  (vTranslationAbsolute  , FLOAT3D (0.0f , 0.0f , 0.0f) , 
#line 2511 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
0.0f , DEC  * fFluidFriction );
#line 2512 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2515 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_CANFADESPINNING ) && 
#line 2516 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
((ctDn  . ct_ulFlags  & CTF_FADESPINNING ) || (ctUp  . ct_ulFlags  & CTF_FADESPINNING ))){
#line 2518 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  *= (1 - fSpeedModifier  * 0.05f);
#line 2519 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_aDesiredRotationRelative  . Length  () < 10){
#line 2520 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_aDesiredRotationRelative  = ANGLE3D (0 , 0 , 0);
#line 2521 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2522 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2525 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pbpoStandOn  == NULL  && (vTranslationAbsolute  . ManhattanNorm  () > 1E-5f || 
#line 2526 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  % en_vGravityDir  < 0.0f)){
#line 2527 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penReference  = NULL ;
#line 2528 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vReferencePlane  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 2529 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_iReferenceSurface  = 0;
#line 2530 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2532 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vIntendedTranslation  = vTranslationAbsolute ;
#line 2533 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mIntendedRotation  = mRotationAbsolute ;
#line 2538 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATaabbox3D box ;
#line 2539 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pciCollisionInfo  -> MakeBoxAtPlacement  (FLOAT3D (0 , 0 , 0) , en_mRotation  , box );
#line 2541 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{CLightSource  * pls  = GetLightSource  ();
#line 2542 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pls  != NULL  && ! (pls  -> ls_ulFlags  & LSF_LENSFLAREONLY )){
#line 2544 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (! (pls  -> ls_ulFlags  & LSF_DIRECTIONAL ));
#line 2545 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  |= FLOATaabbox3D (FLOAT3D (0 , 0 , 0) , pls  -> ls_rFallOff );
#line 2546 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}}
#line 2548 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  . ExpandByFactor  (phy_fCollisionCacheAround  - 1.0f);
#line 2550 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  += en_plPlacement  . pl_PositionVector ;
#line 2551 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  = box ;
#line 2552 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  += en_vIntendedTranslation  * phy_fCollisionCacheAhead ;
#line 2553 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  |= box ;
#line 2556 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vAppliedTranslation  = FLOAT3D (0.0f , 0.0f , 0.0f);
#line 2557 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mAppliedRotation  . Diagonal  (1.0f);
#line 2558 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::DoMoving(void) 
#line 2562 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2563 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  == NULL  || (en_ulPhysicsFlags  & EPF_FORCEADDED )){
#line 2564 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2565 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2567 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(m_bForceStop )
#line 2568 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2569 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2570 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2578 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fTickQuantum  = _pTimer  -> TickQuantum ;
#line 2580 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_RT_SYNCHRONIZED ){
#line 2582 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  = en_vIntendedTranslation  - en_vAppliedTranslation ;
#line 2583 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  = en_mIntendedRotation  * ! en_mAppliedRotation ;
#line 2585 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InitTryToMove  ();
#line 2586 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * penPusher  = NULL ;
#line 2587 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) == EPF_ONBLOCK_PUSH ){
#line 2588 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
penPusher  = this ;
#line 2589 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2590 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TryToMove  (penPusher  , TRUE  , TRUE );
#line 2594 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2595 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  ((en_ulPhysicsFlags  & EPF_ONBLOCK_MASK ) != EPF_ONBLOCK_PUSH );
#line 2597 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  == NULL ){
#line 2599 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  = en_vIntendedTranslation  - en_vAppliedTranslation ;
#line 2600 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  = en_mIntendedRotation  * ! en_mAppliedRotation ;
#line 2601 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InitTryToMove  ();
#line 2602 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
_ctTryToMoveCheckCounter  = 4;
#line 2603 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
BOOL bMoveSuccessfull  = TryToMove  (NULL  , TRUE  , TRUE );
#line 2605 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(bMoveSuccessfull ){
#line 2607 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2608 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2609 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2612 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vMoveTranslation  = en_vIntendedTranslation  - en_vAppliedTranslation ;
#line 2613 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InitTryToMove  ();
#line 2614 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TryToMove  (NULL  , TRUE  , FALSE );
#line 2617 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  = en_mIntendedRotation  * ! en_mAppliedRotation ;
#line 2618 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(
#line 2619 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  (1 , 1) != 1 || en_mMoveRotation  (1 , 2) != 0 || en_mMoveRotation  (1 , 3) != 0 || 
#line 2620 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  (2 , 1) != 0 || en_mMoveRotation  (2 , 2) != 1 || en_mMoveRotation  (2 , 3) != 0 || 
#line 2621 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_mMoveRotation  (3 , 1) != 0 || en_mMoveRotation  (3 , 2) != 0 || en_mMoveRotation  (3 , 3) != 1){
#line 2622 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
InitTryToMove  ();
#line 2623 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
TryToMove  (NULL  , FALSE  , TRUE );
#line 2624 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2625 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2626 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::PostMoving(void) 
#line 2630 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2631 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmEntityTime  += _pTimer  -> TickQuantum ;
#line 2633 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(m_bForceStop )
#line 2634 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2635 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2636 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2638 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  == NULL ){
#line 2640 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulFlags  |= ENF_INRENDERING ;
#line 2641 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2642 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2644 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulPhysicsFlags  & EPF_FORCEADDED ){
#line 2645 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_FORCEADDED ;
#line 2646 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return ;
#line 2647 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2650 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL ){
#line 2651 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_penLastValidReference  = en_penReference ;
#line 2652 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2655 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vOldTranslation  = en_vCurrentTranslationAbsolute ;
#line 2656 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fTickQuantum  = _pTimer  -> TickQuantum ;
#line 2658 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vCurrentTranslationAbsolute  = en_vAppliedTranslation  / fTickQuantum ;
#line 2661 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(Abs  (en_vCurrentTranslationAbsolute  % en_vGravityDir ) > 0.1f){
#line 2662 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_tmLastSignificantVerticalMovement  = en_tmEntityTime ;
#line 2663 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2665 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ClearNextPosition  ();
#line 2668 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT3D vSpeedDelta  = en_vIntendedTranslation  - en_vAppliedTranslation ;
#line 2669 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOAT fSpeedDelta  = vSpeedDelta  . Length  () / fTickQuantum ;
#line 2684 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulPhysicsFlags  &= ~ EPF_NOIMPACTTHISTICK ;
#line 2687 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_vIntendedTranslation  = vOldTranslation ;
#line 2690 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_vCurrentTranslationAbsolute  . ManhattanNorm  () < 0.001f 
#line 2691 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& (en_vDesiredTranslationRelative  . ManhattanNorm  () == 0 || en_fAcceleration  == 0) 
#line 2692 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
&& en_aDesiredRotationRelative  . ManhattanNorm  () == 0){
#line 2695 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  != NULL ){
#line 2697 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_penReference  -> en_ulPhysicsFlags  & EPF_MOVABLE ){
#line 2698 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CMovableEntity  * penReference  = (CMovableEntity  *) (CEntity  *) en_penReference ;
#line 2700 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(! penReference  -> en_lnInMovers  . IsLinked  ()){
#line 2702 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulFlags  |= ENF_INRENDERING ;
#line 2703 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2705 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2707 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulFlags  |= ENF_INRENDERING ;
#line 2708 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2711 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}else {
#line 2713 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(
#line 2714 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
(! (en_ulPhysicsFlags  & (EPF_TRANSLATEDBYGRAVITY  | EPF_ORIENTEDBYGRAVITY )) 
#line 2715 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
|| en_fGravityA  == 0.0f || (en_ulPhysicsFlags  & EPF_FLOATING ))){
#line 2717 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_ulFlags  |= ENF_INRENDERING ;
#line 2718 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2719 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2722 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_ulFlags  & ENF_INRENDERING ){
#line 2724 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plLastPlacement  = en_plPlacement ;
#line 2725 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2726 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2729 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_plpLastPositions  != NULL ){
#line 2730 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_plpLastPositions  -> AddPosition  (en_vNextPosition );
#line 2731 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
#line 2733 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  void CMovableEntity::CacheNearPolygons(void) 
#line 2737 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2738 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cm  (this );
#line 2739 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cm  . CacheNearPolygons  ();
#line 2740 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 2744 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SLONG CMovableEntity::GetUsedMemory(void) 
#line 2745 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{
#line 2747 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
SLONG  slUsedMemory  = sizeof  (CMovableEntity ) - sizeof  (CRationalEntity ) + CRationalEntity  :: GetUsedMemory  ();
#line 2749 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
slUsedMemory  += en_apbpoNearPolygons  . sa_Count  * sizeof  (CBrushPolygon  *);
#line 2750 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
return slUsedMemory ;
#line 2751 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
  
#line 2755 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
void CMovableEntity::ClientCacheNearPolygons() {
#line 2757 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
FLOATaabbox3D box ;
#line 2758 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(en_pciCollisionInfo  == NULL ){return ;}
#line 2759 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_pciCollisionInfo  -> MakeBoxAtPlacement  (FLOAT3D (0 , 0 , 0) , en_mRotation  , box );
#line 2761 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
{CLightSource  * pls  = GetLightSource  ();
#line 2762 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
if(pls  != NULL  && ! (pls  -> ls_ulFlags  & LSF_LENSFLAREONLY )){
#line 2764 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
ASSERT  (! (pls  -> ls_ulFlags  & LSF_DIRECTIONAL ));
#line 2765 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  |= FLOATaabbox3D (FLOAT3D (0 , 0 , 0) , pls  -> ls_rFallOff );
#line 2766 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}}
#line 2768 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
extern  FLOAT phy_fCollisionCacheAround ;
#line 2769 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  . ExpandByFactor  (phy_fCollisionCacheAround  - 1.0f);
#line 2771 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
box  += en_plPlacement  . pl_PositionVector ;
#line 2772 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
en_boxMovingEstimate  = box ;
#line 2774 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
CClipMove  cmClipMove  (this );
#line 2775 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . cm_pwoWorld  = & (_pNetwork  -> ga_World );
#line 2778 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . cm_ulTestMask1  = ((en_ulCollisionFlags  & ECF_TESTMASK ) >> ECB_TEST ) << ECB_IS ;
#line 2779 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . cm_ulTestMask2  = ((en_ulCollisionFlags  & ECF_ISMASK ) >> ECB_IS ) << ECB_TEST ;
#line 2781 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . cm_ulPassMaskA  = ((en_ulCollisionFlags  & ECF_PASSMASK ) >> ECB_PASS ) << ECB_IS ;
#line 2782 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . cm_ulPassMaskB  = ((en_ulCollisionFlags  & ECF_ISMASK ) >> ECB_IS ) << ECB_PASS ;
#line 2784 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
cmClipMove  . CacheNearPolygons  ();
#line 2786 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
}
BOOL CMovableEntity::
#line 2793 "E:/질산/Korea/Client_USA/Engine/Classes/MovableEntity.es"
Dummy(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovableEntity_Dummy
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovableEntity::Dummy expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput; ASSERT(FALSE); return TRUE;};